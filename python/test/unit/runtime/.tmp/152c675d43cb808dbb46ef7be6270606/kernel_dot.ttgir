#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @kernel_dot_0d(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<16> : tensor<16x1xi32, #blocked>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x16xf32, #blocked>
    %0 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %1 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<16x1xi32, #blocked>
    %2 = arith.muli %1, %cst : tensor<16x1xi32, #blocked>
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x16xi32, #blocked>
    %5 = tt.broadcast %2 : (tensor<16x1xi32, #blocked>) -> tensor<16x16xi32, #blocked>
    %6 = tt.broadcast %4 : (tensor<1x16xi32, #blocked>) -> tensor<16x16xi32, #blocked>
    %7 = arith.addi %5, %6 : tensor<16x16xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<16x16x!tt.ptr<f32>, #blocked>
    %9 = tt.addptr %8, %7 : tensor<16x16x!tt.ptr<f32>, #blocked>, tensor<16x16xi32, #blocked>
    %10 = tt.load %9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x16xf32, #blocked>
    %11 = triton_gpu.convert_layout %10 : (tensor<16x16xf32, #blocked>) -> tensor<16x16xf32, #shared>
    %12 = triton_gpu.convert_layout %11 : (tensor<16x16xf32, #shared>) -> tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked}>>
    %13 = triton_gpu.convert_layout %11 : (tensor<16x16xf32, #shared>) -> tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked}>>
    %14 = tt.dot %13, %12, %cst_0 {allowTF32 = true} : tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked}>> * tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked}>> -> tensor<16x16xf32, #blocked>
    tt.store %9, %14 {cache = 1 : i32, evict = 1 : i32} : tensor<16x16xf32, #blocked>
    tt.return
  }
}
