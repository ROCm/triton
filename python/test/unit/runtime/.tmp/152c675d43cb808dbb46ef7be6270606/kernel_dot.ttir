module {
  tt.func public @kernel_dot_0d(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf32>
    %cst_0 = arith.constant dense<16> : tensor<16x1xi32>
    %0 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32>
    %1 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<16xi32>) -> tensor<16x1xi32>
    %2 = arith.muli %1, %cst_0 : tensor<16x1xi32>
    %3 = tt.expand_dims %0 {axis = 0 : i32} : (tensor<16xi32>) -> tensor<1x16xi32>
    %4 = tt.broadcast %2 : (tensor<16x1xi32>) -> tensor<16x16xi32>
    %5 = tt.broadcast %3 : (tensor<1x16xi32>) -> tensor<16x16xi32>
    %6 = arith.addi %4, %5 : tensor<16x16xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<16x16x!tt.ptr<f32>>
    %8 = tt.addptr %7, %6 : tensor<16x16x!tt.ptr<f32>>, tensor<16x16xi32>
    %9 = tt.load %8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x16xf32>
    %10 = tt.dot %9, %9, %cst {allowTF32 = true} : tensor<16x16xf32> * tensor<16x16xf32> -> tensor<16x16xf32>
    tt.store %8, %10 {cache = 1 : i32, evict = 1 : i32} : tensor<16x16xf32>
    tt.return
  }
}
