============================= test session starts ==============================
platform linux -- Python 3.10.0, pytest-7.4.0, pluggy-1.2.0 -- /pyenv/versions/3.10.0/bin/python3.10
cachedir: .pytest_cache
rootdir: /root/triton/triton/python
plugins: rerunfailures-12.0
collecting ... collected 1 item

python/test/unit/language/test_core_amd.py::test_dot[32-32-32-2-False-False-softmax-False-float32] // -----// IR Dump After Canonicalizer (canonicalize) //----- //
tt.func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
  %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32>
  %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
  %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
  %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
  %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
  %4 = tt.splat %arg1 : (i32) -> tensor<32x1xi32>
  %5 = arith.muli %3, %4 : tensor<32x1xi32>
  %6 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
  %7 = tt.addptr %6, %5 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
  %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
  %9 = tt.broadcast %7 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x32x!tt.ptr<f32>>
  %10 = tt.broadcast %8 : (tensor<1x32xi32>) -> tensor<32x32xi32>
  %11 = tt.addptr %9, %10 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
  %12 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
  %13 = tt.splat %arg3 : (i32) -> tensor<32x1xi32>
  %14 = arith.muli %12, %13 : tensor<32x1xi32>
  %15 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
  %16 = tt.addptr %15, %14 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
  %17 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
  %18 = tt.broadcast %16 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x32x!tt.ptr<f32>>
  %19 = tt.broadcast %17 : (tensor<1x32xi32>) -> tensor<32x32xi32>
  %20 = tt.addptr %18, %19 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
  %21 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
  %22 = tt.splat %arg7 : (i32) -> tensor<32x1xi32>
  %23 = arith.muli %21, %22 : tensor<32x1xi32>
  %24 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
  %25 = tt.addptr %24, %23 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
  %26 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
  %27 = tt.broadcast %25 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x32x!tt.ptr<f32>>
  %28 = tt.broadcast %26 : (tensor<1x32xi32>) -> tensor<32x32xi32>
  %29 = tt.addptr %27, %28 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
  %30 = tt.load %11 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32>
  %31 = tt.load %20 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32>
  %32 = tt.dot %30, %31, %cst {allowTF32 = false} : tensor<32x32xf32> * tensor<32x32xf32> -> tensor<32x32xf32>
  %33 = tt.call @max__fp32S32_32S__1cconstexpr_1__2cconstexpr_False_(%32) : (tensor<32x32xf32>) -> tensor<32xf32>
  %34 = tt.expand_dims %33 {axis = 1 : i32} : (tensor<32xf32>) -> tensor<32x1xf32>
  %35 = tt.broadcast %34 : (tensor<32x1xf32>) -> tensor<32x32xf32>
  %36 = arith.subf %32, %35 : tensor<32x32xf32>
  %37 = math.exp %36 : tensor<32x32xf32>
  %38 = tt.call @sum__fp32S32_32S__1cconstexpr_1_(%37) : (tensor<32x32xf32>) -> tensor<32xf32>
  %39 = tt.expand_dims %38 {axis = 1 : i32} : (tensor<32xf32>) -> tensor<32x1xf32>
  %40 = tt.broadcast %39 : (tensor<32x1xf32>) -> tensor<32x32xf32>
  %41 = arith.divf %37, %40 : tensor<32x32xf32>
  tt.store %29, %41 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32>
  tt.return
}

// -----// IR Dump After Inliner (inline) //----- //
module {
  tt.func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %4 = tt.splat %arg1 : (i32) -> tensor<32x1xi32>
    %5 = arith.muli %3, %4 : tensor<32x1xi32>
    %6 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %7 = tt.addptr %6, %5 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %9 = tt.broadcast %7 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x32x!tt.ptr<f32>>
    %10 = tt.broadcast %8 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %11 = tt.addptr %9, %10 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
    %12 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %13 = tt.splat %arg3 : (i32) -> tensor<32x1xi32>
    %14 = arith.muli %12, %13 : tensor<32x1xi32>
    %15 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %16 = tt.addptr %15, %14 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %17 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %18 = tt.broadcast %16 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x32x!tt.ptr<f32>>
    %19 = tt.broadcast %17 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %20 = tt.addptr %18, %19 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
    %21 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %22 = tt.splat %arg7 : (i32) -> tensor<32x1xi32>
    %23 = arith.muli %21, %22 : tensor<32x1xi32>
    %24 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %25 = tt.addptr %24, %23 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %26 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %27 = tt.broadcast %25 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x32x!tt.ptr<f32>>
    %28 = tt.broadcast %26 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %29 = tt.addptr %27, %28 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
    %30 = tt.load %11 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32>
    %31 = tt.load %20 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32>
    %32 = tt.dot %30, %31, %cst {allowTF32 = false} : tensor<32x32xf32> * tensor<32x32xf32> -> tensor<32x32xf32>
    %33 = "tt.reduce"(%32) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %42 = arith.cmpf ogt, %arg8, %arg9 : f32
      %43 = arith.select %42, %arg8, %arg9 : f32
      tt.reduce.return %43 : f32
    }) : (tensor<32x32xf32>) -> tensor<32xf32>
    %34 = tt.expand_dims %33 {axis = 1 : i32} : (tensor<32xf32>) -> tensor<32x1xf32>
    %35 = tt.broadcast %34 : (tensor<32x1xf32>) -> tensor<32x32xf32>
    %36 = arith.subf %32, %35 : tensor<32x32xf32>
    %37 = math.exp %36 : tensor<32x32xf32>
    %38 = "tt.reduce"(%37) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %42 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %42 : f32
    }) : (tensor<32x32xf32>) -> tensor<32xf32>
    %39 = tt.expand_dims %38 {axis = 1 : i32} : (tensor<32xf32>) -> tensor<32x1xf32>
    %40 = tt.broadcast %39 : (tensor<32x1xf32>) -> tensor<32x32xf32>
    %41 = arith.divf %37, %40 : tensor<32x32xf32>
    tt.store %29, %41 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32>
    tt.return
  }
}


// -----// IR Dump After CSE (cse) //----- //
module {
  tt.func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %1 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %2 = tt.splat %arg1 : (i32) -> tensor<32x1xi32>
    %3 = arith.muli %1, %2 : tensor<32x1xi32>
    %4 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %6 = tt.expand_dims %0 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %7 = tt.broadcast %5 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x32x!tt.ptr<f32>>
    %8 = tt.broadcast %6 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %9 = tt.addptr %7, %8 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
    %10 = tt.splat %arg3 : (i32) -> tensor<32x1xi32>
    %11 = arith.muli %1, %10 : tensor<32x1xi32>
    %12 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %13 = tt.addptr %12, %11 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %14 = tt.broadcast %13 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x32x!tt.ptr<f32>>
    %15 = tt.addptr %14, %8 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
    %16 = tt.splat %arg7 : (i32) -> tensor<32x1xi32>
    %17 = arith.muli %1, %16 : tensor<32x1xi32>
    %18 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %19 = tt.addptr %18, %17 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %20 = tt.broadcast %19 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x32x!tt.ptr<f32>>
    %21 = tt.addptr %20, %8 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
    %22 = tt.load %9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32>
    %23 = tt.load %15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32>
    %24 = tt.dot %22, %23, %cst {allowTF32 = false} : tensor<32x32xf32> * tensor<32x32xf32> -> tensor<32x32xf32>
    %25 = "tt.reduce"(%24) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %34 = arith.cmpf ogt, %arg8, %arg9 : f32
      %35 = arith.select %34, %arg8, %arg9 : f32
      tt.reduce.return %35 : f32
    }) : (tensor<32x32xf32>) -> tensor<32xf32>
    %26 = tt.expand_dims %25 {axis = 1 : i32} : (tensor<32xf32>) -> tensor<32x1xf32>
    %27 = tt.broadcast %26 : (tensor<32x1xf32>) -> tensor<32x32xf32>
    %28 = arith.subf %24, %27 : tensor<32x32xf32>
    %29 = math.exp %28 : tensor<32x32xf32>
    %30 = "tt.reduce"(%29) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %34 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %34 : f32
    }) : (tensor<32x32xf32>) -> tensor<32xf32>
    %31 = tt.expand_dims %30 {axis = 1 : i32} : (tensor<32xf32>) -> tensor<32x1xf32>
    %32 = tt.broadcast %31 : (tensor<32x1xf32>) -> tensor<32x32xf32>
    %33 = arith.divf %29, %32 : tensor<32x32xf32>
    tt.store %21, %33 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32>
    tt.return
  }
}


// -----// IR Dump After ConvertTritonToTritonGPU (convert-triton-to-tritongpu) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [2], order = [0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [2, 1], order = [0, 1]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked4 = #triton_gpu.blocked<{sizePerThread = [2, 2], threadsPerWarp = [4, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 2 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked1>
    %1 = triton_gpu.convert_layout %0 : (tensor<32xi32, #blocked1>) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %2 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<32x1xi32, #blocked2>
    %3 = triton_gpu.convert_layout %2 : (tensor<32x1xi32, #blocked2>) -> tensor<32x1xi32, #blocked>
    %4 = tt.splat %arg1 : (i32) -> tensor<32x1xi32, #blocked>
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked>
    %6 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %7 = tt.addptr %6, %5 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %8 = triton_gpu.convert_layout %0 : (tensor<32xi32, #blocked1>) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>
    %9 = tt.expand_dims %8 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x32xi32, #blocked3>
    %10 = tt.broadcast %7 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %11 = tt.broadcast %9 : (tensor<1x32xi32, #blocked3>) -> tensor<32x32xi32, #blocked3>
    %12 = triton_gpu.convert_layout %11 : (tensor<32x32xi32, #blocked3>) -> tensor<32x32xi32, #blocked>
    %13 = tt.addptr %10, %12 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %14 = tt.splat %arg3 : (i32) -> tensor<32x1xi32, #blocked>
    %15 = arith.muli %3, %14 : tensor<32x1xi32, #blocked>
    %16 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %17 = tt.addptr %16, %15 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %18 = tt.broadcast %17 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %19 = tt.addptr %18, %12 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %20 = tt.splat %arg7 : (i32) -> tensor<32x1xi32, #blocked>
    %21 = arith.muli %3, %20 : tensor<32x1xi32, #blocked>
    %22 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %23 = tt.addptr %22, %21 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %24 = tt.broadcast %23 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %25 = tt.addptr %24, %12 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %26 = tt.load %13 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked>
    %27 = tt.load %19 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked>
    %28 = triton_gpu.convert_layout %26 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked4}>>
    %29 = triton_gpu.convert_layout %27 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked4}>>
    %30 = triton_gpu.convert_layout %cst : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #blocked4>
    %31 = tt.dot %28, %29, %30 {allowTF32 = false} : tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked4}>> * tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked4}>> -> tensor<32x32xf32, #blocked4>
    %32 = triton_gpu.convert_layout %31 : (tensor<32x32xf32, #blocked4>) -> tensor<32x32xf32, #blocked>
    %33 = "tt.reduce"(%32) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %48 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %49 = arith.select %48, %arg8, %arg9 : f32
      tt.reduce.return %49 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %34 = triton_gpu.convert_layout %33 : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32xf32, #blocked1>
    %35 = triton_gpu.convert_layout %34 : (tensor<32xf32, #blocked1>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %36 = tt.expand_dims %35 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<32x1xf32, #blocked2>
    %37 = triton_gpu.convert_layout %36 : (tensor<32x1xf32, #blocked2>) -> tensor<32x1xf32, #blocked>
    %38 = tt.broadcast %37 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %39 = arith.subf %32, %38 : tensor<32x32xf32, #blocked>
    %40 = math.exp %39 : tensor<32x32xf32, #blocked>
    %41 = "tt.reduce"(%40) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %48 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %48 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %42 = triton_gpu.convert_layout %41 : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32xf32, #blocked1>
    %43 = triton_gpu.convert_layout %42 : (tensor<32xf32, #blocked1>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %44 = tt.expand_dims %43 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<32x1xf32, #blocked2>
    %45 = triton_gpu.convert_layout %44 : (tensor<32x1xf32, #blocked2>) -> tensor<32x1xf32, #blocked>
    %46 = tt.broadcast %45 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %47 = arith.divf %40, %46 : tensor<32x32xf32, #blocked>
    tt.store %25, %47 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32, #blocked>
    tt.return
  }
}


// -----// IR Dump After TritonGPUCoalesce (tritongpu-coalesce) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [2], order = [0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [2, 1], order = [0, 1]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked5 = #triton_gpu.blocked<{sizePerThread = [2, 2], threadsPerWarp = [4, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 2 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked1>
    %1 = triton_gpu.convert_layout %0 : (tensor<32xi32, #blocked1>) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %2 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<32x1xi32, #blocked2>
    %3 = triton_gpu.convert_layout %2 : (tensor<32x1xi32, #blocked2>) -> tensor<32x1xi32, #blocked>
    %4 = tt.splat %arg1 : (i32) -> tensor<32x1xi32, #blocked>
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked>
    %6 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %7 = tt.addptr %6, %5 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %8 = triton_gpu.convert_layout %0 : (tensor<32xi32, #blocked1>) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>
    %9 = tt.expand_dims %8 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x32xi32, #blocked3>
    %10 = tt.broadcast %7 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %11 = tt.broadcast %9 : (tensor<1x32xi32, #blocked3>) -> tensor<32x32xi32, #blocked3>
    %12 = triton_gpu.convert_layout %11 : (tensor<32x32xi32, #blocked3>) -> tensor<32x32xi32, #blocked>
    %13 = tt.addptr %10, %12 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %14 = tt.splat %arg3 : (i32) -> tensor<32x1xi32, #blocked>
    %15 = arith.muli %3, %14 : tensor<32x1xi32, #blocked>
    %16 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %17 = tt.addptr %16, %15 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %18 = tt.broadcast %17 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %19 = tt.addptr %18, %12 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %20 = tt.splat %arg7 : (i32) -> tensor<32x1xi32, #blocked>
    %21 = arith.muli %3, %20 : tensor<32x1xi32, #blocked>
    %22 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %23 = tt.addptr %22, %21 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %24 = tt.broadcast %23 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %25 = tt.addptr %24, %12 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %26 = triton_gpu.convert_layout %13 : (tensor<32x32x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked4>
    %27 = tt.load %26 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked4>
    %28 = triton_gpu.convert_layout %27 : (tensor<32x32xf32, #blocked4>) -> tensor<32x32xf32, #blocked>
    %29 = triton_gpu.convert_layout %19 : (tensor<32x32x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked4>
    %30 = tt.load %29 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked4>
    %31 = triton_gpu.convert_layout %30 : (tensor<32x32xf32, #blocked4>) -> tensor<32x32xf32, #blocked>
    %32 = triton_gpu.convert_layout %28 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked5}>>
    %33 = triton_gpu.convert_layout %31 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked5}>>
    %34 = triton_gpu.convert_layout %cst : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #blocked5>
    %35 = tt.dot %32, %33, %34 {allowTF32 = false} : tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked5}>> * tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked5}>> -> tensor<32x32xf32, #blocked5>
    %36 = triton_gpu.convert_layout %35 : (tensor<32x32xf32, #blocked5>) -> tensor<32x32xf32, #blocked>
    %37 = "tt.reduce"(%36) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %54 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %55 = arith.select %54, %arg8, %arg9 : f32
      tt.reduce.return %55 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %38 = triton_gpu.convert_layout %37 : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32xf32, #blocked1>
    %39 = triton_gpu.convert_layout %38 : (tensor<32xf32, #blocked1>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %40 = tt.expand_dims %39 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<32x1xf32, #blocked2>
    %41 = triton_gpu.convert_layout %40 : (tensor<32x1xf32, #blocked2>) -> tensor<32x1xf32, #blocked>
    %42 = tt.broadcast %41 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %43 = arith.subf %36, %42 : tensor<32x32xf32, #blocked>
    %44 = math.exp %43 : tensor<32x32xf32, #blocked>
    %45 = "tt.reduce"(%44) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %54 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %54 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %46 = triton_gpu.convert_layout %45 : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32xf32, #blocked1>
    %47 = triton_gpu.convert_layout %46 : (tensor<32xf32, #blocked1>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %48 = tt.expand_dims %47 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<32x1xf32, #blocked2>
    %49 = triton_gpu.convert_layout %48 : (tensor<32x1xf32, #blocked2>) -> tensor<32x1xf32, #blocked>
    %50 = tt.broadcast %49 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %51 = arith.divf %44, %50 : tensor<32x32xf32, #blocked>
    %52 = triton_gpu.convert_layout %25 : (tensor<32x32x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked4>
    %53 = triton_gpu.convert_layout %51 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #blocked4>
    tt.store %52, %53 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32, #blocked4>
    tt.return
  }
}


// -----// IR Dump After TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [2, 2], threadsPerWarp = [4, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 2 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %6 = tt.splat %arg1 : (i32) -> tensor<32x1xi32, #blocked1>
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked1>
    %8 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked1>
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1>
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %13 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %14 = tt.expand_dims %11 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %15 = tt.expand_dims %12 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %16 = tt.broadcast %9 : (tensor<32x1x!tt.ptr<f32>, #blocked1>) -> tensor<32x32x!tt.ptr<f32>, #blocked1>
    %17 = tt.broadcast %13 : (tensor<1x32xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %18 = tt.broadcast %14 : (tensor<1x32xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %19 = tt.broadcast %15 : (tensor<1x32xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %20 = tt.addptr %16, %17 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1>
    %21 = tt.splat %arg3 : (i32) -> tensor<32x1xi32, #blocked1>
    %22 = arith.muli %4, %21 : tensor<32x1xi32, #blocked1>
    %23 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked1>
    %24 = tt.addptr %23, %22 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1>
    %25 = tt.broadcast %24 : (tensor<32x1x!tt.ptr<f32>, #blocked1>) -> tensor<32x32x!tt.ptr<f32>, #blocked1>
    %26 = tt.addptr %25, %18 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1>
    %27 = tt.splat %arg7 : (i32) -> tensor<32x1xi32, #blocked1>
    %28 = arith.muli %5, %27 : tensor<32x1xi32, #blocked1>
    %29 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked1>
    %30 = tt.addptr %29, %28 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1>
    %31 = tt.broadcast %30 : (tensor<32x1x!tt.ptr<f32>, #blocked1>) -> tensor<32x32x!tt.ptr<f32>, #blocked1>
    %32 = tt.addptr %31, %19 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1>
    %33 = tt.load %20 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked1>
    %34 = tt.load %26 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked1>
    %35 = triton_gpu.convert_layout %33 : (tensor<32x32xf32, #blocked1>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked}>>
    %36 = triton_gpu.convert_layout %34 : (tensor<32x32xf32, #blocked1>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked}>>
    %37 = tt.dot %35, %36, %cst {allowTF32 = false} : tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked}>> * tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked}>> -> tensor<32x32xf32, #blocked>
    %38 = triton_gpu.convert_layout %37 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #blocked1>
    %39 = triton_gpu.convert_layout %37 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #blocked1>
    %40 = "tt.reduce"(%37) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %56 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %57 = arith.select %56, %arg8, %arg9 : f32
      tt.reduce.return %57 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %41 = triton_gpu.convert_layout %40 : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %42 = "tt.reduce"(%37) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %56 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %57 = arith.select %56, %arg8, %arg9 : f32
      tt.reduce.return %57 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %43 = triton_gpu.convert_layout %42 : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %44 = tt.expand_dims %41 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xf32, #blocked1>
    %45 = tt.expand_dims %43 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xf32, #blocked1>
    %46 = tt.broadcast %45 : (tensor<32x1xf32, #blocked1>) -> tensor<32x32xf32, #blocked1>
    %47 = tt.broadcast %44 : (tensor<32x1xf32, #blocked1>) -> tensor<32x32xf32, #blocked1>
    %48 = arith.subf %38, %46 : tensor<32x32xf32, #blocked1>
    %49 = arith.subf %39, %47 : tensor<32x32xf32, #blocked1>
    %50 = math.exp %48 : tensor<32x32xf32, #blocked1>
    %51 = math.exp %49 : tensor<32x32xf32, #blocked1>
    %52 = "tt.reduce"(%50) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %56 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %56 : f32
    }) : (tensor<32x32xf32, #blocked1>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %53 = tt.expand_dims %52 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xf32, #blocked1>
    %54 = tt.broadcast %53 : (tensor<32x1xf32, #blocked1>) -> tensor<32x32xf32, #blocked1>
    %55 = arith.divf %51, %54 : tensor<32x32xf32, #blocked1>
    tt.store %32, %55 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32, #blocked1>
    tt.return
  }
}


// -----// IR Dump After TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [2, 2], threadsPerWarp = [4, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 2 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %6 = tt.splat %arg1 : (i32) -> tensor<32x1xi32, #blocked1>
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked1>
    %8 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked1>
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1>
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %13 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %14 = tt.expand_dims %11 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %15 = tt.expand_dims %12 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %16 = tt.broadcast %9 : (tensor<32x1x!tt.ptr<f32>, #blocked1>) -> tensor<32x32x!tt.ptr<f32>, #blocked1>
    %17 = tt.broadcast %13 : (tensor<1x32xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %18 = tt.broadcast %14 : (tensor<1x32xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %19 = tt.broadcast %15 : (tensor<1x32xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %20 = tt.addptr %16, %17 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1>
    %21 = tt.splat %arg3 : (i32) -> tensor<32x1xi32, #blocked1>
    %22 = arith.muli %4, %21 : tensor<32x1xi32, #blocked1>
    %23 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked1>
    %24 = tt.addptr %23, %22 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1>
    %25 = tt.broadcast %24 : (tensor<32x1x!tt.ptr<f32>, #blocked1>) -> tensor<32x32x!tt.ptr<f32>, #blocked1>
    %26 = tt.addptr %25, %18 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1>
    %27 = tt.splat %arg7 : (i32) -> tensor<32x1xi32, #blocked1>
    %28 = arith.muli %5, %27 : tensor<32x1xi32, #blocked1>
    %29 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked1>
    %30 = tt.addptr %29, %28 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1>
    %31 = tt.broadcast %30 : (tensor<32x1x!tt.ptr<f32>, #blocked1>) -> tensor<32x32x!tt.ptr<f32>, #blocked1>
    %32 = tt.addptr %31, %19 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1>
    %33 = tt.load %20 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked1>
    %34 = tt.load %26 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked1>
    %35 = triton_gpu.convert_layout %33 : (tensor<32x32xf32, #blocked1>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked}>>
    %36 = triton_gpu.convert_layout %34 : (tensor<32x32xf32, #blocked1>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked}>>
    %37 = triton_gpu.convert_layout %cst : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>
    %38 = triton_gpu.convert_layout %35 : (tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked}>>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>>
    %39 = triton_gpu.convert_layout %36 : (tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked}>>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>>
    %40 = tt.dot %38, %39, %37 {allowTF32 = false} : tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>> * tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>> -> tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>
    %41 = triton_gpu.convert_layout %40 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %42 = triton_gpu.convert_layout %41 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #blocked1>
    %43 = triton_gpu.convert_layout %41 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #blocked1>
    %44 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %60 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %61 = arith.select %60, %arg8, %arg9 : f32
      tt.reduce.return %61 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %45 = triton_gpu.convert_layout %44 : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %46 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %60 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %61 = arith.select %60, %arg8, %arg9 : f32
      tt.reduce.return %61 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %47 = triton_gpu.convert_layout %46 : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %48 = tt.expand_dims %45 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xf32, #blocked1>
    %49 = tt.expand_dims %47 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xf32, #blocked1>
    %50 = tt.broadcast %49 : (tensor<32x1xf32, #blocked1>) -> tensor<32x32xf32, #blocked1>
    %51 = tt.broadcast %48 : (tensor<32x1xf32, #blocked1>) -> tensor<32x32xf32, #blocked1>
    %52 = arith.subf %42, %50 : tensor<32x32xf32, #blocked1>
    %53 = arith.subf %43, %51 : tensor<32x32xf32, #blocked1>
    %54 = math.exp %52 : tensor<32x32xf32, #blocked1>
    %55 = math.exp %53 : tensor<32x32xf32, #blocked1>
    %56 = "tt.reduce"(%54) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %60 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %60 : f32
    }) : (tensor<32x32xf32, #blocked1>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %57 = tt.expand_dims %56 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xf32, #blocked1>
    %58 = tt.broadcast %57 : (tensor<32x1xf32, #blocked1>) -> tensor<32x32xf32, #blocked1>
    %59 = arith.divf %55, %58 : tensor<32x32xf32, #blocked1>
    tt.store %32, %59 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32, #blocked1>
    tt.return
  }
}


// -----// IR Dump After TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 2 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %6 = tt.splat %arg1 : (i32) -> tensor<32x1xi32, #blocked>
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %13 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %14 = tt.expand_dims %11 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %15 = tt.expand_dims %12 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %16 = tt.broadcast %9 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %17 = tt.broadcast %13 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %18 = tt.broadcast %14 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %19 = tt.broadcast %15 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %20 = tt.addptr %16, %17 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %21 = tt.splat %arg3 : (i32) -> tensor<32x1xi32, #blocked>
    %22 = arith.muli %4, %21 : tensor<32x1xi32, #blocked>
    %23 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %24 = tt.addptr %23, %22 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %25 = tt.broadcast %24 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %26 = tt.addptr %25, %18 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %27 = tt.splat %arg7 : (i32) -> tensor<32x1xi32, #blocked>
    %28 = arith.muli %5, %27 : tensor<32x1xi32, #blocked>
    %29 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %30 = tt.addptr %29, %28 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %31 = tt.broadcast %30 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %32 = tt.addptr %31, %19 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %33 = tt.load %20 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked>
    %34 = tt.load %26 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked>
    %35 = triton_gpu.convert_layout %33 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>>
    %36 = triton_gpu.convert_layout %34 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>>
    %37 = tt.dot %35, %36, %cst {allowTF32 = false} : tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>> * tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>> -> tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>
    %38 = triton_gpu.convert_layout %37 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %39 = triton_gpu.convert_layout %37 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %40 = triton_gpu.convert_layout %37 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %41 = triton_gpu.convert_layout %37 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %42 = "tt.reduce"(%38) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %56 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %57 = arith.select %56, %arg8, %arg9 : f32
      tt.reduce.return %57 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %43 = "tt.reduce"(%39) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %56 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %57 = arith.select %56, %arg8, %arg9 : f32
      tt.reduce.return %57 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %44 = tt.expand_dims %42 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xf32, #blocked>
    %45 = tt.expand_dims %43 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xf32, #blocked>
    %46 = tt.broadcast %45 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %47 = tt.broadcast %44 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %48 = arith.subf %40, %46 : tensor<32x32xf32, #blocked>
    %49 = arith.subf %41, %47 : tensor<32x32xf32, #blocked>
    %50 = math.exp %48 : tensor<32x32xf32, #blocked>
    %51 = math.exp %49 : tensor<32x32xf32, #blocked>
    %52 = "tt.reduce"(%50) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %56 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %56 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %53 = tt.expand_dims %52 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xf32, #blocked>
    %54 = tt.broadcast %53 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %55 = arith.divf %51, %54 : tensor<32x32xf32, #blocked>
    tt.store %32, %55 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32, #blocked>
    tt.return
  }
}


// -----// IR Dump After TritonGPUDecomposeConversions (tritongpu-decompose-conversions) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 2, order = [1, 0]}>
#shared1 = #triton_gpu.shared<{vec = 2, perPhase = 1, maxPhase = 2, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 2 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %6 = tt.splat %arg1 : (i32) -> tensor<32x1xi32, #blocked>
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %13 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %14 = tt.expand_dims %11 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %15 = tt.expand_dims %12 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %16 = tt.broadcast %9 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %17 = tt.broadcast %13 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %18 = tt.broadcast %14 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %19 = tt.broadcast %15 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %20 = tt.addptr %16, %17 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %21 = tt.splat %arg3 : (i32) -> tensor<32x1xi32, #blocked>
    %22 = arith.muli %4, %21 : tensor<32x1xi32, #blocked>
    %23 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %24 = tt.addptr %23, %22 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %25 = tt.broadcast %24 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %26 = tt.addptr %25, %18 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %27 = tt.splat %arg7 : (i32) -> tensor<32x1xi32, #blocked>
    %28 = arith.muli %5, %27 : tensor<32x1xi32, #blocked>
    %29 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %30 = tt.addptr %29, %28 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %31 = tt.broadcast %30 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %32 = tt.addptr %31, %19 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %33 = tt.load %20 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked>
    %34 = tt.load %26 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked>
    %35 = triton_gpu.convert_layout %33 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #shared>
    %36 = triton_gpu.convert_layout %35 : (tensor<32x32xf32, #shared>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>>
    %37 = triton_gpu.convert_layout %34 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #shared1>
    %38 = triton_gpu.convert_layout %37 : (tensor<32x32xf32, #shared1>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>>
    %39 = tt.dot %36, %38, %cst {allowTF32 = false} : tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>> * tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>> -> tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>
    %40 = triton_gpu.convert_layout %39 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %41 = triton_gpu.convert_layout %39 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %42 = triton_gpu.convert_layout %39 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %43 = triton_gpu.convert_layout %39 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %44 = "tt.reduce"(%40) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %58 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %59 = arith.select %58, %arg8, %arg9 : f32
      tt.reduce.return %59 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %45 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %58 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %59 = arith.select %58, %arg8, %arg9 : f32
      tt.reduce.return %59 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %46 = tt.expand_dims %44 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xf32, #blocked>
    %47 = tt.expand_dims %45 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xf32, #blocked>
    %48 = tt.broadcast %47 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %49 = tt.broadcast %46 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %50 = arith.subf %42, %48 : tensor<32x32xf32, #blocked>
    %51 = arith.subf %43, %49 : tensor<32x32xf32, #blocked>
    %52 = math.exp %50 : tensor<32x32xf32, #blocked>
    %53 = math.exp %51 : tensor<32x32xf32, #blocked>
    %54 = "tt.reduce"(%52) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %58 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %58 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %55 = tt.expand_dims %54 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xf32, #blocked>
    %56 = tt.broadcast %55 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %57 = arith.divf %53, %56 : tensor<32x32xf32, #blocked>
    tt.store %32, %57 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32, #blocked>
    tt.return
  }
}


// -----// IR Dump After TritonGPUReorderInstructions (tritongpu-reorder-instructions) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 2, order = [1, 0]}>
#shared1 = #triton_gpu.shared<{vec = 2, perPhase = 1, maxPhase = 2, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 2 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %6 = tt.splat %arg1 : (i32) -> tensor<32x1xi32, #blocked>
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %13 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %14 = tt.expand_dims %11 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %15 = tt.expand_dims %12 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %16 = tt.broadcast %9 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %17 = tt.broadcast %13 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %18 = tt.broadcast %14 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %19 = tt.broadcast %15 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %20 = tt.addptr %16, %17 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %21 = tt.splat %arg3 : (i32) -> tensor<32x1xi32, #blocked>
    %22 = arith.muli %4, %21 : tensor<32x1xi32, #blocked>
    %23 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %24 = tt.addptr %23, %22 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %25 = tt.broadcast %24 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %26 = tt.addptr %25, %18 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %27 = tt.splat %arg7 : (i32) -> tensor<32x1xi32, #blocked>
    %28 = arith.muli %5, %27 : tensor<32x1xi32, #blocked>
    %29 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %30 = tt.addptr %29, %28 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %31 = tt.broadcast %30 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %32 = tt.addptr %31, %19 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %33 = tt.load %20 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked>
    %34 = triton_gpu.convert_layout %33 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #shared>
    %35 = tt.load %26 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked>
    %36 = triton_gpu.convert_layout %35 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #shared1>
    %37 = triton_gpu.convert_layout %34 : (tensor<32x32xf32, #shared>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>>
    %38 = triton_gpu.convert_layout %36 : (tensor<32x32xf32, #shared1>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>>
    %39 = tt.dot %37, %38, %cst {allowTF32 = false} : tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>> * tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>> -> tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>
    %40 = triton_gpu.convert_layout %39 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %41 = triton_gpu.convert_layout %39 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %42 = triton_gpu.convert_layout %39 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %43 = triton_gpu.convert_layout %39 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %44 = "tt.reduce"(%40) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %58 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %59 = arith.select %58, %arg8, %arg9 : f32
      tt.reduce.return %59 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %45 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %58 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %59 = arith.select %58, %arg8, %arg9 : f32
      tt.reduce.return %59 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %46 = tt.expand_dims %44 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xf32, #blocked>
    %47 = tt.expand_dims %45 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xf32, #blocked>
    %48 = tt.broadcast %47 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %49 = tt.broadcast %46 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %50 = arith.subf %42, %48 : tensor<32x32xf32, #blocked>
    %51 = arith.subf %43, %49 : tensor<32x32xf32, #blocked>
    %52 = math.exp %50 : tensor<32x32xf32, #blocked>
    %53 = math.exp %51 : tensor<32x32xf32, #blocked>
    %54 = "tt.reduce"(%52) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %58 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %58 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %55 = tt.expand_dims %54 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xf32, #blocked>
    %56 = tt.broadcast %55 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %57 = arith.divf %53, %56 : tensor<32x32xf32, #blocked>
    tt.store %32, %57 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32, #blocked>
    tt.return
  }
}


// -----// IR Dump After CSE (cse) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 2, order = [1, 0]}>
#shared1 = #triton_gpu.shared<{vec = 2, perPhase = 1, maxPhase = 2, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 2 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %1 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %2 = tt.splat %arg1 : (i32) -> tensor<32x1xi32, #blocked>
    %3 = arith.muli %1, %2 : tensor<32x1xi32, #blocked>
    %4 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %6 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %7 = tt.expand_dims %6 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %8 = tt.broadcast %5 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %9 = tt.broadcast %7 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %10 = tt.addptr %8, %9 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %11 = tt.splat %arg3 : (i32) -> tensor<32x1xi32, #blocked>
    %12 = arith.muli %1, %11 : tensor<32x1xi32, #blocked>
    %13 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %14 = tt.addptr %13, %12 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %15 = tt.broadcast %14 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %16 = tt.addptr %15, %9 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %17 = tt.splat %arg7 : (i32) -> tensor<32x1xi32, #blocked>
    %18 = arith.muli %1, %17 : tensor<32x1xi32, #blocked>
    %19 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>
    %20 = tt.addptr %19, %18 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked>
    %21 = tt.broadcast %20 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>
    %22 = tt.addptr %21, %9 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>
    %23 = tt.load %10 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked>
    %24 = triton_gpu.convert_layout %23 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #shared>
    %25 = tt.load %16 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked>
    %26 = triton_gpu.convert_layout %25 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #shared1>
    %27 = triton_gpu.convert_layout %24 : (tensor<32x32xf32, #shared>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>>
    %28 = triton_gpu.convert_layout %26 : (tensor<32x32xf32, #shared1>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>>
    %29 = tt.dot %27, %28, %cst {allowTF32 = false} : tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>> * tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>}>> -> tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>
    %30 = triton_gpu.convert_layout %29 : (tensor<32x32xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 1], isTransposed = false}>>) -> tensor<32x32xf32, #blocked>
    %31 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %40 = "triton_gpu.cmpf"(%arg8, %arg9) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %41 = arith.select %40, %arg8, %arg9 : f32
      tt.reduce.return %41 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %32 = tt.expand_dims %31 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xf32, #blocked>
    %33 = tt.broadcast %32 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %34 = arith.subf %30, %33 : tensor<32x32xf32, #blocked>
    %35 = math.exp %34 : tensor<32x32xf32, #blocked>
    %36 = "tt.reduce"(%35) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %40 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %40 : f32
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %37 = tt.expand_dims %36 {axis = 1 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xf32, #blocked>
    %38 = tt.broadcast %37 : (tensor<32x1xf32, #blocked>) -> tensor<32x32xf32, #blocked>
    %39 = arith.divf %35, %38 : tensor<32x32xf32, #blocked>
    tt.store %22, %39 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32, #blocked>
    tt.return
  }
}


// -----// IR Dump After ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) //----- //
module attributes {triton_gpu.externs = {library_0 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/opencl.bc", library_1 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/ocml.bc", library_2 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/ockl.bc", library_3 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-warps" = 2 : i32, triton_gpu.shared = 8192 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @__ocml_exp2_f32(f32) -> f32
  llvm.func @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public"} {
    %0 = rocdl.workitem.id.x : i32
    %1 = llvm.trunc %0 : i32 to i32
    %2 = llvm.mlir.constant(64 : i32) : i32
    %3 = llvm.urem %1, %2  : i32
    %4 = llvm.udiv %1, %2  : i32
    %5 = llvm.mlir.constant(1 : i32) : i32
    %6 = llvm.urem %4, %5  : i32
    %7 = llvm.udiv %4, %5  : i32
    %8 = llvm.mlir.constant(8 : i32) : i32
    %9 = llvm.urem %3, %8  : i32
    %10 = llvm.udiv %3, %8  : i32
    %11 = llvm.mlir.constant(4 : i32) : i32
    %12 = llvm.urem %7, %11  : i32
    %13 = llvm.mlir.constant(32 : i32) : i32
    %14 = llvm.urem %10, %13  : i32
    %15 = llvm.mlir.constant(8 : i32) : i32
    %16 = llvm.mlir.constant(1 : i32) : i32
    %17 = llvm.mul %12, %15  : i32
    %18 = llvm.add %14, %17  : i32
    %19 = llvm.mul %16, %18  : i32
    %20 = llvm.mlir.constant(1 : i32) : i32
    %21 = llvm.urem %6, %20  : i32
    %22 = llvm.mlir.constant(1 : i32) : i32
    %23 = llvm.urem %9, %22  : i32
    %24 = llvm.mlir.constant(8 : i32) : i32
    %25 = llvm.mlir.constant(4 : i32) : i32
    %26 = llvm.mul %21, %24  : i32
    %27 = llvm.add %23, %26  : i32
    %28 = llvm.mul %25, %27  : i32
    %29 = llvm.mlir.constant(0 : i32) : i32
    %30 = llvm.add %19, %29  : i32
    %31 = llvm.mlir.constant(16 : i32) : i32
    %32 = llvm.add %19, %31  : i32
    %33 = rocdl.workitem.id.x : i32
    %34 = llvm.trunc %33 : i32 to i32
    %35 = llvm.mlir.constant(64 : i32) : i32
    %36 = llvm.urem %34, %35  : i32
    %37 = llvm.udiv %34, %35  : i32
    %38 = llvm.mlir.constant(1 : i32) : i32
    %39 = llvm.urem %37, %38  : i32
    %40 = llvm.udiv %37, %38  : i32
    %41 = llvm.mlir.constant(8 : i32) : i32
    %42 = llvm.urem %36, %41  : i32
    %43 = llvm.udiv %36, %41  : i32
    %44 = llvm.mlir.constant(1 : i32) : i32
    %45 = llvm.urem %40, %44  : i32
    %46 = llvm.mlir.constant(1 : i32) : i32
    %47 = llvm.urem %43, %46  : i32
    %48 = llvm.mlir.constant(8 : i32) : i32
    %49 = llvm.mlir.constant(1 : i32) : i32
    %50 = llvm.mul %45, %48  : i32
    %51 = llvm.add %47, %50  : i32
    %52 = llvm.mul %49, %51  : i32
    %53 = llvm.mlir.constant(1 : i32) : i32
    %54 = llvm.urem %39, %53  : i32
    %55 = llvm.mlir.constant(8 : i32) : i32
    %56 = llvm.urem %42, %55  : i32
    %57 = llvm.mlir.constant(8 : i32) : i32
    %58 = llvm.mlir.constant(4 : i32) : i32
    %59 = llvm.mul %54, %57  : i32
    %60 = llvm.add %56, %59  : i32
    %61 = llvm.mul %58, %60  : i32
    %62 = llvm.mlir.constant(0 : i32) : i32
    %63 = llvm.add %61, %62  : i32
    %64 = llvm.mlir.constant(1 : i32) : i32
    %65 = llvm.add %61, %64  : i32
    %66 = llvm.mlir.constant(2 : i32) : i32
    %67 = llvm.add %61, %66  : i32
    %68 = llvm.mlir.constant(3 : i32) : i32
    %69 = llvm.add %61, %68  : i32
    %70 = rocdl.workitem.id.x : i32
    %71 = llvm.trunc %70 : i32 to i32
    %72 = llvm.mlir.constant(64 : i32) : i32
    %73 = llvm.urem %71, %72  : i32
    %74 = llvm.udiv %71, %72  : i32
    %75 = llvm.mlir.constant(1 : i32) : i32
    %76 = llvm.urem %74, %75  : i32
    %77 = llvm.udiv %74, %75  : i32
    %78 = llvm.mlir.constant(8 : i32) : i32
    %79 = llvm.urem %73, %78  : i32
    %80 = llvm.udiv %73, %78  : i32
    %81 = llvm.mlir.constant(4 : i32) : i32
    %82 = llvm.urem %77, %81  : i32
    %83 = llvm.mlir.constant(32 : i32) : i32
    %84 = llvm.urem %80, %83  : i32
    %85 = llvm.mlir.constant(8 : i32) : i32
    %86 = llvm.mlir.constant(1 : i32) : i32
    %87 = llvm.mul %82, %85  : i32
    %88 = llvm.add %84, %87  : i32
    %89 = llvm.mul %86, %88  : i32
    %90 = llvm.mlir.constant(1 : i32) : i32
    %91 = llvm.urem %76, %90  : i32
    %92 = llvm.mlir.constant(8 : i32) : i32
    %93 = llvm.urem %79, %92  : i32
    %94 = llvm.mlir.constant(8 : i32) : i32
    %95 = llvm.mlir.constant(4 : i32) : i32
    %96 = llvm.mul %91, %94  : i32
    %97 = llvm.add %93, %96  : i32
    %98 = llvm.mul %95, %97  : i32
    %99 = llvm.mlir.constant(0 : i32) : i32
    %100 = llvm.add %89, %99  : i32
    %101 = llvm.mlir.constant(0 : i32) : i32
    %102 = llvm.add %98, %101  : i32
    %103 = llvm.mlir.constant(0 : i32) : i32
    %104 = llvm.add %89, %103  : i32
    %105 = llvm.mlir.constant(1 : i32) : i32
    %106 = llvm.add %98, %105  : i32
    %107 = llvm.mlir.constant(0 : i32) : i32
    %108 = llvm.add %89, %107  : i32
    %109 = llvm.mlir.constant(2 : i32) : i32
    %110 = llvm.add %98, %109  : i32
    %111 = llvm.mlir.constant(0 : i32) : i32
    %112 = llvm.add %89, %111  : i32
    %113 = llvm.mlir.constant(3 : i32) : i32
    %114 = llvm.add %98, %113  : i32
    %115 = llvm.mlir.constant(16 : i32) : i32
    %116 = llvm.add %89, %115  : i32
    %117 = llvm.mlir.constant(0 : i32) : i32
    %118 = llvm.add %98, %117  : i32
    %119 = llvm.mlir.constant(16 : i32) : i32
    %120 = llvm.add %89, %119  : i32
    %121 = llvm.mlir.constant(1 : i32) : i32
    %122 = llvm.add %98, %121  : i32
    %123 = llvm.mlir.constant(16 : i32) : i32
    %124 = llvm.add %89, %123  : i32
    %125 = llvm.mlir.constant(2 : i32) : i32
    %126 = llvm.add %98, %125  : i32
    %127 = llvm.mlir.constant(16 : i32) : i32
    %128 = llvm.add %89, %127  : i32
    %129 = llvm.mlir.constant(3 : i32) : i32
    %130 = llvm.add %98, %129  : i32
    %131 = llvm.mlir.constant(2 : i32) : i32
    %132 = llvm.mlir.constant(1 : i32) : i32
    %133 = rocdl.workitem.id.x : i32
    %134 = llvm.trunc %133 : i32 to i32
    %135 = llvm.mlir.constant(64 : i32) : i32
    %136 = llvm.urem %134, %135  : i32
    %137 = llvm.udiv %134, %135  : i32
    %138 = llvm.mlir.constant(1 : i32) : i32
    %139 = llvm.urem %137, %131  : i32
    %140 = llvm.urem %139, %138  : i32
    %141 = llvm.mlir.constant(1 : i32) : i32
    %142 = llvm.udiv %137, %131  : i32
    %143 = llvm.urem %142, %132  : i32
    %144 = llvm.urem %143, %141  : i32
    %145 = llvm.mlir.constant(32 : i32) : i32
    %146 = llvm.mul %140, %145  : i32
    %147 = llvm.mlir.constant(32 : i32) : i32
    %148 = llvm.mul %144, %147  : i32
    %149 = llvm.mlir.constant(32 : i32) : i32
    %150 = llvm.udiv %136, %149  : i32
    %151 = llvm.mlir.constant(4 : i32) : i32
    %152 = llvm.mul %151, %150  : i32
    %153 = llvm.add %152, %146  : i32
    %154 = llvm.mlir.constant(32 : i32) : i32
    %155 = llvm.urem %136, %154  : i32
    %156 = llvm.add %155, %148  : i32
    %157 = rocdl.workitem.id.x : i32
    %158 = llvm.trunc %157 : i32 to i32
    %159 = llvm.mlir.constant(64 : i32) : i32
    %160 = llvm.urem %158, %159  : i32
    %161 = llvm.udiv %158, %159  : i32
    %162 = llvm.mlir.constant(1 : i32) : i32
    %163 = llvm.urem %161, %162  : i32
    %164 = llvm.udiv %161, %162  : i32
    %165 = llvm.mlir.constant(8 : i32) : i32
    %166 = llvm.urem %160, %165  : i32
    %167 = llvm.udiv %160, %165  : i32
    %168 = llvm.mlir.constant(4 : i32) : i32
    %169 = llvm.urem %164, %168  : i32
    %170 = llvm.mlir.constant(32 : i32) : i32
    %171 = llvm.urem %167, %170  : i32
    %172 = llvm.mlir.constant(8 : i32) : i32
    %173 = llvm.mlir.constant(1 : i32) : i32
    %174 = llvm.mul %169, %172  : i32
    %175 = llvm.add %171, %174  : i32
    %176 = llvm.mul %173, %175  : i32
    %177 = llvm.mlir.constant(1 : i32) : i32
    %178 = llvm.urem %163, %177  : i32
    %179 = llvm.mlir.constant(1 : i32) : i32
    %180 = llvm.urem %166, %179  : i32
    %181 = llvm.mlir.constant(8 : i32) : i32
    %182 = llvm.mlir.constant(4 : i32) : i32
    %183 = llvm.mul %178, %181  : i32
    %184 = llvm.add %180, %183  : i32
    %185 = llvm.mul %182, %184  : i32
    %186 = llvm.mlir.constant(0 : i32) : i32
    %187 = llvm.add %176, %186  : i32
    %188 = llvm.mlir.constant(16 : i32) : i32
    %189 = llvm.add %176, %188  : i32
    %190 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3>
    %191 = llvm.bitcast %190 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3>
    %192 = builtin.unrealized_conversion_cast %arg6 : !llvm.ptr<f32, 1> to !tt.ptr<f32>
    %193 = builtin.unrealized_conversion_cast %arg2 : !llvm.ptr<f32, 1> to !tt.ptr<f32>
    %194 = builtin.unrealized_conversion_cast %arg0 : !llvm.ptr<f32, 1> to !tt.ptr<f32>
    %195 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    %196 = llvm.bitcast %195 : f32 to f32
    %197 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>
    %198 = llvm.insertvalue %196, %197[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %199 = llvm.insertvalue %196, %198[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %200 = llvm.insertvalue %196, %199[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %201 = llvm.insertvalue %196, %200[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %202 = llvm.insertvalue %196, %201[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %203 = llvm.insertvalue %196, %202[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %204 = llvm.insertvalue %196, %203[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %205 = llvm.insertvalue %196, %204[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %206 = llvm.insertvalue %196, %205[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %207 = llvm.insertvalue %196, %206[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %208 = llvm.insertvalue %196, %207[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %209 = llvm.insertvalue %196, %208[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %210 = llvm.insertvalue %196, %209[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %211 = llvm.insertvalue %196, %210[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %212 = llvm.insertvalue %196, %211[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %213 = llvm.insertvalue %196, %212[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %214 = llvm.mlir.constant(0 : index) : i32
    %215 = llvm.add %30, %214  : i32
    %216 = llvm.add %32, %214  : i32
    %217 = llvm.mlir.undef : !llvm.struct<(i32, i32)>
    %218 = llvm.insertvalue %215, %217[0] : !llvm.struct<(i32, i32)> 
    %219 = llvm.insertvalue %216, %218[1] : !llvm.struct<(i32, i32)> 
    %220 = llvm.extractvalue %219[0] : !llvm.struct<(i32, i32)> 
    %221 = llvm.extractvalue %219[1] : !llvm.struct<(i32, i32)> 
    %222 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %223 = llvm.insertvalue %220, %222[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %224 = llvm.insertvalue %220, %223[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %225 = llvm.insertvalue %220, %224[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %226 = llvm.insertvalue %220, %225[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %227 = llvm.insertvalue %221, %226[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %228 = llvm.insertvalue %221, %227[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %229 = llvm.insertvalue %221, %228[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %230 = llvm.insertvalue %221, %229[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %231 = llvm.bitcast %arg1 : i32 to i32
    %232 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %233 = llvm.insertvalue %231, %232[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %234 = llvm.insertvalue %231, %233[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %235 = llvm.insertvalue %231, %234[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %236 = llvm.insertvalue %231, %235[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %237 = llvm.insertvalue %231, %236[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %238 = llvm.insertvalue %231, %237[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %239 = llvm.insertvalue %231, %238[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %240 = llvm.insertvalue %231, %239[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %241 = llvm.extractvalue %230[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %242 = llvm.extractvalue %230[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %243 = llvm.extractvalue %230[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %244 = llvm.extractvalue %230[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %245 = llvm.extractvalue %230[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %246 = llvm.extractvalue %230[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %247 = llvm.extractvalue %230[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %248 = llvm.extractvalue %230[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %249 = llvm.extractvalue %240[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %250 = llvm.extractvalue %240[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %251 = llvm.extractvalue %240[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %252 = llvm.extractvalue %240[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %253 = llvm.extractvalue %240[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %254 = llvm.extractvalue %240[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %255 = llvm.extractvalue %240[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %256 = llvm.extractvalue %240[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %257 = llvm.mul %241, %249  : i32
    %258 = llvm.mul %242, %250  : i32
    %259 = llvm.mul %243, %251  : i32
    %260 = llvm.mul %244, %252  : i32
    %261 = llvm.mul %245, %253  : i32
    %262 = llvm.mul %246, %254  : i32
    %263 = llvm.mul %247, %255  : i32
    %264 = llvm.mul %248, %256  : i32
    %265 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %266 = llvm.insertvalue %257, %265[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %267 = llvm.insertvalue %258, %266[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %268 = llvm.insertvalue %259, %267[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %269 = llvm.insertvalue %260, %268[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %270 = llvm.insertvalue %261, %269[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %271 = llvm.insertvalue %262, %270[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %272 = llvm.insertvalue %263, %271[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %273 = llvm.insertvalue %264, %272[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %274 = llvm.bitcast %arg0 : !llvm.ptr<f32, 1> to !llvm.ptr<f32, 1>
    %275 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %276 = llvm.insertvalue %274, %275[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %277 = llvm.insertvalue %274, %276[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %278 = llvm.insertvalue %274, %277[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %279 = llvm.insertvalue %274, %278[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %280 = llvm.insertvalue %274, %279[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %281 = llvm.insertvalue %274, %280[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %282 = llvm.insertvalue %274, %281[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %283 = llvm.insertvalue %274, %282[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %284 = llvm.extractvalue %283[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %285 = llvm.extractvalue %283[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %286 = llvm.extractvalue %283[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %287 = llvm.extractvalue %283[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %288 = llvm.extractvalue %283[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %289 = llvm.extractvalue %283[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %290 = llvm.extractvalue %283[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %291 = llvm.extractvalue %283[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %292 = llvm.extractvalue %273[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %293 = llvm.extractvalue %273[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %294 = llvm.extractvalue %273[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %295 = llvm.extractvalue %273[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %296 = llvm.extractvalue %273[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %297 = llvm.extractvalue %273[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %298 = llvm.extractvalue %273[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %299 = llvm.extractvalue %273[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %300 = llvm.getelementptr %284[%292] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %301 = llvm.getelementptr %285[%293] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %302 = llvm.getelementptr %286[%294] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %303 = llvm.getelementptr %287[%295] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %304 = llvm.getelementptr %288[%296] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %305 = llvm.getelementptr %289[%297] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %306 = llvm.getelementptr %290[%298] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %307 = llvm.getelementptr %291[%299] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %308 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %309 = llvm.insertvalue %300, %308[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %310 = llvm.insertvalue %301, %309[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %311 = llvm.insertvalue %302, %310[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %312 = llvm.insertvalue %303, %311[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %313 = llvm.insertvalue %304, %312[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %314 = llvm.insertvalue %305, %313[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %315 = llvm.insertvalue %306, %314[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %316 = llvm.insertvalue %307, %315[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %317 = llvm.mlir.constant(0 : index) : i32
    %318 = llvm.add %63, %317  : i32
    %319 = llvm.add %65, %317  : i32
    %320 = llvm.add %67, %317  : i32
    %321 = llvm.add %69, %317  : i32
    %322 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)>
    %323 = llvm.insertvalue %318, %322[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %324 = llvm.insertvalue %319, %323[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %325 = llvm.insertvalue %320, %324[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %326 = llvm.insertvalue %321, %325[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %327 = llvm.extractvalue %326[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %328 = llvm.extractvalue %326[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %329 = llvm.extractvalue %326[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %330 = llvm.extractvalue %326[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %331 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)>
    %332 = llvm.insertvalue %327, %331[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %333 = llvm.insertvalue %328, %332[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %334 = llvm.insertvalue %329, %333[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %335 = llvm.insertvalue %330, %334[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %336 = llvm.extractvalue %316[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %337 = llvm.extractvalue %316[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %338 = llvm.extractvalue %316[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %339 = llvm.extractvalue %316[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %340 = llvm.extractvalue %316[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %341 = llvm.extractvalue %316[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %342 = llvm.extractvalue %316[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %343 = llvm.extractvalue %316[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %344 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %345 = llvm.insertvalue %336, %344[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %346 = llvm.insertvalue %336, %345[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %347 = llvm.insertvalue %336, %346[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %348 = llvm.insertvalue %336, %347[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %349 = llvm.insertvalue %340, %348[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %350 = llvm.insertvalue %340, %349[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %351 = llvm.insertvalue %340, %350[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %352 = llvm.insertvalue %340, %351[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %353 = llvm.extractvalue %335[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %354 = llvm.extractvalue %335[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %355 = llvm.extractvalue %335[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %356 = llvm.extractvalue %335[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %357 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %358 = llvm.insertvalue %353, %357[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %359 = llvm.insertvalue %354, %358[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %360 = llvm.insertvalue %355, %359[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %361 = llvm.insertvalue %356, %360[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %362 = llvm.insertvalue %353, %361[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %363 = llvm.insertvalue %354, %362[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %364 = llvm.insertvalue %355, %363[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %365 = llvm.insertvalue %356, %364[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %366 = llvm.extractvalue %352[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %367 = llvm.extractvalue %352[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %368 = llvm.extractvalue %352[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %369 = llvm.extractvalue %352[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %370 = llvm.extractvalue %352[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %371 = llvm.extractvalue %352[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %372 = llvm.extractvalue %352[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %373 = llvm.extractvalue %352[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %374 = llvm.extractvalue %365[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %375 = llvm.extractvalue %365[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %376 = llvm.extractvalue %365[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %377 = llvm.extractvalue %365[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %378 = llvm.extractvalue %365[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %379 = llvm.extractvalue %365[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %380 = llvm.extractvalue %365[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %381 = llvm.extractvalue %365[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %382 = llvm.getelementptr %366[%374] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %383 = llvm.getelementptr %367[%375] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %384 = llvm.getelementptr %368[%376] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %385 = llvm.getelementptr %369[%377] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %386 = llvm.getelementptr %370[%378] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %387 = llvm.getelementptr %371[%379] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %388 = llvm.getelementptr %372[%380] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %389 = llvm.getelementptr %373[%381] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %390 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %391 = llvm.insertvalue %382, %390[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %392 = llvm.insertvalue %383, %391[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %393 = llvm.insertvalue %384, %392[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %394 = llvm.insertvalue %385, %393[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %395 = llvm.insertvalue %386, %394[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %396 = llvm.insertvalue %387, %395[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %397 = llvm.insertvalue %388, %396[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %398 = llvm.insertvalue %389, %397[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %399 = llvm.bitcast %arg3 : i32 to i32
    %400 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %401 = llvm.insertvalue %399, %400[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %402 = llvm.insertvalue %399, %401[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %403 = llvm.insertvalue %399, %402[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %404 = llvm.insertvalue %399, %403[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %405 = llvm.insertvalue %399, %404[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %406 = llvm.insertvalue %399, %405[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %407 = llvm.insertvalue %399, %406[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %408 = llvm.insertvalue %399, %407[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %409 = llvm.extractvalue %230[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %410 = llvm.extractvalue %230[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %411 = llvm.extractvalue %230[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %412 = llvm.extractvalue %230[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %413 = llvm.extractvalue %230[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %414 = llvm.extractvalue %230[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %415 = llvm.extractvalue %230[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %416 = llvm.extractvalue %230[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %417 = llvm.extractvalue %408[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %418 = llvm.extractvalue %408[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %419 = llvm.extractvalue %408[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %420 = llvm.extractvalue %408[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %421 = llvm.extractvalue %408[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %422 = llvm.extractvalue %408[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %423 = llvm.extractvalue %408[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %424 = llvm.extractvalue %408[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %425 = llvm.mul %409, %417  : i32
    %426 = llvm.mul %410, %418  : i32
    %427 = llvm.mul %411, %419  : i32
    %428 = llvm.mul %412, %420  : i32
    %429 = llvm.mul %413, %421  : i32
    %430 = llvm.mul %414, %422  : i32
    %431 = llvm.mul %415, %423  : i32
    %432 = llvm.mul %416, %424  : i32
    %433 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %434 = llvm.insertvalue %425, %433[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %435 = llvm.insertvalue %426, %434[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %436 = llvm.insertvalue %427, %435[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %437 = llvm.insertvalue %428, %436[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %438 = llvm.insertvalue %429, %437[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %439 = llvm.insertvalue %430, %438[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %440 = llvm.insertvalue %431, %439[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %441 = llvm.insertvalue %432, %440[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %442 = llvm.bitcast %arg2 : !llvm.ptr<f32, 1> to !llvm.ptr<f32, 1>
    %443 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %444 = llvm.insertvalue %442, %443[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %445 = llvm.insertvalue %442, %444[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %446 = llvm.insertvalue %442, %445[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %447 = llvm.insertvalue %442, %446[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %448 = llvm.insertvalue %442, %447[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %449 = llvm.insertvalue %442, %448[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %450 = llvm.insertvalue %442, %449[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %451 = llvm.insertvalue %442, %450[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %452 = llvm.extractvalue %451[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %453 = llvm.extractvalue %451[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %454 = llvm.extractvalue %451[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %455 = llvm.extractvalue %451[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %456 = llvm.extractvalue %451[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %457 = llvm.extractvalue %451[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %458 = llvm.extractvalue %451[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %459 = llvm.extractvalue %451[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %460 = llvm.extractvalue %441[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %461 = llvm.extractvalue %441[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %462 = llvm.extractvalue %441[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %463 = llvm.extractvalue %441[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %464 = llvm.extractvalue %441[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %465 = llvm.extractvalue %441[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %466 = llvm.extractvalue %441[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %467 = llvm.extractvalue %441[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %468 = llvm.getelementptr %452[%460] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %469 = llvm.getelementptr %453[%461] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %470 = llvm.getelementptr %454[%462] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %471 = llvm.getelementptr %455[%463] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %472 = llvm.getelementptr %456[%464] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %473 = llvm.getelementptr %457[%465] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %474 = llvm.getelementptr %458[%466] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %475 = llvm.getelementptr %459[%467] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %476 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %477 = llvm.insertvalue %468, %476[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %478 = llvm.insertvalue %469, %477[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %479 = llvm.insertvalue %470, %478[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %480 = llvm.insertvalue %471, %479[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %481 = llvm.insertvalue %472, %480[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %482 = llvm.insertvalue %473, %481[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %483 = llvm.insertvalue %474, %482[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %484 = llvm.insertvalue %475, %483[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %485 = llvm.extractvalue %484[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %486 = llvm.extractvalue %484[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %487 = llvm.extractvalue %484[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %488 = llvm.extractvalue %484[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %489 = llvm.extractvalue %484[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %490 = llvm.extractvalue %484[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %491 = llvm.extractvalue %484[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %492 = llvm.extractvalue %484[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %493 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %494 = llvm.insertvalue %485, %493[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %495 = llvm.insertvalue %485, %494[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %496 = llvm.insertvalue %485, %495[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %497 = llvm.insertvalue %485, %496[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %498 = llvm.insertvalue %489, %497[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %499 = llvm.insertvalue %489, %498[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %500 = llvm.insertvalue %489, %499[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %501 = llvm.insertvalue %489, %500[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %502 = llvm.extractvalue %501[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %503 = llvm.extractvalue %501[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %504 = llvm.extractvalue %501[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %505 = llvm.extractvalue %501[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %506 = llvm.extractvalue %501[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %507 = llvm.extractvalue %501[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %508 = llvm.extractvalue %501[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %509 = llvm.extractvalue %501[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %510 = llvm.extractvalue %365[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %511 = llvm.extractvalue %365[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %512 = llvm.extractvalue %365[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %513 = llvm.extractvalue %365[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %514 = llvm.extractvalue %365[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %515 = llvm.extractvalue %365[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %516 = llvm.extractvalue %365[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %517 = llvm.extractvalue %365[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %518 = llvm.getelementptr %502[%510] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %519 = llvm.getelementptr %503[%511] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %520 = llvm.getelementptr %504[%512] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %521 = llvm.getelementptr %505[%513] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %522 = llvm.getelementptr %506[%514] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %523 = llvm.getelementptr %507[%515] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %524 = llvm.getelementptr %508[%516] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %525 = llvm.getelementptr %509[%517] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %526 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %527 = llvm.insertvalue %518, %526[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %528 = llvm.insertvalue %519, %527[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %529 = llvm.insertvalue %520, %528[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %530 = llvm.insertvalue %521, %529[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %531 = llvm.insertvalue %522, %530[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %532 = llvm.insertvalue %523, %531[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %533 = llvm.insertvalue %524, %532[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %534 = llvm.insertvalue %525, %533[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %535 = llvm.bitcast %arg7 : i32 to i32
    %536 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %537 = llvm.insertvalue %535, %536[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %538 = llvm.insertvalue %535, %537[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %539 = llvm.insertvalue %535, %538[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %540 = llvm.insertvalue %535, %539[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %541 = llvm.insertvalue %535, %540[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %542 = llvm.insertvalue %535, %541[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %543 = llvm.insertvalue %535, %542[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %544 = llvm.insertvalue %535, %543[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %545 = llvm.extractvalue %230[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %546 = llvm.extractvalue %230[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %547 = llvm.extractvalue %230[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %548 = llvm.extractvalue %230[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %549 = llvm.extractvalue %230[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %550 = llvm.extractvalue %230[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %551 = llvm.extractvalue %230[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %552 = llvm.extractvalue %230[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %553 = llvm.extractvalue %544[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %554 = llvm.extractvalue %544[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %555 = llvm.extractvalue %544[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %556 = llvm.extractvalue %544[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %557 = llvm.extractvalue %544[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %558 = llvm.extractvalue %544[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %559 = llvm.extractvalue %544[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %560 = llvm.extractvalue %544[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %561 = llvm.mul %545, %553  : i32
    %562 = llvm.mul %546, %554  : i32
    %563 = llvm.mul %547, %555  : i32
    %564 = llvm.mul %548, %556  : i32
    %565 = llvm.mul %549, %557  : i32
    %566 = llvm.mul %550, %558  : i32
    %567 = llvm.mul %551, %559  : i32
    %568 = llvm.mul %552, %560  : i32
    %569 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %570 = llvm.insertvalue %561, %569[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %571 = llvm.insertvalue %562, %570[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %572 = llvm.insertvalue %563, %571[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %573 = llvm.insertvalue %564, %572[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %574 = llvm.insertvalue %565, %573[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %575 = llvm.insertvalue %566, %574[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %576 = llvm.insertvalue %567, %575[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %577 = llvm.insertvalue %568, %576[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %578 = llvm.bitcast %arg6 : !llvm.ptr<f32, 1> to !llvm.ptr<f32, 1>
    %579 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %580 = llvm.insertvalue %578, %579[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %581 = llvm.insertvalue %578, %580[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %582 = llvm.insertvalue %578, %581[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %583 = llvm.insertvalue %578, %582[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %584 = llvm.insertvalue %578, %583[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %585 = llvm.insertvalue %578, %584[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %586 = llvm.insertvalue %578, %585[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %587 = llvm.insertvalue %578, %586[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %588 = llvm.extractvalue %587[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %589 = llvm.extractvalue %587[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %590 = llvm.extractvalue %587[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %591 = llvm.extractvalue %587[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %592 = llvm.extractvalue %587[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %593 = llvm.extractvalue %587[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %594 = llvm.extractvalue %587[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %595 = llvm.extractvalue %587[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %596 = llvm.extractvalue %577[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %597 = llvm.extractvalue %577[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %598 = llvm.extractvalue %577[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %599 = llvm.extractvalue %577[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %600 = llvm.extractvalue %577[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %601 = llvm.extractvalue %577[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %602 = llvm.extractvalue %577[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %603 = llvm.extractvalue %577[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %604 = llvm.getelementptr %588[%596] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %605 = llvm.getelementptr %589[%597] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %606 = llvm.getelementptr %590[%598] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %607 = llvm.getelementptr %591[%599] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %608 = llvm.getelementptr %592[%600] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %609 = llvm.getelementptr %593[%601] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %610 = llvm.getelementptr %594[%602] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %611 = llvm.getelementptr %595[%603] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %612 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %613 = llvm.insertvalue %604, %612[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %614 = llvm.insertvalue %605, %613[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %615 = llvm.insertvalue %606, %614[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %616 = llvm.insertvalue %607, %615[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %617 = llvm.insertvalue %608, %616[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %618 = llvm.insertvalue %609, %617[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %619 = llvm.insertvalue %610, %618[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %620 = llvm.insertvalue %611, %619[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %621 = llvm.extractvalue %620[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %622 = llvm.extractvalue %620[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %623 = llvm.extractvalue %620[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %624 = llvm.extractvalue %620[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %625 = llvm.extractvalue %620[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %626 = llvm.extractvalue %620[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %627 = llvm.extractvalue %620[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %628 = llvm.extractvalue %620[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %629 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %630 = llvm.insertvalue %621, %629[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %631 = llvm.insertvalue %621, %630[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %632 = llvm.insertvalue %621, %631[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %633 = llvm.insertvalue %621, %632[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %634 = llvm.insertvalue %625, %633[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %635 = llvm.insertvalue %625, %634[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %636 = llvm.insertvalue %625, %635[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %637 = llvm.insertvalue %625, %636[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %638 = llvm.extractvalue %637[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %639 = llvm.extractvalue %637[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %640 = llvm.extractvalue %637[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %641 = llvm.extractvalue %637[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %642 = llvm.extractvalue %637[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %643 = llvm.extractvalue %637[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %644 = llvm.extractvalue %637[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %645 = llvm.extractvalue %637[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %646 = llvm.extractvalue %365[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %647 = llvm.extractvalue %365[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %648 = llvm.extractvalue %365[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %649 = llvm.extractvalue %365[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %650 = llvm.extractvalue %365[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %651 = llvm.extractvalue %365[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %652 = llvm.extractvalue %365[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %653 = llvm.extractvalue %365[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %654 = llvm.getelementptr %638[%646] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %655 = llvm.getelementptr %639[%647] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %656 = llvm.getelementptr %640[%648] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %657 = llvm.getelementptr %641[%649] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %658 = llvm.getelementptr %642[%650] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %659 = llvm.getelementptr %643[%651] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %660 = llvm.getelementptr %644[%652] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %661 = llvm.getelementptr %645[%653] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %662 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %663 = llvm.insertvalue %654, %662[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %664 = llvm.insertvalue %655, %663[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %665 = llvm.insertvalue %656, %664[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %666 = llvm.insertvalue %657, %665[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %667 = llvm.insertvalue %658, %666[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %668 = llvm.insertvalue %659, %667[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %669 = llvm.insertvalue %660, %668[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %670 = llvm.insertvalue %661, %669[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %671 = llvm.extractvalue %398[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %672 = llvm.extractvalue %398[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %673 = llvm.extractvalue %398[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %674 = llvm.extractvalue %398[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %675 = llvm.extractvalue %398[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %676 = llvm.extractvalue %398[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %677 = llvm.extractvalue %398[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %678 = llvm.extractvalue %398[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %679 = llvm.mlir.constant(true) : i1
    %680 = llvm.addrspacecast %671 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %681 = scf.if %679 -> (i32) {
      %2992 = llvm.load %680 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %682 = llvm.bitcast %681 : i32 to vector<1xf32>
    %683 = llvm.mlir.constant(0 : index) : i32
    %684 = llvm.extractelement %682[%683 : i32] : vector<1xf32>
    %685 = llvm.addrspacecast %672 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %686 = scf.if %679 -> (i32) {
      %2992 = llvm.load %685 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %687 = llvm.bitcast %686 : i32 to vector<1xf32>
    %688 = llvm.mlir.constant(0 : index) : i32
    %689 = llvm.extractelement %687[%688 : i32] : vector<1xf32>
    %690 = llvm.addrspacecast %673 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %691 = scf.if %679 -> (i32) {
      %2992 = llvm.load %690 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %692 = llvm.bitcast %691 : i32 to vector<1xf32>
    %693 = llvm.mlir.constant(0 : index) : i32
    %694 = llvm.extractelement %692[%693 : i32] : vector<1xf32>
    %695 = llvm.addrspacecast %674 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %696 = scf.if %679 -> (i32) {
      %2992 = llvm.load %695 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %697 = llvm.bitcast %696 : i32 to vector<1xf32>
    %698 = llvm.mlir.constant(0 : index) : i32
    %699 = llvm.extractelement %697[%698 : i32] : vector<1xf32>
    %700 = llvm.mlir.constant(true) : i1
    %701 = llvm.addrspacecast %675 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %702 = scf.if %700 -> (i32) {
      %2992 = llvm.load %701 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %703 = llvm.bitcast %702 : i32 to vector<1xf32>
    %704 = llvm.mlir.constant(0 : index) : i32
    %705 = llvm.extractelement %703[%704 : i32] : vector<1xf32>
    %706 = llvm.addrspacecast %676 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %707 = scf.if %700 -> (i32) {
      %2992 = llvm.load %706 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %708 = llvm.bitcast %707 : i32 to vector<1xf32>
    %709 = llvm.mlir.constant(0 : index) : i32
    %710 = llvm.extractelement %708[%709 : i32] : vector<1xf32>
    %711 = llvm.addrspacecast %677 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %712 = scf.if %700 -> (i32) {
      %2992 = llvm.load %711 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %713 = llvm.bitcast %712 : i32 to vector<1xf32>
    %714 = llvm.mlir.constant(0 : index) : i32
    %715 = llvm.extractelement %713[%714 : i32] : vector<1xf32>
    %716 = llvm.addrspacecast %678 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %717 = scf.if %700 -> (i32) {
      %2992 = llvm.load %716 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %718 = llvm.bitcast %717 : i32 to vector<1xf32>
    %719 = llvm.mlir.constant(0 : index) : i32
    %720 = llvm.extractelement %718[%719 : i32] : vector<1xf32>
    %721 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %722 = llvm.insertvalue %684, %721[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %723 = llvm.insertvalue %689, %722[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %724 = llvm.insertvalue %694, %723[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %725 = llvm.insertvalue %699, %724[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %726 = llvm.insertvalue %705, %725[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %727 = llvm.insertvalue %710, %726[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %728 = llvm.insertvalue %715, %727[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %729 = llvm.insertvalue %720, %728[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %730 = llvm.mlir.constant(0 : i32) : i32
    %731 = llvm.getelementptr %191[%730] : (!llvm.ptr<i8, 3>, i32) -> !llvm.ptr<i8, 3>
    %732 = llvm.bitcast %731 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %733 = llvm.mlir.constant(1 : i32) : i32
    %734 = llvm.mlir.constant(32 : i32) : i32
    %735 = llvm.extractvalue %729[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %736 = llvm.extractvalue %729[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %737 = llvm.extractvalue %729[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %738 = llvm.extractvalue %729[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %739 = llvm.extractvalue %729[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %740 = llvm.extractvalue %729[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %741 = llvm.extractvalue %729[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %742 = llvm.extractvalue %729[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %743 = llvm.mlir.constant(0 : i32) : i32
    %744 = llvm.mlir.constant(0 : i32) : i32
    %745 = llvm.mlir.constant(0 : i32) : i32
    %746 = llvm.mul %743, %734  : i32
    %747 = llvm.add %745, %746  : i32
    %748 = llvm.mul %744, %733  : i32
    %749 = llvm.add %747, %748  : i32
    %750 = llvm.getelementptr %732[%749] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %751 = llvm.mlir.constant(2 : i32) : i32
    %752 = llvm.mlir.constant(1 : i32) : i32
    %753 = llvm.udiv %100, %752  : i32
    %754 = llvm.urem %753, %751  : i32
    %755 = llvm.mul %100, %734  : i32
    %756 = llvm.mlir.constant(8 : i32) : i32
    %757 = llvm.udiv %102, %756  : i32
    %758 = llvm.xor %757, %754  : i32
    %759 = llvm.mlir.constant(8 : i32) : i32
    %760 = llvm.mul %758, %759  : i32
    %761 = llvm.mlir.constant(8 : i32) : i32
    %762 = llvm.urem %102, %761  : i32
    %763 = llvm.mlir.constant(4 : i32) : i32
    %764 = llvm.udiv %762, %763  : i32
    %765 = llvm.mlir.constant(4 : i32) : i32
    %766 = llvm.mul %764, %765  : i32
    %767 = llvm.add %760, %766  : i32
    %768 = llvm.mul %767, %733  : i32
    %769 = llvm.add %755, %768  : i32
    %770 = llvm.getelementptr %750[%769] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %771 = llvm.mlir.constant(0 : i32) : i32
    %772 = llvm.mlir.constant(0 : i32) : i32
    %773 = llvm.mul %772, %734  : i32
    %774 = llvm.add %773, %771  : i32
    %775 = llvm.getelementptr %770[%774] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %776 = llvm.mlir.constant(2 : i32) : i32
    %777 = llvm.mlir.constant(1 : i32) : i32
    %778 = llvm.udiv %100, %777  : i32
    %779 = llvm.urem %778, %776  : i32
    %780 = llvm.mul %100, %734  : i32
    %781 = llvm.mlir.constant(8 : i32) : i32
    %782 = llvm.udiv %102, %781  : i32
    %783 = llvm.xor %782, %779  : i32
    %784 = llvm.mlir.constant(8 : i32) : i32
    %785 = llvm.mul %783, %784  : i32
    %786 = llvm.mlir.constant(8 : i32) : i32
    %787 = llvm.urem %102, %786  : i32
    %788 = llvm.mlir.constant(4 : i32) : i32
    %789 = llvm.udiv %787, %788  : i32
    %790 = llvm.mlir.constant(4 : i32) : i32
    %791 = llvm.mul %789, %790  : i32
    %792 = llvm.add %785, %791  : i32
    %793 = llvm.mul %792, %733  : i32
    %794 = llvm.add %780, %793  : i32
    %795 = llvm.getelementptr %750[%794] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %796 = llvm.mlir.constant(0 : i32) : i32
    %797 = llvm.mlir.constant(16 : i32) : i32
    %798 = llvm.mul %797, %734  : i32
    %799 = llvm.add %798, %796  : i32
    %800 = llvm.getelementptr %795[%799] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %801 = llvm.mlir.undef : vector<4xf32>
    %802 = llvm.mlir.constant(0 : i32) : i32
    %803 = llvm.insertelement %735, %801[%802 : i32] : vector<4xf32>
    %804 = llvm.mlir.constant(1 : i32) : i32
    %805 = llvm.insertelement %736, %803[%804 : i32] : vector<4xf32>
    %806 = llvm.mlir.constant(2 : i32) : i32
    %807 = llvm.insertelement %737, %805[%806 : i32] : vector<4xf32>
    %808 = llvm.mlir.constant(3 : i32) : i32
    %809 = llvm.insertelement %738, %807[%808 : i32] : vector<4xf32>
    %810 = llvm.bitcast %775 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    llvm.store %809, %810 : !llvm.ptr<vector<4xf32>, 3>
    %811 = llvm.mlir.undef : vector<4xf32>
    %812 = llvm.mlir.constant(0 : i32) : i32
    %813 = llvm.insertelement %739, %811[%812 : i32] : vector<4xf32>
    %814 = llvm.mlir.constant(1 : i32) : i32
    %815 = llvm.insertelement %740, %813[%814 : i32] : vector<4xf32>
    %816 = llvm.mlir.constant(2 : i32) : i32
    %817 = llvm.insertelement %741, %815[%816 : i32] : vector<4xf32>
    %818 = llvm.mlir.constant(3 : i32) : i32
    %819 = llvm.insertelement %742, %817[%818 : i32] : vector<4xf32>
    %820 = llvm.bitcast %800 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    llvm.store %819, %820 : !llvm.ptr<vector<4xf32>, 3>
    %821 = llvm.mlir.constant(1 : i32) : i32
    %822 = llvm.mlir.constant(32 : i32) : i32
    %823 = llvm.mlir.constant(0 : i32) : i32
    %824 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)>
    %825 = llvm.insertvalue %732, %824[0] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %826 = llvm.insertvalue %822, %825[1] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %827 = llvm.insertvalue %821, %826[2] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %828 = llvm.insertvalue %823, %827[3] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %829 = llvm.insertvalue %823, %828[4] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %830 = llvm.extractvalue %534[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %831 = llvm.extractvalue %534[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %832 = llvm.extractvalue %534[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %833 = llvm.extractvalue %534[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %834 = llvm.extractvalue %534[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %835 = llvm.extractvalue %534[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %836 = llvm.extractvalue %534[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %837 = llvm.extractvalue %534[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %838 = llvm.mlir.constant(true) : i1
    %839 = llvm.addrspacecast %830 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %840 = scf.if %838 -> (i32) {
      %2992 = llvm.load %839 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %841 = llvm.bitcast %840 : i32 to vector<1xf32>
    %842 = llvm.mlir.constant(0 : index) : i32
    %843 = llvm.extractelement %841[%842 : i32] : vector<1xf32>
    %844 = llvm.addrspacecast %831 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %845 = scf.if %838 -> (i32) {
      %2992 = llvm.load %844 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %846 = llvm.bitcast %845 : i32 to vector<1xf32>
    %847 = llvm.mlir.constant(0 : index) : i32
    %848 = llvm.extractelement %846[%847 : i32] : vector<1xf32>
    %849 = llvm.addrspacecast %832 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %850 = scf.if %838 -> (i32) {
      %2992 = llvm.load %849 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %851 = llvm.bitcast %850 : i32 to vector<1xf32>
    %852 = llvm.mlir.constant(0 : index) : i32
    %853 = llvm.extractelement %851[%852 : i32] : vector<1xf32>
    %854 = llvm.addrspacecast %833 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %855 = scf.if %838 -> (i32) {
      %2992 = llvm.load %854 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %856 = llvm.bitcast %855 : i32 to vector<1xf32>
    %857 = llvm.mlir.constant(0 : index) : i32
    %858 = llvm.extractelement %856[%857 : i32] : vector<1xf32>
    %859 = llvm.mlir.constant(true) : i1
    %860 = llvm.addrspacecast %834 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %861 = scf.if %859 -> (i32) {
      %2992 = llvm.load %860 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %862 = llvm.bitcast %861 : i32 to vector<1xf32>
    %863 = llvm.mlir.constant(0 : index) : i32
    %864 = llvm.extractelement %862[%863 : i32] : vector<1xf32>
    %865 = llvm.addrspacecast %835 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %866 = scf.if %859 -> (i32) {
      %2992 = llvm.load %865 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %867 = llvm.bitcast %866 : i32 to vector<1xf32>
    %868 = llvm.mlir.constant(0 : index) : i32
    %869 = llvm.extractelement %867[%868 : i32] : vector<1xf32>
    %870 = llvm.addrspacecast %836 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %871 = scf.if %859 -> (i32) {
      %2992 = llvm.load %870 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %872 = llvm.bitcast %871 : i32 to vector<1xf32>
    %873 = llvm.mlir.constant(0 : index) : i32
    %874 = llvm.extractelement %872[%873 : i32] : vector<1xf32>
    %875 = llvm.addrspacecast %837 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %876 = scf.if %859 -> (i32) {
      %2992 = llvm.load %875 : !llvm.ptr<i32>
      scf.yield %2992 : i32
    } else {
      %2992 = llvm.mlir.constant(0 : i32) : i32
      %2993 = llvm.bitcast %2992 : i32 to i32
      scf.yield %2993 : i32
    }
    %877 = llvm.bitcast %876 : i32 to vector<1xf32>
    %878 = llvm.mlir.constant(0 : index) : i32
    %879 = llvm.extractelement %877[%878 : i32] : vector<1xf32>
    %880 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %881 = llvm.insertvalue %843, %880[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %882 = llvm.insertvalue %848, %881[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %883 = llvm.insertvalue %853, %882[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %884 = llvm.insertvalue %858, %883[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %885 = llvm.insertvalue %864, %884[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %886 = llvm.insertvalue %869, %885[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %887 = llvm.insertvalue %874, %886[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %888 = llvm.insertvalue %879, %887[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %889 = llvm.mlir.constant(4096 : i32) : i32
    %890 = llvm.getelementptr %191[%889] : (!llvm.ptr<i8, 3>, i32) -> !llvm.ptr<i8, 3>
    %891 = llvm.bitcast %890 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %892 = llvm.mlir.constant(1 : i32) : i32
    %893 = llvm.mlir.constant(32 : i32) : i32
    %894 = llvm.extractvalue %888[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %895 = llvm.extractvalue %888[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %896 = llvm.extractvalue %888[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %897 = llvm.extractvalue %888[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %898 = llvm.extractvalue %888[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %899 = llvm.extractvalue %888[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %900 = llvm.extractvalue %888[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %901 = llvm.extractvalue %888[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %902 = llvm.mlir.constant(0 : i32) : i32
    %903 = llvm.mlir.constant(0 : i32) : i32
    %904 = llvm.mlir.constant(0 : i32) : i32
    %905 = llvm.mul %902, %893  : i32
    %906 = llvm.add %904, %905  : i32
    %907 = llvm.mul %903, %892  : i32
    %908 = llvm.add %906, %907  : i32
    %909 = llvm.getelementptr %891[%908] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %910 = llvm.mlir.constant(2 : i32) : i32
    %911 = llvm.mlir.constant(1 : i32) : i32
    %912 = llvm.udiv %100, %911  : i32
    %913 = llvm.urem %912, %910  : i32
    %914 = llvm.mul %100, %893  : i32
    %915 = llvm.mlir.constant(2 : i32) : i32
    %916 = llvm.udiv %102, %915  : i32
    %917 = llvm.xor %916, %913  : i32
    %918 = llvm.mlir.constant(2 : i32) : i32
    %919 = llvm.mul %917, %918  : i32
    %920 = llvm.mlir.constant(2 : i32) : i32
    %921 = llvm.urem %102, %920  : i32
    %922 = llvm.mlir.constant(2 : i32) : i32
    %923 = llvm.udiv %921, %922  : i32
    %924 = llvm.mlir.constant(2 : i32) : i32
    %925 = llvm.mul %923, %924  : i32
    %926 = llvm.add %919, %925  : i32
    %927 = llvm.mul %926, %892  : i32
    %928 = llvm.add %914, %927  : i32
    %929 = llvm.getelementptr %909[%928] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %930 = llvm.mlir.constant(0 : i32) : i32
    %931 = llvm.mlir.constant(0 : i32) : i32
    %932 = llvm.mul %931, %893  : i32
    %933 = llvm.add %932, %930  : i32
    %934 = llvm.getelementptr %929[%933] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %935 = llvm.mlir.constant(2 : i32) : i32
    %936 = llvm.mlir.constant(1 : i32) : i32
    %937 = llvm.udiv %100, %936  : i32
    %938 = llvm.urem %937, %935  : i32
    %939 = llvm.mul %100, %893  : i32
    %940 = llvm.mlir.constant(2 : i32) : i32
    %941 = llvm.udiv %110, %940  : i32
    %942 = llvm.xor %941, %938  : i32
    %943 = llvm.mlir.constant(2 : i32) : i32
    %944 = llvm.mul %942, %943  : i32
    %945 = llvm.mlir.constant(2 : i32) : i32
    %946 = llvm.urem %110, %945  : i32
    %947 = llvm.mlir.constant(2 : i32) : i32
    %948 = llvm.udiv %946, %947  : i32
    %949 = llvm.mlir.constant(2 : i32) : i32
    %950 = llvm.mul %948, %949  : i32
    %951 = llvm.add %944, %950  : i32
    %952 = llvm.mul %951, %892  : i32
    %953 = llvm.add %939, %952  : i32
    %954 = llvm.getelementptr %909[%953] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %955 = llvm.mlir.constant(0 : i32) : i32
    %956 = llvm.mlir.constant(0 : i32) : i32
    %957 = llvm.mul %956, %893  : i32
    %958 = llvm.add %957, %955  : i32
    %959 = llvm.getelementptr %954[%958] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %960 = llvm.mlir.constant(2 : i32) : i32
    %961 = llvm.mlir.constant(1 : i32) : i32
    %962 = llvm.udiv %100, %961  : i32
    %963 = llvm.urem %962, %960  : i32
    %964 = llvm.mul %100, %893  : i32
    %965 = llvm.mlir.constant(2 : i32) : i32
    %966 = llvm.udiv %102, %965  : i32
    %967 = llvm.xor %966, %963  : i32
    %968 = llvm.mlir.constant(2 : i32) : i32
    %969 = llvm.mul %967, %968  : i32
    %970 = llvm.mlir.constant(2 : i32) : i32
    %971 = llvm.urem %102, %970  : i32
    %972 = llvm.mlir.constant(2 : i32) : i32
    %973 = llvm.udiv %971, %972  : i32
    %974 = llvm.mlir.constant(2 : i32) : i32
    %975 = llvm.mul %973, %974  : i32
    %976 = llvm.add %969, %975  : i32
    %977 = llvm.mul %976, %892  : i32
    %978 = llvm.add %964, %977  : i32
    %979 = llvm.getelementptr %909[%978] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %980 = llvm.mlir.constant(0 : i32) : i32
    %981 = llvm.mlir.constant(16 : i32) : i32
    %982 = llvm.mul %981, %893  : i32
    %983 = llvm.add %982, %980  : i32
    %984 = llvm.getelementptr %979[%983] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %985 = llvm.mlir.constant(2 : i32) : i32
    %986 = llvm.mlir.constant(1 : i32) : i32
    %987 = llvm.udiv %100, %986  : i32
    %988 = llvm.urem %987, %985  : i32
    %989 = llvm.mul %100, %893  : i32
    %990 = llvm.mlir.constant(2 : i32) : i32
    %991 = llvm.udiv %110, %990  : i32
    %992 = llvm.xor %991, %988  : i32
    %993 = llvm.mlir.constant(2 : i32) : i32
    %994 = llvm.mul %992, %993  : i32
    %995 = llvm.mlir.constant(2 : i32) : i32
    %996 = llvm.urem %110, %995  : i32
    %997 = llvm.mlir.constant(2 : i32) : i32
    %998 = llvm.udiv %996, %997  : i32
    %999 = llvm.mlir.constant(2 : i32) : i32
    %1000 = llvm.mul %998, %999  : i32
    %1001 = llvm.add %994, %1000  : i32
    %1002 = llvm.mul %1001, %892  : i32
    %1003 = llvm.add %989, %1002  : i32
    %1004 = llvm.getelementptr %909[%1003] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1005 = llvm.mlir.constant(0 : i32) : i32
    %1006 = llvm.mlir.constant(16 : i32) : i32
    %1007 = llvm.mul %1006, %893  : i32
    %1008 = llvm.add %1007, %1005  : i32
    %1009 = llvm.getelementptr %1004[%1008] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1010 = llvm.mlir.undef : vector<2xf32>
    %1011 = llvm.mlir.constant(0 : i32) : i32
    %1012 = llvm.insertelement %894, %1010[%1011 : i32] : vector<2xf32>
    %1013 = llvm.mlir.constant(1 : i32) : i32
    %1014 = llvm.insertelement %895, %1012[%1013 : i32] : vector<2xf32>
    %1015 = llvm.bitcast %934 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %1014, %1015 : !llvm.ptr<vector<2xf32>, 3>
    %1016 = llvm.mlir.undef : vector<2xf32>
    %1017 = llvm.mlir.constant(0 : i32) : i32
    %1018 = llvm.insertelement %896, %1016[%1017 : i32] : vector<2xf32>
    %1019 = llvm.mlir.constant(1 : i32) : i32
    %1020 = llvm.insertelement %897, %1018[%1019 : i32] : vector<2xf32>
    %1021 = llvm.bitcast %959 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %1020, %1021 : !llvm.ptr<vector<2xf32>, 3>
    %1022 = llvm.mlir.undef : vector<2xf32>
    %1023 = llvm.mlir.constant(0 : i32) : i32
    %1024 = llvm.insertelement %898, %1022[%1023 : i32] : vector<2xf32>
    %1025 = llvm.mlir.constant(1 : i32) : i32
    %1026 = llvm.insertelement %899, %1024[%1025 : i32] : vector<2xf32>
    %1027 = llvm.bitcast %984 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %1026, %1027 : !llvm.ptr<vector<2xf32>, 3>
    %1028 = llvm.mlir.undef : vector<2xf32>
    %1029 = llvm.mlir.constant(0 : i32) : i32
    %1030 = llvm.insertelement %900, %1028[%1029 : i32] : vector<2xf32>
    %1031 = llvm.mlir.constant(1 : i32) : i32
    %1032 = llvm.insertelement %901, %1030[%1031 : i32] : vector<2xf32>
    %1033 = llvm.bitcast %1009 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %1032, %1033 : !llvm.ptr<vector<2xf32>, 3>
    %1034 = llvm.mlir.constant(1 : i32) : i32
    %1035 = llvm.mlir.constant(32 : i32) : i32
    %1036 = llvm.mlir.constant(0 : i32) : i32
    %1037 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)>
    %1038 = llvm.insertvalue %891, %1037[0] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1039 = llvm.insertvalue %1035, %1038[1] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1040 = llvm.insertvalue %1034, %1039[2] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1041 = llvm.insertvalue %1036, %1040[3] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1042 = llvm.insertvalue %1036, %1041[4] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    rocdl.barrier
    %1043 = llvm.extractvalue %829[0] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1044 = llvm.extractvalue %829[1] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1045 = llvm.extractvalue %829[2] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1046 = llvm.extractvalue %829[3] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1047 = llvm.extractvalue %829[4] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1048 = rocdl.workitem.id.x : i32
    %1049 = llvm.trunc %1048 : i32 to i32
    %1050 = llvm.mlir.constant(64 : i32) : i32
    %1051 = llvm.udiv %1049, %1050  : i32
    %1052 = llvm.urem %1049, %1050  : i32
    %1053 = llvm.mlir.constant(1 : i32) : i32
    %1054 = llvm.mlir.constant(2 : i32) : i32
    %1055 = llvm.urem %1051, %1054  : i32
    %1056 = llvm.urem %1055, %1053  : i32
    %1057 = llvm.mlir.constant(0 : i32) : i32
    %1058 = llvm.mlir.constant(32 : i32) : i32
    %1059 = llvm.mlir.constant(0 : i32) : i32
    %1060 = llvm.mlir.constant(32 : i32) : i32
    %1061 = llvm.mul %1056, %1060  : i32
    %1062 = llvm.mlir.constant(0 : i32) : i32
    %1063 = llvm.urem %1052, %1058  : i32
    %1064 = llvm.mlir.constant(1 : i32) : i32
    %1065 = llvm.udiv %1052, %1058  : i32
    %1066 = llvm.mul %1065, %1064  : i32
    %1067 = llvm.mlir.constant(0 : i32) : i32
    %1068 = llvm.add %1059, %1061  : i32
    %1069 = llvm.add %1068, %1057  : i32
    %1070 = llvm.add %1069, %1063  : i32
    %1071 = llvm.add %1070, %1057  : i32
    %1072 = llvm.add %1057, %1057  : i32
    %1073 = llvm.add %1072, %1062  : i32
    %1074 = llvm.add %1073, %1066  : i32
    %1075 = llvm.add %1074, %1067  : i32
    %1076 = llvm.add %1071, %1046  : i32
    %1077 = llvm.add %1075, %1047  : i32
    %1078 = llvm.mlir.constant(2 : i32) : i32
    %1079 = llvm.urem %1052, %1058  : i32
    %1080 = llvm.mlir.constant(1 : i32) : i32
    %1081 = llvm.udiv %1052, %1058  : i32
    %1082 = llvm.mul %1081, %1080  : i32
    %1083 = llvm.mlir.constant(0 : i32) : i32
    %1084 = llvm.add %1059, %1061  : i32
    %1085 = llvm.add %1084, %1057  : i32
    %1086 = llvm.add %1085, %1079  : i32
    %1087 = llvm.add %1086, %1057  : i32
    %1088 = llvm.add %1057, %1057  : i32
    %1089 = llvm.add %1088, %1078  : i32
    %1090 = llvm.add %1089, %1082  : i32
    %1091 = llvm.add %1090, %1083  : i32
    %1092 = llvm.add %1087, %1046  : i32
    %1093 = llvm.add %1091, %1047  : i32
    %1094 = llvm.mlir.constant(4 : i32) : i32
    %1095 = llvm.urem %1052, %1058  : i32
    %1096 = llvm.mlir.constant(1 : i32) : i32
    %1097 = llvm.udiv %1052, %1058  : i32
    %1098 = llvm.mul %1097, %1096  : i32
    %1099 = llvm.mlir.constant(0 : i32) : i32
    %1100 = llvm.add %1059, %1061  : i32
    %1101 = llvm.add %1100, %1057  : i32
    %1102 = llvm.add %1101, %1095  : i32
    %1103 = llvm.add %1102, %1057  : i32
    %1104 = llvm.add %1057, %1057  : i32
    %1105 = llvm.add %1104, %1094  : i32
    %1106 = llvm.add %1105, %1098  : i32
    %1107 = llvm.add %1106, %1099  : i32
    %1108 = llvm.add %1103, %1046  : i32
    %1109 = llvm.add %1107, %1047  : i32
    %1110 = llvm.mlir.constant(6 : i32) : i32
    %1111 = llvm.urem %1052, %1058  : i32
    %1112 = llvm.mlir.constant(1 : i32) : i32
    %1113 = llvm.udiv %1052, %1058  : i32
    %1114 = llvm.mul %1113, %1112  : i32
    %1115 = llvm.mlir.constant(0 : i32) : i32
    %1116 = llvm.add %1059, %1061  : i32
    %1117 = llvm.add %1116, %1057  : i32
    %1118 = llvm.add %1117, %1111  : i32
    %1119 = llvm.add %1118, %1057  : i32
    %1120 = llvm.add %1057, %1057  : i32
    %1121 = llvm.add %1120, %1110  : i32
    %1122 = llvm.add %1121, %1114  : i32
    %1123 = llvm.add %1122, %1115  : i32
    %1124 = llvm.add %1119, %1046  : i32
    %1125 = llvm.add %1123, %1047  : i32
    %1126 = llvm.mlir.constant(8 : i32) : i32
    %1127 = llvm.urem %1052, %1058  : i32
    %1128 = llvm.mlir.constant(1 : i32) : i32
    %1129 = llvm.udiv %1052, %1058  : i32
    %1130 = llvm.mul %1129, %1128  : i32
    %1131 = llvm.mlir.constant(0 : i32) : i32
    %1132 = llvm.add %1059, %1061  : i32
    %1133 = llvm.add %1132, %1057  : i32
    %1134 = llvm.add %1133, %1127  : i32
    %1135 = llvm.add %1134, %1057  : i32
    %1136 = llvm.add %1057, %1057  : i32
    %1137 = llvm.add %1136, %1126  : i32
    %1138 = llvm.add %1137, %1130  : i32
    %1139 = llvm.add %1138, %1131  : i32
    %1140 = llvm.add %1135, %1046  : i32
    %1141 = llvm.add %1139, %1047  : i32
    %1142 = llvm.mlir.constant(10 : i32) : i32
    %1143 = llvm.urem %1052, %1058  : i32
    %1144 = llvm.mlir.constant(1 : i32) : i32
    %1145 = llvm.udiv %1052, %1058  : i32
    %1146 = llvm.mul %1145, %1144  : i32
    %1147 = llvm.mlir.constant(0 : i32) : i32
    %1148 = llvm.add %1059, %1061  : i32
    %1149 = llvm.add %1148, %1057  : i32
    %1150 = llvm.add %1149, %1143  : i32
    %1151 = llvm.add %1150, %1057  : i32
    %1152 = llvm.add %1057, %1057  : i32
    %1153 = llvm.add %1152, %1142  : i32
    %1154 = llvm.add %1153, %1146  : i32
    %1155 = llvm.add %1154, %1147  : i32
    %1156 = llvm.add %1151, %1046  : i32
    %1157 = llvm.add %1155, %1047  : i32
    %1158 = llvm.mlir.constant(12 : i32) : i32
    %1159 = llvm.urem %1052, %1058  : i32
    %1160 = llvm.mlir.constant(1 : i32) : i32
    %1161 = llvm.udiv %1052, %1058  : i32
    %1162 = llvm.mul %1161, %1160  : i32
    %1163 = llvm.mlir.constant(0 : i32) : i32
    %1164 = llvm.add %1059, %1061  : i32
    %1165 = llvm.add %1164, %1057  : i32
    %1166 = llvm.add %1165, %1159  : i32
    %1167 = llvm.add %1166, %1057  : i32
    %1168 = llvm.add %1057, %1057  : i32
    %1169 = llvm.add %1168, %1158  : i32
    %1170 = llvm.add %1169, %1162  : i32
    %1171 = llvm.add %1170, %1163  : i32
    %1172 = llvm.add %1167, %1046  : i32
    %1173 = llvm.add %1171, %1047  : i32
    %1174 = llvm.mlir.constant(14 : i32) : i32
    %1175 = llvm.urem %1052, %1058  : i32
    %1176 = llvm.mlir.constant(1 : i32) : i32
    %1177 = llvm.udiv %1052, %1058  : i32
    %1178 = llvm.mul %1177, %1176  : i32
    %1179 = llvm.mlir.constant(0 : i32) : i32
    %1180 = llvm.add %1059, %1061  : i32
    %1181 = llvm.add %1180, %1057  : i32
    %1182 = llvm.add %1181, %1175  : i32
    %1183 = llvm.add %1182, %1057  : i32
    %1184 = llvm.add %1057, %1057  : i32
    %1185 = llvm.add %1184, %1174  : i32
    %1186 = llvm.add %1185, %1178  : i32
    %1187 = llvm.add %1186, %1179  : i32
    %1188 = llvm.add %1183, %1046  : i32
    %1189 = llvm.add %1187, %1047  : i32
    %1190 = llvm.mlir.constant(16 : i32) : i32
    %1191 = llvm.urem %1052, %1058  : i32
    %1192 = llvm.mlir.constant(1 : i32) : i32
    %1193 = llvm.udiv %1052, %1058  : i32
    %1194 = llvm.mul %1193, %1192  : i32
    %1195 = llvm.mlir.constant(0 : i32) : i32
    %1196 = llvm.add %1059, %1061  : i32
    %1197 = llvm.add %1196, %1057  : i32
    %1198 = llvm.add %1197, %1191  : i32
    %1199 = llvm.add %1198, %1057  : i32
    %1200 = llvm.add %1057, %1057  : i32
    %1201 = llvm.add %1200, %1190  : i32
    %1202 = llvm.add %1201, %1194  : i32
    %1203 = llvm.add %1202, %1195  : i32
    %1204 = llvm.add %1199, %1046  : i32
    %1205 = llvm.add %1203, %1047  : i32
    %1206 = llvm.mlir.constant(18 : i32) : i32
    %1207 = llvm.urem %1052, %1058  : i32
    %1208 = llvm.mlir.constant(1 : i32) : i32
    %1209 = llvm.udiv %1052, %1058  : i32
    %1210 = llvm.mul %1209, %1208  : i32
    %1211 = llvm.mlir.constant(0 : i32) : i32
    %1212 = llvm.add %1059, %1061  : i32
    %1213 = llvm.add %1212, %1057  : i32
    %1214 = llvm.add %1213, %1207  : i32
    %1215 = llvm.add %1214, %1057  : i32
    %1216 = llvm.add %1057, %1057  : i32
    %1217 = llvm.add %1216, %1206  : i32
    %1218 = llvm.add %1217, %1210  : i32
    %1219 = llvm.add %1218, %1211  : i32
    %1220 = llvm.add %1215, %1046  : i32
    %1221 = llvm.add %1219, %1047  : i32
    %1222 = llvm.mlir.constant(20 : i32) : i32
    %1223 = llvm.urem %1052, %1058  : i32
    %1224 = llvm.mlir.constant(1 : i32) : i32
    %1225 = llvm.udiv %1052, %1058  : i32
    %1226 = llvm.mul %1225, %1224  : i32
    %1227 = llvm.mlir.constant(0 : i32) : i32
    %1228 = llvm.add %1059, %1061  : i32
    %1229 = llvm.add %1228, %1057  : i32
    %1230 = llvm.add %1229, %1223  : i32
    %1231 = llvm.add %1230, %1057  : i32
    %1232 = llvm.add %1057, %1057  : i32
    %1233 = llvm.add %1232, %1222  : i32
    %1234 = llvm.add %1233, %1226  : i32
    %1235 = llvm.add %1234, %1227  : i32
    %1236 = llvm.add %1231, %1046  : i32
    %1237 = llvm.add %1235, %1047  : i32
    %1238 = llvm.mlir.constant(22 : i32) : i32
    %1239 = llvm.urem %1052, %1058  : i32
    %1240 = llvm.mlir.constant(1 : i32) : i32
    %1241 = llvm.udiv %1052, %1058  : i32
    %1242 = llvm.mul %1241, %1240  : i32
    %1243 = llvm.mlir.constant(0 : i32) : i32
    %1244 = llvm.add %1059, %1061  : i32
    %1245 = llvm.add %1244, %1057  : i32
    %1246 = llvm.add %1245, %1239  : i32
    %1247 = llvm.add %1246, %1057  : i32
    %1248 = llvm.add %1057, %1057  : i32
    %1249 = llvm.add %1248, %1238  : i32
    %1250 = llvm.add %1249, %1242  : i32
    %1251 = llvm.add %1250, %1243  : i32
    %1252 = llvm.add %1247, %1046  : i32
    %1253 = llvm.add %1251, %1047  : i32
    %1254 = llvm.mlir.constant(24 : i32) : i32
    %1255 = llvm.urem %1052, %1058  : i32
    %1256 = llvm.mlir.constant(1 : i32) : i32
    %1257 = llvm.udiv %1052, %1058  : i32
    %1258 = llvm.mul %1257, %1256  : i32
    %1259 = llvm.mlir.constant(0 : i32) : i32
    %1260 = llvm.add %1059, %1061  : i32
    %1261 = llvm.add %1260, %1057  : i32
    %1262 = llvm.add %1261, %1255  : i32
    %1263 = llvm.add %1262, %1057  : i32
    %1264 = llvm.add %1057, %1057  : i32
    %1265 = llvm.add %1264, %1254  : i32
    %1266 = llvm.add %1265, %1258  : i32
    %1267 = llvm.add %1266, %1259  : i32
    %1268 = llvm.add %1263, %1046  : i32
    %1269 = llvm.add %1267, %1047  : i32
    %1270 = llvm.mlir.constant(26 : i32) : i32
    %1271 = llvm.urem %1052, %1058  : i32
    %1272 = llvm.mlir.constant(1 : i32) : i32
    %1273 = llvm.udiv %1052, %1058  : i32
    %1274 = llvm.mul %1273, %1272  : i32
    %1275 = llvm.mlir.constant(0 : i32) : i32
    %1276 = llvm.add %1059, %1061  : i32
    %1277 = llvm.add %1276, %1057  : i32
    %1278 = llvm.add %1277, %1271  : i32
    %1279 = llvm.add %1278, %1057  : i32
    %1280 = llvm.add %1057, %1057  : i32
    %1281 = llvm.add %1280, %1270  : i32
    %1282 = llvm.add %1281, %1274  : i32
    %1283 = llvm.add %1282, %1275  : i32
    %1284 = llvm.add %1279, %1046  : i32
    %1285 = llvm.add %1283, %1047  : i32
    %1286 = llvm.mlir.constant(28 : i32) : i32
    %1287 = llvm.urem %1052, %1058  : i32
    %1288 = llvm.mlir.constant(1 : i32) : i32
    %1289 = llvm.udiv %1052, %1058  : i32
    %1290 = llvm.mul %1289, %1288  : i32
    %1291 = llvm.mlir.constant(0 : i32) : i32
    %1292 = llvm.add %1059, %1061  : i32
    %1293 = llvm.add %1292, %1057  : i32
    %1294 = llvm.add %1293, %1287  : i32
    %1295 = llvm.add %1294, %1057  : i32
    %1296 = llvm.add %1057, %1057  : i32
    %1297 = llvm.add %1296, %1286  : i32
    %1298 = llvm.add %1297, %1290  : i32
    %1299 = llvm.add %1298, %1291  : i32
    %1300 = llvm.add %1295, %1046  : i32
    %1301 = llvm.add %1299, %1047  : i32
    %1302 = llvm.mlir.constant(30 : i32) : i32
    %1303 = llvm.urem %1052, %1058  : i32
    %1304 = llvm.mlir.constant(1 : i32) : i32
    %1305 = llvm.udiv %1052, %1058  : i32
    %1306 = llvm.mul %1305, %1304  : i32
    %1307 = llvm.mlir.constant(0 : i32) : i32
    %1308 = llvm.add %1059, %1061  : i32
    %1309 = llvm.add %1308, %1057  : i32
    %1310 = llvm.add %1309, %1303  : i32
    %1311 = llvm.add %1310, %1057  : i32
    %1312 = llvm.add %1057, %1057  : i32
    %1313 = llvm.add %1312, %1302  : i32
    %1314 = llvm.add %1313, %1306  : i32
    %1315 = llvm.add %1314, %1307  : i32
    %1316 = llvm.add %1311, %1046  : i32
    %1317 = llvm.add %1315, %1047  : i32
    %1318 = llvm.mlir.constant(8 : i32) : i32
    %1319 = llvm.mlir.constant(1 : i32) : i32
    %1320 = llvm.mlir.constant(2 : i32) : i32
    %1321 = llvm.udiv %1076, %1319  : i32
    %1322 = llvm.urem %1321, %1320  : i32
    %1323 = llvm.udiv %1077, %1318  : i32
    %1324 = llvm.xor %1323, %1322  : i32
    %1325 = llvm.mul %1324, %1318  : i32
    %1326 = llvm.urem %1077, %1318  : i32
    %1327 = llvm.add %1325, %1326  : i32
    %1328 = llvm.mul %1076, %1044  : i32
    %1329 = llvm.mul %1327, %1045  : i32
    %1330 = llvm.add %1328, %1329  : i32
    %1331 = llvm.mlir.constant(8 : i32) : i32
    %1332 = llvm.mlir.constant(1 : i32) : i32
    %1333 = llvm.mlir.constant(2 : i32) : i32
    %1334 = llvm.udiv %1092, %1332  : i32
    %1335 = llvm.urem %1334, %1333  : i32
    %1336 = llvm.udiv %1093, %1331  : i32
    %1337 = llvm.xor %1336, %1335  : i32
    %1338 = llvm.mul %1337, %1331  : i32
    %1339 = llvm.urem %1093, %1331  : i32
    %1340 = llvm.add %1338, %1339  : i32
    %1341 = llvm.mul %1092, %1044  : i32
    %1342 = llvm.mul %1340, %1045  : i32
    %1343 = llvm.add %1341, %1342  : i32
    %1344 = llvm.mlir.constant(8 : i32) : i32
    %1345 = llvm.mlir.constant(1 : i32) : i32
    %1346 = llvm.mlir.constant(2 : i32) : i32
    %1347 = llvm.udiv %1108, %1345  : i32
    %1348 = llvm.urem %1347, %1346  : i32
    %1349 = llvm.udiv %1109, %1344  : i32
    %1350 = llvm.xor %1349, %1348  : i32
    %1351 = llvm.mul %1350, %1344  : i32
    %1352 = llvm.urem %1109, %1344  : i32
    %1353 = llvm.add %1351, %1352  : i32
    %1354 = llvm.mul %1108, %1044  : i32
    %1355 = llvm.mul %1353, %1045  : i32
    %1356 = llvm.add %1354, %1355  : i32
    %1357 = llvm.mlir.constant(8 : i32) : i32
    %1358 = llvm.mlir.constant(1 : i32) : i32
    %1359 = llvm.mlir.constant(2 : i32) : i32
    %1360 = llvm.udiv %1124, %1358  : i32
    %1361 = llvm.urem %1360, %1359  : i32
    %1362 = llvm.udiv %1125, %1357  : i32
    %1363 = llvm.xor %1362, %1361  : i32
    %1364 = llvm.mul %1363, %1357  : i32
    %1365 = llvm.urem %1125, %1357  : i32
    %1366 = llvm.add %1364, %1365  : i32
    %1367 = llvm.mul %1124, %1044  : i32
    %1368 = llvm.mul %1366, %1045  : i32
    %1369 = llvm.add %1367, %1368  : i32
    %1370 = llvm.mlir.constant(8 : i32) : i32
    %1371 = llvm.mlir.constant(1 : i32) : i32
    %1372 = llvm.mlir.constant(2 : i32) : i32
    %1373 = llvm.udiv %1140, %1371  : i32
    %1374 = llvm.urem %1373, %1372  : i32
    %1375 = llvm.udiv %1141, %1370  : i32
    %1376 = llvm.xor %1375, %1374  : i32
    %1377 = llvm.mul %1376, %1370  : i32
    %1378 = llvm.urem %1141, %1370  : i32
    %1379 = llvm.add %1377, %1378  : i32
    %1380 = llvm.mul %1140, %1044  : i32
    %1381 = llvm.mul %1379, %1045  : i32
    %1382 = llvm.add %1380, %1381  : i32
    %1383 = llvm.mlir.constant(8 : i32) : i32
    %1384 = llvm.mlir.constant(1 : i32) : i32
    %1385 = llvm.mlir.constant(2 : i32) : i32
    %1386 = llvm.udiv %1156, %1384  : i32
    %1387 = llvm.urem %1386, %1385  : i32
    %1388 = llvm.udiv %1157, %1383  : i32
    %1389 = llvm.xor %1388, %1387  : i32
    %1390 = llvm.mul %1389, %1383  : i32
    %1391 = llvm.urem %1157, %1383  : i32
    %1392 = llvm.add %1390, %1391  : i32
    %1393 = llvm.mul %1156, %1044  : i32
    %1394 = llvm.mul %1392, %1045  : i32
    %1395 = llvm.add %1393, %1394  : i32
    %1396 = llvm.mlir.constant(8 : i32) : i32
    %1397 = llvm.mlir.constant(1 : i32) : i32
    %1398 = llvm.mlir.constant(2 : i32) : i32
    %1399 = llvm.udiv %1172, %1397  : i32
    %1400 = llvm.urem %1399, %1398  : i32
    %1401 = llvm.udiv %1173, %1396  : i32
    %1402 = llvm.xor %1401, %1400  : i32
    %1403 = llvm.mul %1402, %1396  : i32
    %1404 = llvm.urem %1173, %1396  : i32
    %1405 = llvm.add %1403, %1404  : i32
    %1406 = llvm.mul %1172, %1044  : i32
    %1407 = llvm.mul %1405, %1045  : i32
    %1408 = llvm.add %1406, %1407  : i32
    %1409 = llvm.mlir.constant(8 : i32) : i32
    %1410 = llvm.mlir.constant(1 : i32) : i32
    %1411 = llvm.mlir.constant(2 : i32) : i32
    %1412 = llvm.udiv %1188, %1410  : i32
    %1413 = llvm.urem %1412, %1411  : i32
    %1414 = llvm.udiv %1189, %1409  : i32
    %1415 = llvm.xor %1414, %1413  : i32
    %1416 = llvm.mul %1415, %1409  : i32
    %1417 = llvm.urem %1189, %1409  : i32
    %1418 = llvm.add %1416, %1417  : i32
    %1419 = llvm.mul %1188, %1044  : i32
    %1420 = llvm.mul %1418, %1045  : i32
    %1421 = llvm.add %1419, %1420  : i32
    %1422 = llvm.mlir.constant(8 : i32) : i32
    %1423 = llvm.mlir.constant(1 : i32) : i32
    %1424 = llvm.mlir.constant(2 : i32) : i32
    %1425 = llvm.udiv %1204, %1423  : i32
    %1426 = llvm.urem %1425, %1424  : i32
    %1427 = llvm.udiv %1205, %1422  : i32
    %1428 = llvm.xor %1427, %1426  : i32
    %1429 = llvm.mul %1428, %1422  : i32
    %1430 = llvm.urem %1205, %1422  : i32
    %1431 = llvm.add %1429, %1430  : i32
    %1432 = llvm.mul %1204, %1044  : i32
    %1433 = llvm.mul %1431, %1045  : i32
    %1434 = llvm.add %1432, %1433  : i32
    %1435 = llvm.mlir.constant(8 : i32) : i32
    %1436 = llvm.mlir.constant(1 : i32) : i32
    %1437 = llvm.mlir.constant(2 : i32) : i32
    %1438 = llvm.udiv %1220, %1436  : i32
    %1439 = llvm.urem %1438, %1437  : i32
    %1440 = llvm.udiv %1221, %1435  : i32
    %1441 = llvm.xor %1440, %1439  : i32
    %1442 = llvm.mul %1441, %1435  : i32
    %1443 = llvm.urem %1221, %1435  : i32
    %1444 = llvm.add %1442, %1443  : i32
    %1445 = llvm.mul %1220, %1044  : i32
    %1446 = llvm.mul %1444, %1045  : i32
    %1447 = llvm.add %1445, %1446  : i32
    %1448 = llvm.mlir.constant(8 : i32) : i32
    %1449 = llvm.mlir.constant(1 : i32) : i32
    %1450 = llvm.mlir.constant(2 : i32) : i32
    %1451 = llvm.udiv %1236, %1449  : i32
    %1452 = llvm.urem %1451, %1450  : i32
    %1453 = llvm.udiv %1237, %1448  : i32
    %1454 = llvm.xor %1453, %1452  : i32
    %1455 = llvm.mul %1454, %1448  : i32
    %1456 = llvm.urem %1237, %1448  : i32
    %1457 = llvm.add %1455, %1456  : i32
    %1458 = llvm.mul %1236, %1044  : i32
    %1459 = llvm.mul %1457, %1045  : i32
    %1460 = llvm.add %1458, %1459  : i32
    %1461 = llvm.mlir.constant(8 : i32) : i32
    %1462 = llvm.mlir.constant(1 : i32) : i32
    %1463 = llvm.mlir.constant(2 : i32) : i32
    %1464 = llvm.udiv %1252, %1462  : i32
    %1465 = llvm.urem %1464, %1463  : i32
    %1466 = llvm.udiv %1253, %1461  : i32
    %1467 = llvm.xor %1466, %1465  : i32
    %1468 = llvm.mul %1467, %1461  : i32
    %1469 = llvm.urem %1253, %1461  : i32
    %1470 = llvm.add %1468, %1469  : i32
    %1471 = llvm.mul %1252, %1044  : i32
    %1472 = llvm.mul %1470, %1045  : i32
    %1473 = llvm.add %1471, %1472  : i32
    %1474 = llvm.mlir.constant(8 : i32) : i32
    %1475 = llvm.mlir.constant(1 : i32) : i32
    %1476 = llvm.mlir.constant(2 : i32) : i32
    %1477 = llvm.udiv %1268, %1475  : i32
    %1478 = llvm.urem %1477, %1476  : i32
    %1479 = llvm.udiv %1269, %1474  : i32
    %1480 = llvm.xor %1479, %1478  : i32
    %1481 = llvm.mul %1480, %1474  : i32
    %1482 = llvm.urem %1269, %1474  : i32
    %1483 = llvm.add %1481, %1482  : i32
    %1484 = llvm.mul %1268, %1044  : i32
    %1485 = llvm.mul %1483, %1045  : i32
    %1486 = llvm.add %1484, %1485  : i32
    %1487 = llvm.mlir.constant(8 : i32) : i32
    %1488 = llvm.mlir.constant(1 : i32) : i32
    %1489 = llvm.mlir.constant(2 : i32) : i32
    %1490 = llvm.udiv %1284, %1488  : i32
    %1491 = llvm.urem %1490, %1489  : i32
    %1492 = llvm.udiv %1285, %1487  : i32
    %1493 = llvm.xor %1492, %1491  : i32
    %1494 = llvm.mul %1493, %1487  : i32
    %1495 = llvm.urem %1285, %1487  : i32
    %1496 = llvm.add %1494, %1495  : i32
    %1497 = llvm.mul %1284, %1044  : i32
    %1498 = llvm.mul %1496, %1045  : i32
    %1499 = llvm.add %1497, %1498  : i32
    %1500 = llvm.mlir.constant(8 : i32) : i32
    %1501 = llvm.mlir.constant(1 : i32) : i32
    %1502 = llvm.mlir.constant(2 : i32) : i32
    %1503 = llvm.udiv %1300, %1501  : i32
    %1504 = llvm.urem %1503, %1502  : i32
    %1505 = llvm.udiv %1301, %1500  : i32
    %1506 = llvm.xor %1505, %1504  : i32
    %1507 = llvm.mul %1506, %1500  : i32
    %1508 = llvm.urem %1301, %1500  : i32
    %1509 = llvm.add %1507, %1508  : i32
    %1510 = llvm.mul %1300, %1044  : i32
    %1511 = llvm.mul %1509, %1045  : i32
    %1512 = llvm.add %1510, %1511  : i32
    %1513 = llvm.mlir.constant(8 : i32) : i32
    %1514 = llvm.mlir.constant(1 : i32) : i32
    %1515 = llvm.mlir.constant(2 : i32) : i32
    %1516 = llvm.udiv %1316, %1514  : i32
    %1517 = llvm.urem %1516, %1515  : i32
    %1518 = llvm.udiv %1317, %1513  : i32
    %1519 = llvm.xor %1518, %1517  : i32
    %1520 = llvm.mul %1519, %1513  : i32
    %1521 = llvm.urem %1317, %1513  : i32
    %1522 = llvm.add %1520, %1521  : i32
    %1523 = llvm.mul %1316, %1044  : i32
    %1524 = llvm.mul %1522, %1045  : i32
    %1525 = llvm.add %1523, %1524  : i32
    %1526 = llvm.mul %1046, %1044  : i32
    %1527 = llvm.mlir.constant(0 : i32) : i32
    %1528 = llvm.sub %1527, %1526  : i32
    %1529 = llvm.getelementptr %1043[%1528] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1530 = llvm.mul %1047, %1045  : i32
    %1531 = llvm.mlir.constant(0 : i32) : i32
    %1532 = llvm.sub %1531, %1530  : i32
    %1533 = llvm.getelementptr %1529[%1532] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1534 = llvm.mlir.undef : vector<1xf32>
    %1535 = llvm.getelementptr %1533[%1330] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1536 = llvm.load %1535 : !llvm.ptr<f32, 3>
    %1537 = llvm.mlir.undef : vector<1xf32>
    %1538 = llvm.getelementptr %1533[%1343] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1539 = llvm.load %1538 : !llvm.ptr<f32, 3>
    %1540 = llvm.mlir.undef : vector<1xf32>
    %1541 = llvm.getelementptr %1533[%1356] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1542 = llvm.load %1541 : !llvm.ptr<f32, 3>
    %1543 = llvm.mlir.undef : vector<1xf32>
    %1544 = llvm.getelementptr %1533[%1369] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1545 = llvm.load %1544 : !llvm.ptr<f32, 3>
    %1546 = llvm.mlir.undef : vector<1xf32>
    %1547 = llvm.getelementptr %1533[%1382] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1548 = llvm.load %1547 : !llvm.ptr<f32, 3>
    %1549 = llvm.mlir.undef : vector<1xf32>
    %1550 = llvm.getelementptr %1533[%1395] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1551 = llvm.load %1550 : !llvm.ptr<f32, 3>
    %1552 = llvm.mlir.undef : vector<1xf32>
    %1553 = llvm.getelementptr %1533[%1408] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1554 = llvm.load %1553 : !llvm.ptr<f32, 3>
    %1555 = llvm.mlir.undef : vector<1xf32>
    %1556 = llvm.getelementptr %1533[%1421] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1557 = llvm.load %1556 : !llvm.ptr<f32, 3>
    %1558 = llvm.mlir.undef : vector<1xf32>
    %1559 = llvm.getelementptr %1533[%1434] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1560 = llvm.load %1559 : !llvm.ptr<f32, 3>
    %1561 = llvm.mlir.undef : vector<1xf32>
    %1562 = llvm.getelementptr %1533[%1447] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1563 = llvm.load %1562 : !llvm.ptr<f32, 3>
    %1564 = llvm.mlir.undef : vector<1xf32>
    %1565 = llvm.getelementptr %1533[%1460] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1566 = llvm.load %1565 : !llvm.ptr<f32, 3>
    %1567 = llvm.mlir.undef : vector<1xf32>
    %1568 = llvm.getelementptr %1533[%1473] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1569 = llvm.load %1568 : !llvm.ptr<f32, 3>
    %1570 = llvm.mlir.undef : vector<1xf32>
    %1571 = llvm.getelementptr %1533[%1486] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1572 = llvm.load %1571 : !llvm.ptr<f32, 3>
    %1573 = llvm.mlir.undef : vector<1xf32>
    %1574 = llvm.getelementptr %1533[%1499] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1575 = llvm.load %1574 : !llvm.ptr<f32, 3>
    %1576 = llvm.mlir.undef : vector<1xf32>
    %1577 = llvm.getelementptr %1533[%1512] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1578 = llvm.load %1577 : !llvm.ptr<f32, 3>
    %1579 = llvm.mlir.undef : vector<1xf32>
    %1580 = llvm.getelementptr %1533[%1525] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1581 = llvm.load %1580 : !llvm.ptr<f32, 3>
    %1582 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>
    %1583 = llvm.insertvalue %1536, %1582[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1584 = llvm.insertvalue %1539, %1583[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1585 = llvm.insertvalue %1542, %1584[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1586 = llvm.insertvalue %1545, %1585[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1587 = llvm.insertvalue %1548, %1586[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1588 = llvm.insertvalue %1551, %1587[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1589 = llvm.insertvalue %1554, %1588[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1590 = llvm.insertvalue %1557, %1589[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1591 = llvm.insertvalue %1560, %1590[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1592 = llvm.insertvalue %1563, %1591[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1593 = llvm.insertvalue %1566, %1592[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1594 = llvm.insertvalue %1569, %1593[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1595 = llvm.insertvalue %1572, %1594[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1596 = llvm.insertvalue %1575, %1595[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1597 = llvm.insertvalue %1578, %1596[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1598 = llvm.insertvalue %1581, %1597[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1599 = llvm.extractvalue %1042[0] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1600 = llvm.extractvalue %1042[1] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1601 = llvm.extractvalue %1042[2] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1602 = llvm.extractvalue %1042[3] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1603 = llvm.extractvalue %1042[4] : !llvm.struct<(ptr<f32, 3>, i32, i32, i32, i32)> 
    %1604 = rocdl.workitem.id.x : i32
    %1605 = llvm.trunc %1604 : i32 to i32
    %1606 = llvm.mlir.constant(64 : i32) : i32
    %1607 = llvm.udiv %1605, %1606  : i32
    %1608 = llvm.urem %1605, %1606  : i32
    %1609 = llvm.mlir.constant(2 : i32) : i32
    %1610 = llvm.udiv %1607, %1609  : i32
    %1611 = llvm.mlir.constant(1 : i32) : i32
    %1612 = llvm.mlir.constant(1 : i32) : i32
    %1613 = llvm.urem %1610, %1612  : i32
    %1614 = llvm.urem %1613, %1611  : i32
    %1615 = llvm.mlir.constant(0 : i32) : i32
    %1616 = llvm.mlir.constant(32 : i32) : i32
    %1617 = llvm.mlir.constant(0 : i32) : i32
    %1618 = llvm.mlir.constant(32 : i32) : i32
    %1619 = llvm.mul %1614, %1618  : i32
    %1620 = llvm.mlir.constant(0 : i32) : i32
    %1621 = llvm.urem %1608, %1616  : i32
    %1622 = llvm.mlir.constant(1 : i32) : i32
    %1623 = llvm.udiv %1608, %1616  : i32
    %1624 = llvm.mul %1623, %1622  : i32
    %1625 = llvm.mlir.constant(0 : i32) : i32
    %1626 = llvm.add %1617, %1619  : i32
    %1627 = llvm.add %1626, %1615  : i32
    %1628 = llvm.add %1627, %1621  : i32
    %1629 = llvm.add %1628, %1615  : i32
    %1630 = llvm.add %1615, %1615  : i32
    %1631 = llvm.add %1630, %1620  : i32
    %1632 = llvm.add %1631, %1624  : i32
    %1633 = llvm.add %1632, %1625  : i32
    %1634 = llvm.add %1629, %1603  : i32
    %1635 = llvm.add %1633, %1602  : i32
    %1636 = llvm.mlir.constant(2 : i32) : i32
    %1637 = llvm.urem %1608, %1616  : i32
    %1638 = llvm.mlir.constant(1 : i32) : i32
    %1639 = llvm.udiv %1608, %1616  : i32
    %1640 = llvm.mul %1639, %1638  : i32
    %1641 = llvm.mlir.constant(0 : i32) : i32
    %1642 = llvm.add %1617, %1619  : i32
    %1643 = llvm.add %1642, %1615  : i32
    %1644 = llvm.add %1643, %1637  : i32
    %1645 = llvm.add %1644, %1615  : i32
    %1646 = llvm.add %1615, %1615  : i32
    %1647 = llvm.add %1646, %1636  : i32
    %1648 = llvm.add %1647, %1640  : i32
    %1649 = llvm.add %1648, %1641  : i32
    %1650 = llvm.add %1645, %1603  : i32
    %1651 = llvm.add %1649, %1602  : i32
    %1652 = llvm.mlir.constant(4 : i32) : i32
    %1653 = llvm.urem %1608, %1616  : i32
    %1654 = llvm.mlir.constant(1 : i32) : i32
    %1655 = llvm.udiv %1608, %1616  : i32
    %1656 = llvm.mul %1655, %1654  : i32
    %1657 = llvm.mlir.constant(0 : i32) : i32
    %1658 = llvm.add %1617, %1619  : i32
    %1659 = llvm.add %1658, %1615  : i32
    %1660 = llvm.add %1659, %1653  : i32
    %1661 = llvm.add %1660, %1615  : i32
    %1662 = llvm.add %1615, %1615  : i32
    %1663 = llvm.add %1662, %1652  : i32
    %1664 = llvm.add %1663, %1656  : i32
    %1665 = llvm.add %1664, %1657  : i32
    %1666 = llvm.add %1661, %1603  : i32
    %1667 = llvm.add %1665, %1602  : i32
    %1668 = llvm.mlir.constant(6 : i32) : i32
    %1669 = llvm.urem %1608, %1616  : i32
    %1670 = llvm.mlir.constant(1 : i32) : i32
    %1671 = llvm.udiv %1608, %1616  : i32
    %1672 = llvm.mul %1671, %1670  : i32
    %1673 = llvm.mlir.constant(0 : i32) : i32
    %1674 = llvm.add %1617, %1619  : i32
    %1675 = llvm.add %1674, %1615  : i32
    %1676 = llvm.add %1675, %1669  : i32
    %1677 = llvm.add %1676, %1615  : i32
    %1678 = llvm.add %1615, %1615  : i32
    %1679 = llvm.add %1678, %1668  : i32
    %1680 = llvm.add %1679, %1672  : i32
    %1681 = llvm.add %1680, %1673  : i32
    %1682 = llvm.add %1677, %1603  : i32
    %1683 = llvm.add %1681, %1602  : i32
    %1684 = llvm.mlir.constant(8 : i32) : i32
    %1685 = llvm.urem %1608, %1616  : i32
    %1686 = llvm.mlir.constant(1 : i32) : i32
    %1687 = llvm.udiv %1608, %1616  : i32
    %1688 = llvm.mul %1687, %1686  : i32
    %1689 = llvm.mlir.constant(0 : i32) : i32
    %1690 = llvm.add %1617, %1619  : i32
    %1691 = llvm.add %1690, %1615  : i32
    %1692 = llvm.add %1691, %1685  : i32
    %1693 = llvm.add %1692, %1615  : i32
    %1694 = llvm.add %1615, %1615  : i32
    %1695 = llvm.add %1694, %1684  : i32
    %1696 = llvm.add %1695, %1688  : i32
    %1697 = llvm.add %1696, %1689  : i32
    %1698 = llvm.add %1693, %1603  : i32
    %1699 = llvm.add %1697, %1602  : i32
    %1700 = llvm.mlir.constant(10 : i32) : i32
    %1701 = llvm.urem %1608, %1616  : i32
    %1702 = llvm.mlir.constant(1 : i32) : i32
    %1703 = llvm.udiv %1608, %1616  : i32
    %1704 = llvm.mul %1703, %1702  : i32
    %1705 = llvm.mlir.constant(0 : i32) : i32
    %1706 = llvm.add %1617, %1619  : i32
    %1707 = llvm.add %1706, %1615  : i32
    %1708 = llvm.add %1707, %1701  : i32
    %1709 = llvm.add %1708, %1615  : i32
    %1710 = llvm.add %1615, %1615  : i32
    %1711 = llvm.add %1710, %1700  : i32
    %1712 = llvm.add %1711, %1704  : i32
    %1713 = llvm.add %1712, %1705  : i32
    %1714 = llvm.add %1709, %1603  : i32
    %1715 = llvm.add %1713, %1602  : i32
    %1716 = llvm.mlir.constant(12 : i32) : i32
    %1717 = llvm.urem %1608, %1616  : i32
    %1718 = llvm.mlir.constant(1 : i32) : i32
    %1719 = llvm.udiv %1608, %1616  : i32
    %1720 = llvm.mul %1719, %1718  : i32
    %1721 = llvm.mlir.constant(0 : i32) : i32
    %1722 = llvm.add %1617, %1619  : i32
    %1723 = llvm.add %1722, %1615  : i32
    %1724 = llvm.add %1723, %1717  : i32
    %1725 = llvm.add %1724, %1615  : i32
    %1726 = llvm.add %1615, %1615  : i32
    %1727 = llvm.add %1726, %1716  : i32
    %1728 = llvm.add %1727, %1720  : i32
    %1729 = llvm.add %1728, %1721  : i32
    %1730 = llvm.add %1725, %1603  : i32
    %1731 = llvm.add %1729, %1602  : i32
    %1732 = llvm.mlir.constant(14 : i32) : i32
    %1733 = llvm.urem %1608, %1616  : i32
    %1734 = llvm.mlir.constant(1 : i32) : i32
    %1735 = llvm.udiv %1608, %1616  : i32
    %1736 = llvm.mul %1735, %1734  : i32
    %1737 = llvm.mlir.constant(0 : i32) : i32
    %1738 = llvm.add %1617, %1619  : i32
    %1739 = llvm.add %1738, %1615  : i32
    %1740 = llvm.add %1739, %1733  : i32
    %1741 = llvm.add %1740, %1615  : i32
    %1742 = llvm.add %1615, %1615  : i32
    %1743 = llvm.add %1742, %1732  : i32
    %1744 = llvm.add %1743, %1736  : i32
    %1745 = llvm.add %1744, %1737  : i32
    %1746 = llvm.add %1741, %1603  : i32
    %1747 = llvm.add %1745, %1602  : i32
    %1748 = llvm.mlir.constant(16 : i32) : i32
    %1749 = llvm.urem %1608, %1616  : i32
    %1750 = llvm.mlir.constant(1 : i32) : i32
    %1751 = llvm.udiv %1608, %1616  : i32
    %1752 = llvm.mul %1751, %1750  : i32
    %1753 = llvm.mlir.constant(0 : i32) : i32
    %1754 = llvm.add %1617, %1619  : i32
    %1755 = llvm.add %1754, %1615  : i32
    %1756 = llvm.add %1755, %1749  : i32
    %1757 = llvm.add %1756, %1615  : i32
    %1758 = llvm.add %1615, %1615  : i32
    %1759 = llvm.add %1758, %1748  : i32
    %1760 = llvm.add %1759, %1752  : i32
    %1761 = llvm.add %1760, %1753  : i32
    %1762 = llvm.add %1757, %1603  : i32
    %1763 = llvm.add %1761, %1602  : i32
    %1764 = llvm.mlir.constant(18 : i32) : i32
    %1765 = llvm.urem %1608, %1616  : i32
    %1766 = llvm.mlir.constant(1 : i32) : i32
    %1767 = llvm.udiv %1608, %1616  : i32
    %1768 = llvm.mul %1767, %1766  : i32
    %1769 = llvm.mlir.constant(0 : i32) : i32
    %1770 = llvm.add %1617, %1619  : i32
    %1771 = llvm.add %1770, %1615  : i32
    %1772 = llvm.add %1771, %1765  : i32
    %1773 = llvm.add %1772, %1615  : i32
    %1774 = llvm.add %1615, %1615  : i32
    %1775 = llvm.add %1774, %1764  : i32
    %1776 = llvm.add %1775, %1768  : i32
    %1777 = llvm.add %1776, %1769  : i32
    %1778 = llvm.add %1773, %1603  : i32
    %1779 = llvm.add %1777, %1602  : i32
    %1780 = llvm.mlir.constant(20 : i32) : i32
    %1781 = llvm.urem %1608, %1616  : i32
    %1782 = llvm.mlir.constant(1 : i32) : i32
    %1783 = llvm.udiv %1608, %1616  : i32
    %1784 = llvm.mul %1783, %1782  : i32
    %1785 = llvm.mlir.constant(0 : i32) : i32
    %1786 = llvm.add %1617, %1619  : i32
    %1787 = llvm.add %1786, %1615  : i32
    %1788 = llvm.add %1787, %1781  : i32
    %1789 = llvm.add %1788, %1615  : i32
    %1790 = llvm.add %1615, %1615  : i32
    %1791 = llvm.add %1790, %1780  : i32
    %1792 = llvm.add %1791, %1784  : i32
    %1793 = llvm.add %1792, %1785  : i32
    %1794 = llvm.add %1789, %1603  : i32
    %1795 = llvm.add %1793, %1602  : i32
    %1796 = llvm.mlir.constant(22 : i32) : i32
    %1797 = llvm.urem %1608, %1616  : i32
    %1798 = llvm.mlir.constant(1 : i32) : i32
    %1799 = llvm.udiv %1608, %1616  : i32
    %1800 = llvm.mul %1799, %1798  : i32
    %1801 = llvm.mlir.constant(0 : i32) : i32
    %1802 = llvm.add %1617, %1619  : i32
    %1803 = llvm.add %1802, %1615  : i32
    %1804 = llvm.add %1803, %1797  : i32
    %1805 = llvm.add %1804, %1615  : i32
    %1806 = llvm.add %1615, %1615  : i32
    %1807 = llvm.add %1806, %1796  : i32
    %1808 = llvm.add %1807, %1800  : i32
    %1809 = llvm.add %1808, %1801  : i32
    %1810 = llvm.add %1805, %1603  : i32
    %1811 = llvm.add %1809, %1602  : i32
    %1812 = llvm.mlir.constant(24 : i32) : i32
    %1813 = llvm.urem %1608, %1616  : i32
    %1814 = llvm.mlir.constant(1 : i32) : i32
    %1815 = llvm.udiv %1608, %1616  : i32
    %1816 = llvm.mul %1815, %1814  : i32
    %1817 = llvm.mlir.constant(0 : i32) : i32
    %1818 = llvm.add %1617, %1619  : i32
    %1819 = llvm.add %1818, %1615  : i32
    %1820 = llvm.add %1819, %1813  : i32
    %1821 = llvm.add %1820, %1615  : i32
    %1822 = llvm.add %1615, %1615  : i32
    %1823 = llvm.add %1822, %1812  : i32
    %1824 = llvm.add %1823, %1816  : i32
    %1825 = llvm.add %1824, %1817  : i32
    %1826 = llvm.add %1821, %1603  : i32
    %1827 = llvm.add %1825, %1602  : i32
    %1828 = llvm.mlir.constant(26 : i32) : i32
    %1829 = llvm.urem %1608, %1616  : i32
    %1830 = llvm.mlir.constant(1 : i32) : i32
    %1831 = llvm.udiv %1608, %1616  : i32
    %1832 = llvm.mul %1831, %1830  : i32
    %1833 = llvm.mlir.constant(0 : i32) : i32
    %1834 = llvm.add %1617, %1619  : i32
    %1835 = llvm.add %1834, %1615  : i32
    %1836 = llvm.add %1835, %1829  : i32
    %1837 = llvm.add %1836, %1615  : i32
    %1838 = llvm.add %1615, %1615  : i32
    %1839 = llvm.add %1838, %1828  : i32
    %1840 = llvm.add %1839, %1832  : i32
    %1841 = llvm.add %1840, %1833  : i32
    %1842 = llvm.add %1837, %1603  : i32
    %1843 = llvm.add %1841, %1602  : i32
    %1844 = llvm.mlir.constant(28 : i32) : i32
    %1845 = llvm.urem %1608, %1616  : i32
    %1846 = llvm.mlir.constant(1 : i32) : i32
    %1847 = llvm.udiv %1608, %1616  : i32
    %1848 = llvm.mul %1847, %1846  : i32
    %1849 = llvm.mlir.constant(0 : i32) : i32
    %1850 = llvm.add %1617, %1619  : i32
    %1851 = llvm.add %1850, %1615  : i32
    %1852 = llvm.add %1851, %1845  : i32
    %1853 = llvm.add %1852, %1615  : i32
    %1854 = llvm.add %1615, %1615  : i32
    %1855 = llvm.add %1854, %1844  : i32
    %1856 = llvm.add %1855, %1848  : i32
    %1857 = llvm.add %1856, %1849  : i32
    %1858 = llvm.add %1853, %1603  : i32
    %1859 = llvm.add %1857, %1602  : i32
    %1860 = llvm.mlir.constant(30 : i32) : i32
    %1861 = llvm.urem %1608, %1616  : i32
    %1862 = llvm.mlir.constant(1 : i32) : i32
    %1863 = llvm.udiv %1608, %1616  : i32
    %1864 = llvm.mul %1863, %1862  : i32
    %1865 = llvm.mlir.constant(0 : i32) : i32
    %1866 = llvm.add %1617, %1619  : i32
    %1867 = llvm.add %1866, %1615  : i32
    %1868 = llvm.add %1867, %1861  : i32
    %1869 = llvm.add %1868, %1615  : i32
    %1870 = llvm.add %1615, %1615  : i32
    %1871 = llvm.add %1870, %1860  : i32
    %1872 = llvm.add %1871, %1864  : i32
    %1873 = llvm.add %1872, %1865  : i32
    %1874 = llvm.add %1869, %1603  : i32
    %1875 = llvm.add %1873, %1602  : i32
    %1876 = llvm.mlir.constant(2 : i32) : i32
    %1877 = llvm.mlir.constant(1 : i32) : i32
    %1878 = llvm.mlir.constant(2 : i32) : i32
    %1879 = llvm.udiv %1635, %1877  : i32
    %1880 = llvm.urem %1879, %1878  : i32
    %1881 = llvm.udiv %1634, %1876  : i32
    %1882 = llvm.xor %1881, %1880  : i32
    %1883 = llvm.mul %1882, %1876  : i32
    %1884 = llvm.urem %1634, %1876  : i32
    %1885 = llvm.add %1883, %1884  : i32
    %1886 = llvm.mul %1635, %1600  : i32
    %1887 = llvm.mul %1885, %1601  : i32
    %1888 = llvm.add %1886, %1887  : i32
    %1889 = llvm.mlir.constant(2 : i32) : i32
    %1890 = llvm.mlir.constant(1 : i32) : i32
    %1891 = llvm.mlir.constant(2 : i32) : i32
    %1892 = llvm.udiv %1651, %1890  : i32
    %1893 = llvm.urem %1892, %1891  : i32
    %1894 = llvm.udiv %1650, %1889  : i32
    %1895 = llvm.xor %1894, %1893  : i32
    %1896 = llvm.mul %1895, %1889  : i32
    %1897 = llvm.urem %1650, %1889  : i32
    %1898 = llvm.add %1896, %1897  : i32
    %1899 = llvm.mul %1651, %1600  : i32
    %1900 = llvm.mul %1898, %1601  : i32
    %1901 = llvm.add %1899, %1900  : i32
    %1902 = llvm.mlir.constant(2 : i32) : i32
    %1903 = llvm.mlir.constant(1 : i32) : i32
    %1904 = llvm.mlir.constant(2 : i32) : i32
    %1905 = llvm.udiv %1667, %1903  : i32
    %1906 = llvm.urem %1905, %1904  : i32
    %1907 = llvm.udiv %1666, %1902  : i32
    %1908 = llvm.xor %1907, %1906  : i32
    %1909 = llvm.mul %1908, %1902  : i32
    %1910 = llvm.urem %1666, %1902  : i32
    %1911 = llvm.add %1909, %1910  : i32
    %1912 = llvm.mul %1667, %1600  : i32
    %1913 = llvm.mul %1911, %1601  : i32
    %1914 = llvm.add %1912, %1913  : i32
    %1915 = llvm.mlir.constant(2 : i32) : i32
    %1916 = llvm.mlir.constant(1 : i32) : i32
    %1917 = llvm.mlir.constant(2 : i32) : i32
    %1918 = llvm.udiv %1683, %1916  : i32
    %1919 = llvm.urem %1918, %1917  : i32
    %1920 = llvm.udiv %1682, %1915  : i32
    %1921 = llvm.xor %1920, %1919  : i32
    %1922 = llvm.mul %1921, %1915  : i32
    %1923 = llvm.urem %1682, %1915  : i32
    %1924 = llvm.add %1922, %1923  : i32
    %1925 = llvm.mul %1683, %1600  : i32
    %1926 = llvm.mul %1924, %1601  : i32
    %1927 = llvm.add %1925, %1926  : i32
    %1928 = llvm.mlir.constant(2 : i32) : i32
    %1929 = llvm.mlir.constant(1 : i32) : i32
    %1930 = llvm.mlir.constant(2 : i32) : i32
    %1931 = llvm.udiv %1699, %1929  : i32
    %1932 = llvm.urem %1931, %1930  : i32
    %1933 = llvm.udiv %1698, %1928  : i32
    %1934 = llvm.xor %1933, %1932  : i32
    %1935 = llvm.mul %1934, %1928  : i32
    %1936 = llvm.urem %1698, %1928  : i32
    %1937 = llvm.add %1935, %1936  : i32
    %1938 = llvm.mul %1699, %1600  : i32
    %1939 = llvm.mul %1937, %1601  : i32
    %1940 = llvm.add %1938, %1939  : i32
    %1941 = llvm.mlir.constant(2 : i32) : i32
    %1942 = llvm.mlir.constant(1 : i32) : i32
    %1943 = llvm.mlir.constant(2 : i32) : i32
    %1944 = llvm.udiv %1715, %1942  : i32
    %1945 = llvm.urem %1944, %1943  : i32
    %1946 = llvm.udiv %1714, %1941  : i32
    %1947 = llvm.xor %1946, %1945  : i32
    %1948 = llvm.mul %1947, %1941  : i32
    %1949 = llvm.urem %1714, %1941  : i32
    %1950 = llvm.add %1948, %1949  : i32
    %1951 = llvm.mul %1715, %1600  : i32
    %1952 = llvm.mul %1950, %1601  : i32
    %1953 = llvm.add %1951, %1952  : i32
    %1954 = llvm.mlir.constant(2 : i32) : i32
    %1955 = llvm.mlir.constant(1 : i32) : i32
    %1956 = llvm.mlir.constant(2 : i32) : i32
    %1957 = llvm.udiv %1731, %1955  : i32
    %1958 = llvm.urem %1957, %1956  : i32
    %1959 = llvm.udiv %1730, %1954  : i32
    %1960 = llvm.xor %1959, %1958  : i32
    %1961 = llvm.mul %1960, %1954  : i32
    %1962 = llvm.urem %1730, %1954  : i32
    %1963 = llvm.add %1961, %1962  : i32
    %1964 = llvm.mul %1731, %1600  : i32
    %1965 = llvm.mul %1963, %1601  : i32
    %1966 = llvm.add %1964, %1965  : i32
    %1967 = llvm.mlir.constant(2 : i32) : i32
    %1968 = llvm.mlir.constant(1 : i32) : i32
    %1969 = llvm.mlir.constant(2 : i32) : i32
    %1970 = llvm.udiv %1747, %1968  : i32
    %1971 = llvm.urem %1970, %1969  : i32
    %1972 = llvm.udiv %1746, %1967  : i32
    %1973 = llvm.xor %1972, %1971  : i32
    %1974 = llvm.mul %1973, %1967  : i32
    %1975 = llvm.urem %1746, %1967  : i32
    %1976 = llvm.add %1974, %1975  : i32
    %1977 = llvm.mul %1747, %1600  : i32
    %1978 = llvm.mul %1976, %1601  : i32
    %1979 = llvm.add %1977, %1978  : i32
    %1980 = llvm.mlir.constant(2 : i32) : i32
    %1981 = llvm.mlir.constant(1 : i32) : i32
    %1982 = llvm.mlir.constant(2 : i32) : i32
    %1983 = llvm.udiv %1763, %1981  : i32
    %1984 = llvm.urem %1983, %1982  : i32
    %1985 = llvm.udiv %1762, %1980  : i32
    %1986 = llvm.xor %1985, %1984  : i32
    %1987 = llvm.mul %1986, %1980  : i32
    %1988 = llvm.urem %1762, %1980  : i32
    %1989 = llvm.add %1987, %1988  : i32
    %1990 = llvm.mul %1763, %1600  : i32
    %1991 = llvm.mul %1989, %1601  : i32
    %1992 = llvm.add %1990, %1991  : i32
    %1993 = llvm.mlir.constant(2 : i32) : i32
    %1994 = llvm.mlir.constant(1 : i32) : i32
    %1995 = llvm.mlir.constant(2 : i32) : i32
    %1996 = llvm.udiv %1779, %1994  : i32
    %1997 = llvm.urem %1996, %1995  : i32
    %1998 = llvm.udiv %1778, %1993  : i32
    %1999 = llvm.xor %1998, %1997  : i32
    %2000 = llvm.mul %1999, %1993  : i32
    %2001 = llvm.urem %1778, %1993  : i32
    %2002 = llvm.add %2000, %2001  : i32
    %2003 = llvm.mul %1779, %1600  : i32
    %2004 = llvm.mul %2002, %1601  : i32
    %2005 = llvm.add %2003, %2004  : i32
    %2006 = llvm.mlir.constant(2 : i32) : i32
    %2007 = llvm.mlir.constant(1 : i32) : i32
    %2008 = llvm.mlir.constant(2 : i32) : i32
    %2009 = llvm.udiv %1795, %2007  : i32
    %2010 = llvm.urem %2009, %2008  : i32
    %2011 = llvm.udiv %1794, %2006  : i32
    %2012 = llvm.xor %2011, %2010  : i32
    %2013 = llvm.mul %2012, %2006  : i32
    %2014 = llvm.urem %1794, %2006  : i32
    %2015 = llvm.add %2013, %2014  : i32
    %2016 = llvm.mul %1795, %1600  : i32
    %2017 = llvm.mul %2015, %1601  : i32
    %2018 = llvm.add %2016, %2017  : i32
    %2019 = llvm.mlir.constant(2 : i32) : i32
    %2020 = llvm.mlir.constant(1 : i32) : i32
    %2021 = llvm.mlir.constant(2 : i32) : i32
    %2022 = llvm.udiv %1811, %2020  : i32
    %2023 = llvm.urem %2022, %2021  : i32
    %2024 = llvm.udiv %1810, %2019  : i32
    %2025 = llvm.xor %2024, %2023  : i32
    %2026 = llvm.mul %2025, %2019  : i32
    %2027 = llvm.urem %1810, %2019  : i32
    %2028 = llvm.add %2026, %2027  : i32
    %2029 = llvm.mul %1811, %1600  : i32
    %2030 = llvm.mul %2028, %1601  : i32
    %2031 = llvm.add %2029, %2030  : i32
    %2032 = llvm.mlir.constant(2 : i32) : i32
    %2033 = llvm.mlir.constant(1 : i32) : i32
    %2034 = llvm.mlir.constant(2 : i32) : i32
    %2035 = llvm.udiv %1827, %2033  : i32
    %2036 = llvm.urem %2035, %2034  : i32
    %2037 = llvm.udiv %1826, %2032  : i32
    %2038 = llvm.xor %2037, %2036  : i32
    %2039 = llvm.mul %2038, %2032  : i32
    %2040 = llvm.urem %1826, %2032  : i32
    %2041 = llvm.add %2039, %2040  : i32
    %2042 = llvm.mul %1827, %1600  : i32
    %2043 = llvm.mul %2041, %1601  : i32
    %2044 = llvm.add %2042, %2043  : i32
    %2045 = llvm.mlir.constant(2 : i32) : i32
    %2046 = llvm.mlir.constant(1 : i32) : i32
    %2047 = llvm.mlir.constant(2 : i32) : i32
    %2048 = llvm.udiv %1843, %2046  : i32
    %2049 = llvm.urem %2048, %2047  : i32
    %2050 = llvm.udiv %1842, %2045  : i32
    %2051 = llvm.xor %2050, %2049  : i32
    %2052 = llvm.mul %2051, %2045  : i32
    %2053 = llvm.urem %1842, %2045  : i32
    %2054 = llvm.add %2052, %2053  : i32
    %2055 = llvm.mul %1843, %1600  : i32
    %2056 = llvm.mul %2054, %1601  : i32
    %2057 = llvm.add %2055, %2056  : i32
    %2058 = llvm.mlir.constant(2 : i32) : i32
    %2059 = llvm.mlir.constant(1 : i32) : i32
    %2060 = llvm.mlir.constant(2 : i32) : i32
    %2061 = llvm.udiv %1859, %2059  : i32
    %2062 = llvm.urem %2061, %2060  : i32
    %2063 = llvm.udiv %1858, %2058  : i32
    %2064 = llvm.xor %2063, %2062  : i32
    %2065 = llvm.mul %2064, %2058  : i32
    %2066 = llvm.urem %1858, %2058  : i32
    %2067 = llvm.add %2065, %2066  : i32
    %2068 = llvm.mul %1859, %1600  : i32
    %2069 = llvm.mul %2067, %1601  : i32
    %2070 = llvm.add %2068, %2069  : i32
    %2071 = llvm.mlir.constant(2 : i32) : i32
    %2072 = llvm.mlir.constant(1 : i32) : i32
    %2073 = llvm.mlir.constant(2 : i32) : i32
    %2074 = llvm.udiv %1875, %2072  : i32
    %2075 = llvm.urem %2074, %2073  : i32
    %2076 = llvm.udiv %1874, %2071  : i32
    %2077 = llvm.xor %2076, %2075  : i32
    %2078 = llvm.mul %2077, %2071  : i32
    %2079 = llvm.urem %1874, %2071  : i32
    %2080 = llvm.add %2078, %2079  : i32
    %2081 = llvm.mul %1875, %1600  : i32
    %2082 = llvm.mul %2080, %1601  : i32
    %2083 = llvm.add %2081, %2082  : i32
    %2084 = llvm.mul %1602, %1600  : i32
    %2085 = llvm.mlir.constant(0 : i32) : i32
    %2086 = llvm.sub %2085, %2084  : i32
    %2087 = llvm.getelementptr %1599[%2086] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2088 = llvm.mul %1603, %1601  : i32
    %2089 = llvm.mlir.constant(0 : i32) : i32
    %2090 = llvm.sub %2089, %2088  : i32
    %2091 = llvm.getelementptr %2087[%2090] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2092 = llvm.mlir.undef : vector<1xf32>
    %2093 = llvm.getelementptr %2091[%1888] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2094 = llvm.load %2093 : !llvm.ptr<f32, 3>
    %2095 = llvm.mlir.undef : vector<1xf32>
    %2096 = llvm.getelementptr %2091[%1901] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2097 = llvm.load %2096 : !llvm.ptr<f32, 3>
    %2098 = llvm.mlir.undef : vector<1xf32>
    %2099 = llvm.getelementptr %2091[%1914] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2100 = llvm.load %2099 : !llvm.ptr<f32, 3>
    %2101 = llvm.mlir.undef : vector<1xf32>
    %2102 = llvm.getelementptr %2091[%1927] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2103 = llvm.load %2102 : !llvm.ptr<f32, 3>
    %2104 = llvm.mlir.undef : vector<1xf32>
    %2105 = llvm.getelementptr %2091[%1940] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2106 = llvm.load %2105 : !llvm.ptr<f32, 3>
    %2107 = llvm.mlir.undef : vector<1xf32>
    %2108 = llvm.getelementptr %2091[%1953] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2109 = llvm.load %2108 : !llvm.ptr<f32, 3>
    %2110 = llvm.mlir.undef : vector<1xf32>
    %2111 = llvm.getelementptr %2091[%1966] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2112 = llvm.load %2111 : !llvm.ptr<f32, 3>
    %2113 = llvm.mlir.undef : vector<1xf32>
    %2114 = llvm.getelementptr %2091[%1979] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2115 = llvm.load %2114 : !llvm.ptr<f32, 3>
    %2116 = llvm.mlir.undef : vector<1xf32>
    %2117 = llvm.getelementptr %2091[%1992] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2118 = llvm.load %2117 : !llvm.ptr<f32, 3>
    %2119 = llvm.mlir.undef : vector<1xf32>
    %2120 = llvm.getelementptr %2091[%2005] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2121 = llvm.load %2120 : !llvm.ptr<f32, 3>
    %2122 = llvm.mlir.undef : vector<1xf32>
    %2123 = llvm.getelementptr %2091[%2018] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2124 = llvm.load %2123 : !llvm.ptr<f32, 3>
    %2125 = llvm.mlir.undef : vector<1xf32>
    %2126 = llvm.getelementptr %2091[%2031] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2127 = llvm.load %2126 : !llvm.ptr<f32, 3>
    %2128 = llvm.mlir.undef : vector<1xf32>
    %2129 = llvm.getelementptr %2091[%2044] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2130 = llvm.load %2129 : !llvm.ptr<f32, 3>
    %2131 = llvm.mlir.undef : vector<1xf32>
    %2132 = llvm.getelementptr %2091[%2057] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2133 = llvm.load %2132 : !llvm.ptr<f32, 3>
    %2134 = llvm.mlir.undef : vector<1xf32>
    %2135 = llvm.getelementptr %2091[%2070] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2136 = llvm.load %2135 : !llvm.ptr<f32, 3>
    %2137 = llvm.mlir.undef : vector<1xf32>
    %2138 = llvm.getelementptr %2091[%2083] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2139 = llvm.load %2138 : !llvm.ptr<f32, 3>
    %2140 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>
    %2141 = llvm.insertvalue %2094, %2140[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2142 = llvm.insertvalue %2097, %2141[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2143 = llvm.insertvalue %2100, %2142[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2144 = llvm.insertvalue %2103, %2143[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2145 = llvm.insertvalue %2106, %2144[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2146 = llvm.insertvalue %2109, %2145[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2147 = llvm.insertvalue %2112, %2146[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2148 = llvm.insertvalue %2115, %2147[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2149 = llvm.insertvalue %2118, %2148[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2150 = llvm.insertvalue %2121, %2149[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2151 = llvm.insertvalue %2124, %2150[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2152 = llvm.insertvalue %2127, %2151[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2153 = llvm.insertvalue %2130, %2152[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2154 = llvm.insertvalue %2133, %2153[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2155 = llvm.insertvalue %2136, %2154[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2156 = llvm.insertvalue %2139, %2155[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2157 = llvm.extractvalue %1598[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2158 = llvm.extractvalue %1598[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2159 = llvm.extractvalue %1598[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2160 = llvm.extractvalue %1598[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2161 = llvm.extractvalue %1598[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2162 = llvm.extractvalue %1598[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2163 = llvm.extractvalue %1598[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2164 = llvm.extractvalue %1598[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2165 = llvm.extractvalue %1598[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2166 = llvm.extractvalue %1598[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2167 = llvm.extractvalue %1598[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2168 = llvm.extractvalue %1598[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2169 = llvm.extractvalue %1598[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2170 = llvm.extractvalue %1598[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2171 = llvm.extractvalue %1598[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2172 = llvm.extractvalue %1598[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2173 = llvm.extractvalue %2156[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2174 = llvm.extractvalue %2156[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2175 = llvm.extractvalue %2156[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2176 = llvm.extractvalue %2156[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2177 = llvm.extractvalue %2156[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2178 = llvm.extractvalue %2156[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2179 = llvm.extractvalue %2156[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2180 = llvm.extractvalue %2156[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2181 = llvm.extractvalue %2156[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2182 = llvm.extractvalue %2156[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2183 = llvm.extractvalue %2156[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2184 = llvm.extractvalue %2156[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2185 = llvm.extractvalue %2156[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2186 = llvm.extractvalue %2156[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2187 = llvm.extractvalue %2156[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2188 = llvm.extractvalue %2156[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2189 = llvm.extractvalue %213[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2190 = llvm.extractvalue %213[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2191 = llvm.extractvalue %213[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2192 = llvm.extractvalue %213[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2193 = llvm.extractvalue %213[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2194 = llvm.extractvalue %213[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2195 = llvm.extractvalue %213[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2196 = llvm.extractvalue %213[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2197 = llvm.extractvalue %213[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2198 = llvm.extractvalue %213[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2199 = llvm.extractvalue %213[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2200 = llvm.extractvalue %213[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2201 = llvm.extractvalue %213[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2202 = llvm.extractvalue %213[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2203 = llvm.extractvalue %213[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2204 = llvm.extractvalue %213[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2205 = llvm.mlir.undef : vector<16xf32>
    %2206 = llvm.mlir.constant(0 : i32) : i32
    %2207 = llvm.insertelement %2189, %2205[%2206 : i32] : vector<16xf32>
    %2208 = llvm.mlir.constant(1 : i32) : i32
    %2209 = llvm.insertelement %2190, %2207[%2208 : i32] : vector<16xf32>
    %2210 = llvm.mlir.constant(2 : i32) : i32
    %2211 = llvm.insertelement %2191, %2209[%2210 : i32] : vector<16xf32>
    %2212 = llvm.mlir.constant(3 : i32) : i32
    %2213 = llvm.insertelement %2192, %2211[%2212 : i32] : vector<16xf32>
    %2214 = llvm.mlir.constant(4 : i32) : i32
    %2215 = llvm.insertelement %2193, %2213[%2214 : i32] : vector<16xf32>
    %2216 = llvm.mlir.constant(5 : i32) : i32
    %2217 = llvm.insertelement %2194, %2215[%2216 : i32] : vector<16xf32>
    %2218 = llvm.mlir.constant(6 : i32) : i32
    %2219 = llvm.insertelement %2195, %2217[%2218 : i32] : vector<16xf32>
    %2220 = llvm.mlir.constant(7 : i32) : i32
    %2221 = llvm.insertelement %2196, %2219[%2220 : i32] : vector<16xf32>
    %2222 = llvm.mlir.constant(8 : i32) : i32
    %2223 = llvm.insertelement %2197, %2221[%2222 : i32] : vector<16xf32>
    %2224 = llvm.mlir.constant(9 : i32) : i32
    %2225 = llvm.insertelement %2198, %2223[%2224 : i32] : vector<16xf32>
    %2226 = llvm.mlir.constant(10 : i32) : i32
    %2227 = llvm.insertelement %2199, %2225[%2226 : i32] : vector<16xf32>
    %2228 = llvm.mlir.constant(11 : i32) : i32
    %2229 = llvm.insertelement %2200, %2227[%2228 : i32] : vector<16xf32>
    %2230 = llvm.mlir.constant(12 : i32) : i32
    %2231 = llvm.insertelement %2201, %2229[%2230 : i32] : vector<16xf32>
    %2232 = llvm.mlir.constant(13 : i32) : i32
    %2233 = llvm.insertelement %2202, %2231[%2232 : i32] : vector<16xf32>
    %2234 = llvm.mlir.constant(14 : i32) : i32
    %2235 = llvm.insertelement %2203, %2233[%2234 : i32] : vector<16xf32>
    %2236 = llvm.mlir.constant(15 : i32) : i32
    %2237 = llvm.insertelement %2204, %2235[%2236 : i32] : vector<16xf32>
    %2238 = llvm.mlir.constant(0 : i32) : i32
    %2239 = rocdl.mfma.f32.32x32x2f32 %2157, %2173, %2237, %2238, %2238, %2238 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2240 = llvm.mlir.constant(0 : i32) : i32
    %2241 = rocdl.mfma.f32.32x32x2f32 %2158, %2174, %2239, %2240, %2240, %2240 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2242 = llvm.mlir.constant(0 : i32) : i32
    %2243 = rocdl.mfma.f32.32x32x2f32 %2159, %2175, %2241, %2242, %2242, %2242 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2244 = llvm.mlir.constant(0 : i32) : i32
    %2245 = rocdl.mfma.f32.32x32x2f32 %2160, %2176, %2243, %2244, %2244, %2244 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2246 = llvm.mlir.constant(0 : i32) : i32
    %2247 = rocdl.mfma.f32.32x32x2f32 %2161, %2177, %2245, %2246, %2246, %2246 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2248 = llvm.mlir.constant(0 : i32) : i32
    %2249 = rocdl.mfma.f32.32x32x2f32 %2162, %2178, %2247, %2248, %2248, %2248 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2250 = llvm.mlir.constant(0 : i32) : i32
    %2251 = rocdl.mfma.f32.32x32x2f32 %2163, %2179, %2249, %2250, %2250, %2250 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2252 = llvm.mlir.constant(0 : i32) : i32
    %2253 = rocdl.mfma.f32.32x32x2f32 %2164, %2180, %2251, %2252, %2252, %2252 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2254 = llvm.mlir.constant(0 : i32) : i32
    %2255 = rocdl.mfma.f32.32x32x2f32 %2165, %2181, %2253, %2254, %2254, %2254 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2256 = llvm.mlir.constant(0 : i32) : i32
    %2257 = rocdl.mfma.f32.32x32x2f32 %2166, %2182, %2255, %2256, %2256, %2256 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2258 = llvm.mlir.constant(0 : i32) : i32
    %2259 = rocdl.mfma.f32.32x32x2f32 %2167, %2183, %2257, %2258, %2258, %2258 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2260 = llvm.mlir.constant(0 : i32) : i32
    %2261 = rocdl.mfma.f32.32x32x2f32 %2168, %2184, %2259, %2260, %2260, %2260 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2262 = llvm.mlir.constant(0 : i32) : i32
    %2263 = rocdl.mfma.f32.32x32x2f32 %2169, %2185, %2261, %2262, %2262, %2262 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2264 = llvm.mlir.constant(0 : i32) : i32
    %2265 = rocdl.mfma.f32.32x32x2f32 %2170, %2186, %2263, %2264, %2264, %2264 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2266 = llvm.mlir.constant(0 : i32) : i32
    %2267 = rocdl.mfma.f32.32x32x2f32 %2171, %2187, %2265, %2266, %2266, %2266 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2268 = llvm.mlir.constant(0 : i32) : i32
    %2269 = rocdl.mfma.f32.32x32x2f32 %2172, %2188, %2267, %2268, %2268, %2268 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %2270 = llvm.mlir.constant(0 : i32) : i32
    %2271 = llvm.extractelement %2269[%2270 : i32] : vector<16xf32>
    %2272 = llvm.mlir.constant(1 : i32) : i32
    %2273 = llvm.extractelement %2269[%2272 : i32] : vector<16xf32>
    %2274 = llvm.mlir.constant(2 : i32) : i32
    %2275 = llvm.extractelement %2269[%2274 : i32] : vector<16xf32>
    %2276 = llvm.mlir.constant(3 : i32) : i32
    %2277 = llvm.extractelement %2269[%2276 : i32] : vector<16xf32>
    %2278 = llvm.mlir.constant(4 : i32) : i32
    %2279 = llvm.extractelement %2269[%2278 : i32] : vector<16xf32>
    %2280 = llvm.mlir.constant(5 : i32) : i32
    %2281 = llvm.extractelement %2269[%2280 : i32] : vector<16xf32>
    %2282 = llvm.mlir.constant(6 : i32) : i32
    %2283 = llvm.extractelement %2269[%2282 : i32] : vector<16xf32>
    %2284 = llvm.mlir.constant(7 : i32) : i32
    %2285 = llvm.extractelement %2269[%2284 : i32] : vector<16xf32>
    %2286 = llvm.mlir.constant(8 : i32) : i32
    %2287 = llvm.extractelement %2269[%2286 : i32] : vector<16xf32>
    %2288 = llvm.mlir.constant(9 : i32) : i32
    %2289 = llvm.extractelement %2269[%2288 : i32] : vector<16xf32>
    %2290 = llvm.mlir.constant(10 : i32) : i32
    %2291 = llvm.extractelement %2269[%2290 : i32] : vector<16xf32>
    %2292 = llvm.mlir.constant(11 : i32) : i32
    %2293 = llvm.extractelement %2269[%2292 : i32] : vector<16xf32>
    %2294 = llvm.mlir.constant(12 : i32) : i32
    %2295 = llvm.extractelement %2269[%2294 : i32] : vector<16xf32>
    %2296 = llvm.mlir.constant(13 : i32) : i32
    %2297 = llvm.extractelement %2269[%2296 : i32] : vector<16xf32>
    %2298 = llvm.mlir.constant(14 : i32) : i32
    %2299 = llvm.extractelement %2269[%2298 : i32] : vector<16xf32>
    %2300 = llvm.mlir.constant(15 : i32) : i32
    %2301 = llvm.extractelement %2269[%2300 : i32] : vector<16xf32>
    %2302 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>
    %2303 = llvm.insertvalue %2271, %2302[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2304 = llvm.insertvalue %2273, %2303[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2305 = llvm.insertvalue %2275, %2304[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2306 = llvm.insertvalue %2277, %2305[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2307 = llvm.insertvalue %2279, %2306[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2308 = llvm.insertvalue %2281, %2307[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2309 = llvm.insertvalue %2283, %2308[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2310 = llvm.insertvalue %2285, %2309[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2311 = llvm.insertvalue %2287, %2310[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2312 = llvm.insertvalue %2289, %2311[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2313 = llvm.insertvalue %2291, %2312[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2314 = llvm.insertvalue %2293, %2313[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2315 = llvm.insertvalue %2295, %2314[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2316 = llvm.insertvalue %2297, %2315[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2317 = llvm.insertvalue %2299, %2316[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2318 = llvm.insertvalue %2301, %2317[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    rocdl.barrier
    %2319 = llvm.mlir.constant(0 : i32) : i32
    %2320 = llvm.getelementptr %191[%2319] : (!llvm.ptr<i8, 3>, i32) -> !llvm.ptr<i8, 3>
    %2321 = llvm.bitcast %2320 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %2322 = llvm.extractvalue %2318[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2323 = llvm.extractvalue %2318[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2324 = llvm.extractvalue %2318[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2325 = llvm.extractvalue %2318[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2326 = llvm.extractvalue %2318[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2327 = llvm.extractvalue %2318[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2328 = llvm.extractvalue %2318[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2329 = llvm.extractvalue %2318[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2330 = llvm.extractvalue %2318[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2331 = llvm.extractvalue %2318[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2332 = llvm.extractvalue %2318[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2333 = llvm.extractvalue %2318[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2334 = llvm.extractvalue %2318[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2335 = llvm.extractvalue %2318[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2336 = llvm.extractvalue %2318[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2337 = llvm.extractvalue %2318[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2338 = llvm.mlir.constant(0 : i32) : i32
    %2339 = llvm.add %153, %2338  : i32
    %2340 = llvm.mlir.constant(0 : i32) : i32
    %2341 = llvm.add %156, %2340  : i32
    %2342 = llvm.mlir.constant(0 : i32) : i32
    %2343 = llvm.mlir.constant(36 : i32) : i32
    %2344 = llvm.mul %2339, %2343  : i32
    %2345 = llvm.add %2344, %2341  : i32
    %2346 = llvm.getelementptr %2321[%2345] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2347 = llvm.bitcast %2346 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2348 = llvm.mlir.undef : vector<1xf32>
    %2349 = llvm.mlir.constant(0 : i32) : i32
    %2350 = llvm.insertelement %2322, %2348[%2349 : i32] : vector<1xf32>
    llvm.store %2350, %2347 : !llvm.ptr<vector<1xf32>, 3>
    %2351 = llvm.mlir.constant(1 : i32) : i32
    %2352 = llvm.add %153, %2351  : i32
    %2353 = llvm.mlir.constant(0 : i32) : i32
    %2354 = llvm.add %156, %2353  : i32
    %2355 = llvm.mlir.constant(0 : i32) : i32
    %2356 = llvm.mlir.constant(36 : i32) : i32
    %2357 = llvm.mul %2352, %2356  : i32
    %2358 = llvm.add %2357, %2354  : i32
    %2359 = llvm.getelementptr %2321[%2358] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2360 = llvm.bitcast %2359 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2361 = llvm.mlir.undef : vector<1xf32>
    %2362 = llvm.mlir.constant(0 : i32) : i32
    %2363 = llvm.insertelement %2323, %2361[%2362 : i32] : vector<1xf32>
    llvm.store %2363, %2360 : !llvm.ptr<vector<1xf32>, 3>
    %2364 = llvm.mlir.constant(2 : i32) : i32
    %2365 = llvm.add %153, %2364  : i32
    %2366 = llvm.mlir.constant(0 : i32) : i32
    %2367 = llvm.add %156, %2366  : i32
    %2368 = llvm.mlir.constant(0 : i32) : i32
    %2369 = llvm.mlir.constant(36 : i32) : i32
    %2370 = llvm.mul %2365, %2369  : i32
    %2371 = llvm.add %2370, %2367  : i32
    %2372 = llvm.getelementptr %2321[%2371] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2373 = llvm.bitcast %2372 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2374 = llvm.mlir.undef : vector<1xf32>
    %2375 = llvm.mlir.constant(0 : i32) : i32
    %2376 = llvm.insertelement %2324, %2374[%2375 : i32] : vector<1xf32>
    llvm.store %2376, %2373 : !llvm.ptr<vector<1xf32>, 3>
    %2377 = llvm.mlir.constant(3 : i32) : i32
    %2378 = llvm.add %153, %2377  : i32
    %2379 = llvm.mlir.constant(0 : i32) : i32
    %2380 = llvm.add %156, %2379  : i32
    %2381 = llvm.mlir.constant(0 : i32) : i32
    %2382 = llvm.mlir.constant(36 : i32) : i32
    %2383 = llvm.mul %2378, %2382  : i32
    %2384 = llvm.add %2383, %2380  : i32
    %2385 = llvm.getelementptr %2321[%2384] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2386 = llvm.bitcast %2385 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2387 = llvm.mlir.undef : vector<1xf32>
    %2388 = llvm.mlir.constant(0 : i32) : i32
    %2389 = llvm.insertelement %2325, %2387[%2388 : i32] : vector<1xf32>
    llvm.store %2389, %2386 : !llvm.ptr<vector<1xf32>, 3>
    %2390 = llvm.mlir.constant(8 : i32) : i32
    %2391 = llvm.add %153, %2390  : i32
    %2392 = llvm.mlir.constant(0 : i32) : i32
    %2393 = llvm.add %156, %2392  : i32
    %2394 = llvm.mlir.constant(0 : i32) : i32
    %2395 = llvm.mlir.constant(36 : i32) : i32
    %2396 = llvm.mul %2391, %2395  : i32
    %2397 = llvm.add %2396, %2393  : i32
    %2398 = llvm.getelementptr %2321[%2397] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2399 = llvm.bitcast %2398 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2400 = llvm.mlir.undef : vector<1xf32>
    %2401 = llvm.mlir.constant(0 : i32) : i32
    %2402 = llvm.insertelement %2326, %2400[%2401 : i32] : vector<1xf32>
    llvm.store %2402, %2399 : !llvm.ptr<vector<1xf32>, 3>
    %2403 = llvm.mlir.constant(9 : i32) : i32
    %2404 = llvm.add %153, %2403  : i32
    %2405 = llvm.mlir.constant(0 : i32) : i32
    %2406 = llvm.add %156, %2405  : i32
    %2407 = llvm.mlir.constant(0 : i32) : i32
    %2408 = llvm.mlir.constant(36 : i32) : i32
    %2409 = llvm.mul %2404, %2408  : i32
    %2410 = llvm.add %2409, %2406  : i32
    %2411 = llvm.getelementptr %2321[%2410] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2412 = llvm.bitcast %2411 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2413 = llvm.mlir.undef : vector<1xf32>
    %2414 = llvm.mlir.constant(0 : i32) : i32
    %2415 = llvm.insertelement %2327, %2413[%2414 : i32] : vector<1xf32>
    llvm.store %2415, %2412 : !llvm.ptr<vector<1xf32>, 3>
    %2416 = llvm.mlir.constant(10 : i32) : i32
    %2417 = llvm.add %153, %2416  : i32
    %2418 = llvm.mlir.constant(0 : i32) : i32
    %2419 = llvm.add %156, %2418  : i32
    %2420 = llvm.mlir.constant(0 : i32) : i32
    %2421 = llvm.mlir.constant(36 : i32) : i32
    %2422 = llvm.mul %2417, %2421  : i32
    %2423 = llvm.add %2422, %2419  : i32
    %2424 = llvm.getelementptr %2321[%2423] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2425 = llvm.bitcast %2424 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2426 = llvm.mlir.undef : vector<1xf32>
    %2427 = llvm.mlir.constant(0 : i32) : i32
    %2428 = llvm.insertelement %2328, %2426[%2427 : i32] : vector<1xf32>
    llvm.store %2428, %2425 : !llvm.ptr<vector<1xf32>, 3>
    %2429 = llvm.mlir.constant(11 : i32) : i32
    %2430 = llvm.add %153, %2429  : i32
    %2431 = llvm.mlir.constant(0 : i32) : i32
    %2432 = llvm.add %156, %2431  : i32
    %2433 = llvm.mlir.constant(0 : i32) : i32
    %2434 = llvm.mlir.constant(36 : i32) : i32
    %2435 = llvm.mul %2430, %2434  : i32
    %2436 = llvm.add %2435, %2432  : i32
    %2437 = llvm.getelementptr %2321[%2436] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2438 = llvm.bitcast %2437 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2439 = llvm.mlir.undef : vector<1xf32>
    %2440 = llvm.mlir.constant(0 : i32) : i32
    %2441 = llvm.insertelement %2329, %2439[%2440 : i32] : vector<1xf32>
    llvm.store %2441, %2438 : !llvm.ptr<vector<1xf32>, 3>
    %2442 = llvm.mlir.constant(16 : i32) : i32
    %2443 = llvm.add %153, %2442  : i32
    %2444 = llvm.mlir.constant(0 : i32) : i32
    %2445 = llvm.add %156, %2444  : i32
    %2446 = llvm.mlir.constant(0 : i32) : i32
    %2447 = llvm.mlir.constant(36 : i32) : i32
    %2448 = llvm.mul %2443, %2447  : i32
    %2449 = llvm.add %2448, %2445  : i32
    %2450 = llvm.getelementptr %2321[%2449] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2451 = llvm.bitcast %2450 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2452 = llvm.mlir.undef : vector<1xf32>
    %2453 = llvm.mlir.constant(0 : i32) : i32
    %2454 = llvm.insertelement %2330, %2452[%2453 : i32] : vector<1xf32>
    llvm.store %2454, %2451 : !llvm.ptr<vector<1xf32>, 3>
    %2455 = llvm.mlir.constant(17 : i32) : i32
    %2456 = llvm.add %153, %2455  : i32
    %2457 = llvm.mlir.constant(0 : i32) : i32
    %2458 = llvm.add %156, %2457  : i32
    %2459 = llvm.mlir.constant(0 : i32) : i32
    %2460 = llvm.mlir.constant(36 : i32) : i32
    %2461 = llvm.mul %2456, %2460  : i32
    %2462 = llvm.add %2461, %2458  : i32
    %2463 = llvm.getelementptr %2321[%2462] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2464 = llvm.bitcast %2463 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2465 = llvm.mlir.undef : vector<1xf32>
    %2466 = llvm.mlir.constant(0 : i32) : i32
    %2467 = llvm.insertelement %2331, %2465[%2466 : i32] : vector<1xf32>
    llvm.store %2467, %2464 : !llvm.ptr<vector<1xf32>, 3>
    %2468 = llvm.mlir.constant(18 : i32) : i32
    %2469 = llvm.add %153, %2468  : i32
    %2470 = llvm.mlir.constant(0 : i32) : i32
    %2471 = llvm.add %156, %2470  : i32
    %2472 = llvm.mlir.constant(0 : i32) : i32
    %2473 = llvm.mlir.constant(36 : i32) : i32
    %2474 = llvm.mul %2469, %2473  : i32
    %2475 = llvm.add %2474, %2471  : i32
    %2476 = llvm.getelementptr %2321[%2475] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2477 = llvm.bitcast %2476 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2478 = llvm.mlir.undef : vector<1xf32>
    %2479 = llvm.mlir.constant(0 : i32) : i32
    %2480 = llvm.insertelement %2332, %2478[%2479 : i32] : vector<1xf32>
    llvm.store %2480, %2477 : !llvm.ptr<vector<1xf32>, 3>
    %2481 = llvm.mlir.constant(19 : i32) : i32
    %2482 = llvm.add %153, %2481  : i32
    %2483 = llvm.mlir.constant(0 : i32) : i32
    %2484 = llvm.add %156, %2483  : i32
    %2485 = llvm.mlir.constant(0 : i32) : i32
    %2486 = llvm.mlir.constant(36 : i32) : i32
    %2487 = llvm.mul %2482, %2486  : i32
    %2488 = llvm.add %2487, %2484  : i32
    %2489 = llvm.getelementptr %2321[%2488] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2490 = llvm.bitcast %2489 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2491 = llvm.mlir.undef : vector<1xf32>
    %2492 = llvm.mlir.constant(0 : i32) : i32
    %2493 = llvm.insertelement %2333, %2491[%2492 : i32] : vector<1xf32>
    llvm.store %2493, %2490 : !llvm.ptr<vector<1xf32>, 3>
    %2494 = llvm.mlir.constant(24 : i32) : i32
    %2495 = llvm.add %153, %2494  : i32
    %2496 = llvm.mlir.constant(0 : i32) : i32
    %2497 = llvm.add %156, %2496  : i32
    %2498 = llvm.mlir.constant(0 : i32) : i32
    %2499 = llvm.mlir.constant(36 : i32) : i32
    %2500 = llvm.mul %2495, %2499  : i32
    %2501 = llvm.add %2500, %2497  : i32
    %2502 = llvm.getelementptr %2321[%2501] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2503 = llvm.bitcast %2502 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2504 = llvm.mlir.undef : vector<1xf32>
    %2505 = llvm.mlir.constant(0 : i32) : i32
    %2506 = llvm.insertelement %2334, %2504[%2505 : i32] : vector<1xf32>
    llvm.store %2506, %2503 : !llvm.ptr<vector<1xf32>, 3>
    %2507 = llvm.mlir.constant(25 : i32) : i32
    %2508 = llvm.add %153, %2507  : i32
    %2509 = llvm.mlir.constant(0 : i32) : i32
    %2510 = llvm.add %156, %2509  : i32
    %2511 = llvm.mlir.constant(0 : i32) : i32
    %2512 = llvm.mlir.constant(36 : i32) : i32
    %2513 = llvm.mul %2508, %2512  : i32
    %2514 = llvm.add %2513, %2510  : i32
    %2515 = llvm.getelementptr %2321[%2514] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2516 = llvm.bitcast %2515 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2517 = llvm.mlir.undef : vector<1xf32>
    %2518 = llvm.mlir.constant(0 : i32) : i32
    %2519 = llvm.insertelement %2335, %2517[%2518 : i32] : vector<1xf32>
    llvm.store %2519, %2516 : !llvm.ptr<vector<1xf32>, 3>
    %2520 = llvm.mlir.constant(26 : i32) : i32
    %2521 = llvm.add %153, %2520  : i32
    %2522 = llvm.mlir.constant(0 : i32) : i32
    %2523 = llvm.add %156, %2522  : i32
    %2524 = llvm.mlir.constant(0 : i32) : i32
    %2525 = llvm.mlir.constant(36 : i32) : i32
    %2526 = llvm.mul %2521, %2525  : i32
    %2527 = llvm.add %2526, %2523  : i32
    %2528 = llvm.getelementptr %2321[%2527] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2529 = llvm.bitcast %2528 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2530 = llvm.mlir.undef : vector<1xf32>
    %2531 = llvm.mlir.constant(0 : i32) : i32
    %2532 = llvm.insertelement %2336, %2530[%2531 : i32] : vector<1xf32>
    llvm.store %2532, %2529 : !llvm.ptr<vector<1xf32>, 3>
    %2533 = llvm.mlir.constant(27 : i32) : i32
    %2534 = llvm.add %153, %2533  : i32
    %2535 = llvm.mlir.constant(0 : i32) : i32
    %2536 = llvm.add %156, %2535  : i32
    %2537 = llvm.mlir.constant(0 : i32) : i32
    %2538 = llvm.mlir.constant(36 : i32) : i32
    %2539 = llvm.mul %2534, %2538  : i32
    %2540 = llvm.add %2539, %2536  : i32
    %2541 = llvm.getelementptr %2321[%2540] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2542 = llvm.bitcast %2541 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %2543 = llvm.mlir.undef : vector<1xf32>
    %2544 = llvm.mlir.constant(0 : i32) : i32
    %2545 = llvm.insertelement %2337, %2543[%2544 : i32] : vector<1xf32>
    llvm.store %2545, %2542 : !llvm.ptr<vector<1xf32>, 3>
    rocdl.barrier
    %2546 = llvm.mlir.constant(0 : i32) : i32
    %2547 = llvm.add %89, %2546  : i32
    %2548 = llvm.mlir.constant(0 : i32) : i32
    %2549 = llvm.add %98, %2548  : i32
    %2550 = llvm.mlir.constant(0 : i32) : i32
    %2551 = llvm.mlir.constant(36 : i32) : i32
    %2552 = llvm.mul %2547, %2551  : i32
    %2553 = llvm.add %2552, %2549  : i32
    %2554 = llvm.getelementptr %2321[%2553] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2555 = llvm.bitcast %2554 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    %2556 = llvm.load %2555 : !llvm.ptr<vector<4xf32>, 3>
    %2557 = llvm.mlir.constant(0 : i32) : i32
    %2558 = llvm.extractelement %2556[%2557 : i32] : vector<4xf32>
    %2559 = llvm.mlir.constant(1 : i32) : i32
    %2560 = llvm.extractelement %2556[%2559 : i32] : vector<4xf32>
    %2561 = llvm.mlir.constant(2 : i32) : i32
    %2562 = llvm.extractelement %2556[%2561 : i32] : vector<4xf32>
    %2563 = llvm.mlir.constant(3 : i32) : i32
    %2564 = llvm.extractelement %2556[%2563 : i32] : vector<4xf32>
    %2565 = llvm.mlir.constant(16 : i32) : i32
    %2566 = llvm.add %89, %2565  : i32
    %2567 = llvm.mlir.constant(0 : i32) : i32
    %2568 = llvm.add %98, %2567  : i32
    %2569 = llvm.mlir.constant(0 : i32) : i32
    %2570 = llvm.mlir.constant(36 : i32) : i32
    %2571 = llvm.mul %2566, %2570  : i32
    %2572 = llvm.add %2571, %2568  : i32
    %2573 = llvm.getelementptr %2321[%2572] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2574 = llvm.bitcast %2573 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    %2575 = llvm.load %2574 : !llvm.ptr<vector<4xf32>, 3>
    %2576 = llvm.mlir.constant(0 : i32) : i32
    %2577 = llvm.extractelement %2575[%2576 : i32] : vector<4xf32>
    %2578 = llvm.mlir.constant(1 : i32) : i32
    %2579 = llvm.extractelement %2575[%2578 : i32] : vector<4xf32>
    %2580 = llvm.mlir.constant(2 : i32) : i32
    %2581 = llvm.extractelement %2575[%2580 : i32] : vector<4xf32>
    %2582 = llvm.mlir.constant(3 : i32) : i32
    %2583 = llvm.extractelement %2575[%2582 : i32] : vector<4xf32>
    %2584 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %2585 = llvm.insertvalue %2558, %2584[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2586 = llvm.insertvalue %2560, %2585[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2587 = llvm.insertvalue %2562, %2586[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2588 = llvm.insertvalue %2564, %2587[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2589 = llvm.insertvalue %2577, %2588[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2590 = llvm.insertvalue %2579, %2589[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2591 = llvm.insertvalue %2581, %2590[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2592 = llvm.insertvalue %2583, %2591[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    rocdl.barrier
    %2593 = llvm.mlir.constant(0 : i32) : i32
    %2594 = llvm.getelementptr %191[%2593] : (!llvm.ptr<i8, 3>, i32) -> !llvm.ptr<i8, 3>
    %2595 = llvm.bitcast %2594 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %2596 = llvm.extractvalue %2592[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2597 = llvm.extractvalue %2592[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2598 = llvm.extractvalue %2592[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2599 = llvm.extractvalue %2592[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2600 = llvm.extractvalue %2592[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2601 = llvm.extractvalue %2592[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2602 = llvm.extractvalue %2592[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2603 = llvm.extractvalue %2592[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2604 = llvm.fcmp "ogt" %2596, %2597 : f32
    %2605 = llvm.select %2604, %2596, %2597 : i1, f32
    %2606 = llvm.fcmp "ogt" %2605, %2598 : f32
    %2607 = llvm.select %2606, %2605, %2598 : i1, f32
    %2608 = llvm.fcmp "ogt" %2607, %2599 : f32
    %2609 = llvm.select %2608, %2607, %2599 : i1, f32
    %2610 = llvm.fcmp "ogt" %2600, %2601 : f32
    %2611 = llvm.select %2610, %2600, %2601 : i1, f32
    %2612 = llvm.fcmp "ogt" %2611, %2602 : f32
    %2613 = llvm.select %2612, %2611, %2602 : i1, f32
    %2614 = llvm.fcmp "ogt" %2613, %2603 : f32
    %2615 = llvm.select %2614, %2613, %2603 : i1, f32
    %2616 = rocdl.workitem.id.x : i32
    %2617 = llvm.trunc %2616 : i32 to i32
    %2618 = llvm.mlir.constant(64 : i32) : i32
    %2619 = llvm.udiv %2617, %2618  : i32
    %2620 = llvm.urem %2617, %2618  : i32
    %2621 = llvm.mlir.constant(8 : i32) : i32
    %2622 = llvm.urem %2620, %2621  : i32
    %2623 = llvm.udiv %2620, %2621  : i32
    %2624 = llvm.mlir.constant(1 : i32) : i32
    %2625 = llvm.urem %2619, %2624  : i32
    %2626 = llvm.udiv %2619, %2624  : i32
    %2627 = llvm.mlir.constant(0 : i32) : i32
    %2628 = llvm.icmp "eq" %2622, %2627 : i32
    %2629 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2609 : (f32) -> f32
    %2630 = llvm.fcmp "ogt" %2609, %2629 : f32
    %2631 = llvm.select %2630, %2609, %2629 : i1, f32
    %2632 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2631 : (f32) -> f32
    %2633 = llvm.fcmp "ogt" %2631, %2632 : f32
    %2634 = llvm.select %2633, %2631, %2632 : i1, f32
    %2635 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2634 : (f32) -> f32
    %2636 = llvm.fcmp "ogt" %2634, %2635 : f32
    %2637 = llvm.select %2636, %2634, %2635 : i1, f32
    %2638 = llvm.mlir.constant(0 : i32) : i32
    %2639 = llvm.mlir.constant(1 : i32) : i32
    %2640 = llvm.mul %100, %2639  : i32
    %2641 = llvm.add %2640, %2627  : i32
    %2642 = llvm.getelementptr %2595[%2641] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %2637, %2642 : !llvm.ptr<f32, 3>
    %2643 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2615 : (f32) -> f32
    %2644 = llvm.fcmp "ogt" %2615, %2643 : f32
    %2645 = llvm.select %2644, %2615, %2643 : i1, f32
    %2646 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2645 : (f32) -> f32
    %2647 = llvm.fcmp "ogt" %2645, %2646 : f32
    %2648 = llvm.select %2647, %2645, %2646 : i1, f32
    %2649 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2648 : (f32) -> f32
    %2650 = llvm.fcmp "ogt" %2648, %2649 : f32
    %2651 = llvm.select %2650, %2648, %2649 : i1, f32
    %2652 = llvm.mlir.constant(0 : i32) : i32
    %2653 = llvm.mlir.constant(1 : i32) : i32
    %2654 = llvm.mul %116, %2653  : i32
    %2655 = llvm.add %2654, %2627  : i32
    %2656 = llvm.getelementptr %2595[%2655] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %2651, %2656 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %2657 = llvm.getelementptr %2595[%2617] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2658 = llvm.load %2657 : !llvm.ptr<f32, 3>
    %2659 = llvm.getelementptr %2595[%2617] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2660 = llvm.mlir.constant(32 : i32) : i32
    %2661 = llvm.icmp "slt" %2617, %2660 : i32
    %2662 = llvm.mlir.constant(1 : i32) : i32
    %2663 = llvm.urem %2620, %2662  : i32
    %2664 = llvm.icmp "eq" %2663, %2627 : i32
    %2665 = llvm.and %2661, %2664  : i1
    llvm.store %2658, %2659 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %2666 = llvm.mlir.constant(0 : i32) : i32
    %2667 = llvm.mlir.constant(0 : i32) : i32
    %2668 = llvm.mlir.constant(1 : i32) : i32
    %2669 = llvm.mul %187, %2668  : i32
    %2670 = llvm.add %2669, %2666  : i32
    %2671 = llvm.getelementptr %2595[%2670] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2672 = llvm.load %2671 : !llvm.ptr<f32, 3>
    %2673 = llvm.mlir.constant(0 : i32) : i32
    %2674 = llvm.mlir.constant(0 : i32) : i32
    %2675 = llvm.mlir.constant(1 : i32) : i32
    %2676 = llvm.mul %189, %2675  : i32
    %2677 = llvm.add %2676, %2673  : i32
    %2678 = llvm.getelementptr %2595[%2677] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2679 = llvm.load %2678 : !llvm.ptr<f32, 3>
    %2680 = llvm.mlir.undef : !llvm.struct<(f32, f32)>
    %2681 = llvm.insertvalue %2672, %2680[0] : !llvm.struct<(f32, f32)> 
    %2682 = llvm.insertvalue %2679, %2681[1] : !llvm.struct<(f32, f32)> 
    %2683 = llvm.extractvalue %2682[0] : !llvm.struct<(f32, f32)> 
    %2684 = llvm.extractvalue %2682[1] : !llvm.struct<(f32, f32)> 
    %2685 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %2686 = llvm.insertvalue %2683, %2685[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2687 = llvm.insertvalue %2683, %2686[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2688 = llvm.insertvalue %2683, %2687[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2689 = llvm.insertvalue %2683, %2688[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2690 = llvm.insertvalue %2684, %2689[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2691 = llvm.insertvalue %2684, %2690[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2692 = llvm.insertvalue %2684, %2691[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2693 = llvm.insertvalue %2684, %2692[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2694 = llvm.extractvalue %2693[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2695 = llvm.extractvalue %2693[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2696 = llvm.extractvalue %2693[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2697 = llvm.extractvalue %2693[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2698 = llvm.extractvalue %2693[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2699 = llvm.extractvalue %2693[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2700 = llvm.extractvalue %2693[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2701 = llvm.extractvalue %2693[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2702 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %2703 = llvm.insertvalue %2694, %2702[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2704 = llvm.insertvalue %2694, %2703[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2705 = llvm.insertvalue %2694, %2704[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2706 = llvm.insertvalue %2694, %2705[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2707 = llvm.insertvalue %2698, %2706[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2708 = llvm.insertvalue %2698, %2707[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2709 = llvm.insertvalue %2698, %2708[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2710 = llvm.insertvalue %2698, %2709[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2711 = llvm.extractvalue %2592[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2712 = llvm.extractvalue %2592[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2713 = llvm.extractvalue %2592[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2714 = llvm.extractvalue %2592[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2715 = llvm.extractvalue %2592[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2716 = llvm.extractvalue %2592[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2717 = llvm.extractvalue %2592[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2718 = llvm.extractvalue %2592[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2719 = llvm.extractvalue %2710[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2720 = llvm.extractvalue %2710[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2721 = llvm.extractvalue %2710[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2722 = llvm.extractvalue %2710[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2723 = llvm.extractvalue %2710[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2724 = llvm.extractvalue %2710[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2725 = llvm.extractvalue %2710[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2726 = llvm.extractvalue %2710[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2727 = llvm.fsub %2711, %2719  : f32
    %2728 = llvm.fsub %2712, %2720  : f32
    %2729 = llvm.fsub %2713, %2721  : f32
    %2730 = llvm.fsub %2714, %2722  : f32
    %2731 = llvm.fsub %2715, %2723  : f32
    %2732 = llvm.fsub %2716, %2724  : f32
    %2733 = llvm.fsub %2717, %2725  : f32
    %2734 = llvm.fsub %2718, %2726  : f32
    %2735 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %2736 = llvm.insertvalue %2727, %2735[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2737 = llvm.insertvalue %2728, %2736[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2738 = llvm.insertvalue %2729, %2737[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2739 = llvm.insertvalue %2730, %2738[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2740 = llvm.insertvalue %2731, %2739[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2741 = llvm.insertvalue %2732, %2740[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2742 = llvm.insertvalue %2733, %2741[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2743 = llvm.insertvalue %2734, %2742[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2744 = llvm.extractvalue %2743[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2745 = llvm.extractvalue %2743[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2746 = llvm.extractvalue %2743[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2747 = llvm.extractvalue %2743[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2748 = llvm.extractvalue %2743[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2749 = llvm.extractvalue %2743[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2750 = llvm.extractvalue %2743[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2751 = llvm.extractvalue %2743[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2752 = llvm.mlir.constant(1.44269502 : f32) : f32
    %2753 = llvm.fmul %2744, %2752  : f32
    %2754 = llvm.call @__ocml_exp2_f32(%2753) : (f32) -> f32
    %2755 = llvm.mlir.constant(1.44269502 : f32) : f32
    %2756 = llvm.fmul %2745, %2755  : f32
    %2757 = llvm.call @__ocml_exp2_f32(%2756) : (f32) -> f32
    %2758 = llvm.mlir.constant(1.44269502 : f32) : f32
    %2759 = llvm.fmul %2746, %2758  : f32
    %2760 = llvm.call @__ocml_exp2_f32(%2759) : (f32) -> f32
    %2761 = llvm.mlir.constant(1.44269502 : f32) : f32
    %2762 = llvm.fmul %2747, %2761  : f32
    %2763 = llvm.call @__ocml_exp2_f32(%2762) : (f32) -> f32
    %2764 = llvm.mlir.constant(1.44269502 : f32) : f32
    %2765 = llvm.fmul %2748, %2764  : f32
    %2766 = llvm.call @__ocml_exp2_f32(%2765) : (f32) -> f32
    %2767 = llvm.mlir.constant(1.44269502 : f32) : f32
    %2768 = llvm.fmul %2749, %2767  : f32
    %2769 = llvm.call @__ocml_exp2_f32(%2768) : (f32) -> f32
    %2770 = llvm.mlir.constant(1.44269502 : f32) : f32
    %2771 = llvm.fmul %2750, %2770  : f32
    %2772 = llvm.call @__ocml_exp2_f32(%2771) : (f32) -> f32
    %2773 = llvm.mlir.constant(1.44269502 : f32) : f32
    %2774 = llvm.fmul %2751, %2773  : f32
    %2775 = llvm.call @__ocml_exp2_f32(%2774) : (f32) -> f32
    %2776 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %2777 = llvm.insertvalue %2754, %2776[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2778 = llvm.insertvalue %2757, %2777[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2779 = llvm.insertvalue %2760, %2778[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2780 = llvm.insertvalue %2763, %2779[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2781 = llvm.insertvalue %2766, %2780[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2782 = llvm.insertvalue %2769, %2781[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2783 = llvm.insertvalue %2772, %2782[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2784 = llvm.insertvalue %2775, %2783[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    rocdl.barrier
    %2785 = llvm.mlir.constant(0 : i32) : i32
    %2786 = llvm.getelementptr %191[%2785] : (!llvm.ptr<i8, 3>, i32) -> !llvm.ptr<i8, 3>
    %2787 = llvm.bitcast %2786 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %2788 = llvm.extractvalue %2784[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2789 = llvm.extractvalue %2784[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2790 = llvm.extractvalue %2784[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2791 = llvm.extractvalue %2784[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2792 = llvm.extractvalue %2784[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2793 = llvm.extractvalue %2784[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2794 = llvm.extractvalue %2784[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2795 = llvm.extractvalue %2784[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2796 = llvm.fadd %2788, %2789  : f32
    %2797 = llvm.fadd %2796, %2790  : f32
    %2798 = llvm.fadd %2797, %2791  : f32
    %2799 = llvm.fadd %2792, %2793  : f32
    %2800 = llvm.fadd %2799, %2794  : f32
    %2801 = llvm.fadd %2800, %2795  : f32
    %2802 = rocdl.workitem.id.x : i32
    %2803 = llvm.trunc %2802 : i32 to i32
    %2804 = llvm.mlir.constant(64 : i32) : i32
    %2805 = llvm.udiv %2803, %2804  : i32
    %2806 = llvm.urem %2803, %2804  : i32
    %2807 = llvm.mlir.constant(8 : i32) : i32
    %2808 = llvm.urem %2806, %2807  : i32
    %2809 = llvm.udiv %2806, %2807  : i32
    %2810 = llvm.mlir.constant(1 : i32) : i32
    %2811 = llvm.urem %2805, %2810  : i32
    %2812 = llvm.udiv %2805, %2810  : i32
    %2813 = llvm.mlir.constant(0 : i32) : i32
    %2814 = llvm.icmp "eq" %2808, %2813 : i32
    %2815 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2798 : (f32) -> f32
    %2816 = llvm.fadd %2798, %2815  : f32
    %2817 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2816 : (f32) -> f32
    %2818 = llvm.fadd %2816, %2817  : f32
    %2819 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2818 : (f32) -> f32
    %2820 = llvm.fadd %2818, %2819  : f32
    %2821 = llvm.mlir.constant(0 : i32) : i32
    %2822 = llvm.mlir.constant(1 : i32) : i32
    %2823 = llvm.mul %100, %2822  : i32
    %2824 = llvm.add %2823, %2813  : i32
    %2825 = llvm.getelementptr %2787[%2824] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %2820, %2825 : !llvm.ptr<f32, 3>
    %2826 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2801 : (f32) -> f32
    %2827 = llvm.fadd %2801, %2826  : f32
    %2828 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2827 : (f32) -> f32
    %2829 = llvm.fadd %2827, %2828  : f32
    %2830 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %2829 : (f32) -> f32
    %2831 = llvm.fadd %2829, %2830  : f32
    %2832 = llvm.mlir.constant(0 : i32) : i32
    %2833 = llvm.mlir.constant(1 : i32) : i32
    %2834 = llvm.mul %116, %2833  : i32
    %2835 = llvm.add %2834, %2813  : i32
    %2836 = llvm.getelementptr %2787[%2835] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %2831, %2836 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %2837 = llvm.getelementptr %2787[%2803] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2838 = llvm.load %2837 : !llvm.ptr<f32, 3>
    %2839 = llvm.getelementptr %2787[%2803] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2840 = llvm.mlir.constant(32 : i32) : i32
    %2841 = llvm.icmp "slt" %2803, %2840 : i32
    %2842 = llvm.mlir.constant(1 : i32) : i32
    %2843 = llvm.urem %2806, %2842  : i32
    %2844 = llvm.icmp "eq" %2843, %2813 : i32
    %2845 = llvm.and %2841, %2844  : i1
    llvm.store %2838, %2839 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %2846 = llvm.mlir.constant(0 : i32) : i32
    %2847 = llvm.mlir.constant(0 : i32) : i32
    %2848 = llvm.mlir.constant(1 : i32) : i32
    %2849 = llvm.mul %187, %2848  : i32
    %2850 = llvm.add %2849, %2846  : i32
    %2851 = llvm.getelementptr %2787[%2850] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2852 = llvm.load %2851 : !llvm.ptr<f32, 3>
    %2853 = llvm.mlir.constant(0 : i32) : i32
    %2854 = llvm.mlir.constant(0 : i32) : i32
    %2855 = llvm.mlir.constant(1 : i32) : i32
    %2856 = llvm.mul %189, %2855  : i32
    %2857 = llvm.add %2856, %2853  : i32
    %2858 = llvm.getelementptr %2787[%2857] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %2859 = llvm.load %2858 : !llvm.ptr<f32, 3>
    %2860 = llvm.mlir.undef : !llvm.struct<(f32, f32)>
    %2861 = llvm.insertvalue %2852, %2860[0] : !llvm.struct<(f32, f32)> 
    %2862 = llvm.insertvalue %2859, %2861[1] : !llvm.struct<(f32, f32)> 
    %2863 = llvm.extractvalue %2862[0] : !llvm.struct<(f32, f32)> 
    %2864 = llvm.extractvalue %2862[1] : !llvm.struct<(f32, f32)> 
    %2865 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %2866 = llvm.insertvalue %2863, %2865[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2867 = llvm.insertvalue %2863, %2866[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2868 = llvm.insertvalue %2863, %2867[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2869 = llvm.insertvalue %2863, %2868[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2870 = llvm.insertvalue %2864, %2869[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2871 = llvm.insertvalue %2864, %2870[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2872 = llvm.insertvalue %2864, %2871[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2873 = llvm.insertvalue %2864, %2872[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2874 = llvm.extractvalue %2873[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2875 = llvm.extractvalue %2873[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2876 = llvm.extractvalue %2873[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2877 = llvm.extractvalue %2873[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2878 = llvm.extractvalue %2873[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2879 = llvm.extractvalue %2873[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2880 = llvm.extractvalue %2873[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2881 = llvm.extractvalue %2873[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2882 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %2883 = llvm.insertvalue %2874, %2882[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2884 = llvm.insertvalue %2874, %2883[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2885 = llvm.insertvalue %2874, %2884[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2886 = llvm.insertvalue %2874, %2885[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2887 = llvm.insertvalue %2878, %2886[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2888 = llvm.insertvalue %2878, %2887[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2889 = llvm.insertvalue %2878, %2888[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2890 = llvm.insertvalue %2878, %2889[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2891 = llvm.extractvalue %2784[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2892 = llvm.extractvalue %2784[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2893 = llvm.extractvalue %2784[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2894 = llvm.extractvalue %2784[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2895 = llvm.extractvalue %2784[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2896 = llvm.extractvalue %2784[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2897 = llvm.extractvalue %2784[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2898 = llvm.extractvalue %2784[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2899 = llvm.extractvalue %2890[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2900 = llvm.extractvalue %2890[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2901 = llvm.extractvalue %2890[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2902 = llvm.extractvalue %2890[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2903 = llvm.extractvalue %2890[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2904 = llvm.extractvalue %2890[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2905 = llvm.extractvalue %2890[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2906 = llvm.extractvalue %2890[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2907 = llvm.fdiv %2891, %2899  : f32
    %2908 = llvm.fdiv %2892, %2900  : f32
    %2909 = llvm.fdiv %2893, %2901  : f32
    %2910 = llvm.fdiv %2894, %2902  : f32
    %2911 = llvm.fdiv %2895, %2903  : f32
    %2912 = llvm.fdiv %2896, %2904  : f32
    %2913 = llvm.fdiv %2897, %2905  : f32
    %2914 = llvm.fdiv %2898, %2906  : f32
    %2915 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %2916 = llvm.insertvalue %2907, %2915[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2917 = llvm.insertvalue %2908, %2916[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2918 = llvm.insertvalue %2909, %2917[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2919 = llvm.insertvalue %2910, %2918[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2920 = llvm.insertvalue %2911, %2919[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2921 = llvm.insertvalue %2912, %2920[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2922 = llvm.insertvalue %2913, %2921[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2923 = llvm.insertvalue %2914, %2922[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2924 = llvm.extractvalue %670[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %2925 = llvm.extractvalue %670[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %2926 = llvm.extractvalue %670[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %2927 = llvm.extractvalue %670[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %2928 = llvm.extractvalue %670[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %2929 = llvm.extractvalue %670[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %2930 = llvm.extractvalue %670[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %2931 = llvm.extractvalue %670[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %2932 = llvm.extractvalue %2923[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2933 = llvm.extractvalue %2923[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2934 = llvm.extractvalue %2923[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2935 = llvm.extractvalue %2923[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2936 = llvm.extractvalue %2923[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2937 = llvm.extractvalue %2923[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2938 = llvm.extractvalue %2923[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2939 = llvm.extractvalue %2923[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2940 = llvm.mlir.constant(true) : i1
    %2941 = rocdl.workitem.id.x : i32
    %2942 = llvm.trunc %2941 : i32 to i32
    %2943 = llvm.mlir.constant(64 : i32) : i32
    %2944 = llvm.urem %2942, %2943  : i32
    %2945 = llvm.udiv %2942, %2943  : i32
    %2946 = llvm.mlir.constant(1 : i32) : i32
    %2947 = llvm.urem %2945, %2946  : i32
    %2948 = llvm.udiv %2945, %2946  : i32
    %2949 = llvm.mlir.constant(8 : i32) : i32
    %2950 = llvm.urem %2944, %2949  : i32
    %2951 = llvm.udiv %2944, %2949  : i32
    %2952 = llvm.mlir.undef : vector<1xf32>
    %2953 = llvm.bitcast %2932 : f32 to f32
    %2954 = llvm.mlir.constant(0 : i32) : i32
    %2955 = llvm.insertelement %2953, %2952[%2954 : i32] : vector<1xf32>
    %2956 = llvm.bitcast %2955 : vector<1xf32> to i32
    scf.if %2940 {
      llvm.store %2956, %2924 : !llvm.ptr<f32, 1>
    }
    %2957 = llvm.mlir.undef : vector<1xf32>
    %2958 = llvm.bitcast %2933 : f32 to f32
    %2959 = llvm.mlir.constant(0 : i32) : i32
    %2960 = llvm.insertelement %2958, %2957[%2959 : i32] : vector<1xf32>
    %2961 = llvm.bitcast %2960 : vector<1xf32> to i32
    scf.if %2940 {
      llvm.store %2961, %2925 : !llvm.ptr<f32, 1>
    }
    %2962 = llvm.mlir.undef : vector<1xf32>
    %2963 = llvm.bitcast %2934 : f32 to f32
    %2964 = llvm.mlir.constant(0 : i32) : i32
    %2965 = llvm.insertelement %2963, %2962[%2964 : i32] : vector<1xf32>
    %2966 = llvm.bitcast %2965 : vector<1xf32> to i32
    scf.if %2940 {
      llvm.store %2966, %2926 : !llvm.ptr<f32, 1>
    }
    %2967 = llvm.mlir.undef : vector<1xf32>
    %2968 = llvm.bitcast %2935 : f32 to f32
    %2969 = llvm.mlir.constant(0 : i32) : i32
    %2970 = llvm.insertelement %2968, %2967[%2969 : i32] : vector<1xf32>
    %2971 = llvm.bitcast %2970 : vector<1xf32> to i32
    scf.if %2940 {
      llvm.store %2971, %2927 : !llvm.ptr<f32, 1>
    }
    %2972 = llvm.mlir.undef : vector<1xf32>
    %2973 = llvm.bitcast %2936 : f32 to f32
    %2974 = llvm.mlir.constant(0 : i32) : i32
    %2975 = llvm.insertelement %2973, %2972[%2974 : i32] : vector<1xf32>
    %2976 = llvm.bitcast %2975 : vector<1xf32> to i32
    scf.if %2940 {
      llvm.store %2976, %2928 : !llvm.ptr<f32, 1>
    }
    %2977 = llvm.mlir.undef : vector<1xf32>
    %2978 = llvm.bitcast %2937 : f32 to f32
    %2979 = llvm.mlir.constant(0 : i32) : i32
    %2980 = llvm.insertelement %2978, %2977[%2979 : i32] : vector<1xf32>
    %2981 = llvm.bitcast %2980 : vector<1xf32> to i32
    scf.if %2940 {
      llvm.store %2981, %2929 : !llvm.ptr<f32, 1>
    }
    %2982 = llvm.mlir.undef : vector<1xf32>
    %2983 = llvm.bitcast %2938 : f32 to f32
    %2984 = llvm.mlir.constant(0 : i32) : i32
    %2985 = llvm.insertelement %2983, %2982[%2984 : i32] : vector<1xf32>
    %2986 = llvm.bitcast %2985 : vector<1xf32> to i32
    scf.if %2940 {
      llvm.store %2986, %2930 : !llvm.ptr<f32, 1>
    }
    %2987 = llvm.mlir.undef : vector<1xf32>
    %2988 = llvm.bitcast %2939 : f32 to f32
    %2989 = llvm.mlir.constant(0 : i32) : i32
    %2990 = llvm.insertelement %2988, %2987[%2989 : i32] : vector<1xf32>
    %2991 = llvm.bitcast %2990 : vector<1xf32> to i32
    scf.if %2940 {
      llvm.store %2991, %2931 : !llvm.ptr<f32, 1>
    }
    llvm.return
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module attributes {triton_gpu.externs = {library_0 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/opencl.bc", library_1 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/ocml.bc", library_2 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/ockl.bc", library_3 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-warps" = 2 : i32, triton_gpu.shared = 8192 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @__ocml_exp2_f32(f32) -> f32
  llvm.func @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public"} {
    %0 = llvm.mlir.constant(1.44269502 : f32) : f32
    %1 = llvm.mlir.constant(27 : i32) : i32
    %2 = llvm.mlir.constant(25 : i32) : i32
    %3 = llvm.mlir.constant(19 : i32) : i32
    %4 = llvm.mlir.constant(17 : i32) : i32
    %5 = llvm.mlir.constant(36 : i32) : i32
    %6 = llvm.mlir.constant(15 : i32) : i32
    %7 = llvm.mlir.constant(13 : i32) : i32
    %8 = llvm.mlir.constant(11 : i32) : i32
    %9 = llvm.mlir.constant(9 : i32) : i32
    %10 = llvm.mlir.constant(7 : i32) : i32
    %11 = llvm.mlir.constant(5 : i32) : i32
    %12 = llvm.mlir.constant(30 : i32) : i32
    %13 = llvm.mlir.constant(28 : i32) : i32
    %14 = llvm.mlir.constant(26 : i32) : i32
    %15 = llvm.mlir.constant(24 : i32) : i32
    %16 = llvm.mlir.constant(22 : i32) : i32
    %17 = llvm.mlir.constant(20 : i32) : i32
    %18 = llvm.mlir.constant(18 : i32) : i32
    %19 = llvm.mlir.constant(14 : i32) : i32
    %20 = llvm.mlir.constant(12 : i32) : i32
    %21 = llvm.mlir.constant(10 : i32) : i32
    %22 = llvm.mlir.constant(6 : i32) : i32
    %23 = llvm.mlir.constant(0 : index) : i32
    %24 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    %25 = llvm.mlir.constant(3 : i32) : i32
    %26 = llvm.mlir.constant(2 : i32) : i32
    %27 = llvm.mlir.constant(16 : i32) : i32
    %28 = llvm.mlir.constant(0 : i32) : i32
    %29 = llvm.mlir.constant(32 : i32) : i32
    %30 = llvm.mlir.constant(4 : i32) : i32
    %31 = llvm.mlir.constant(8 : i32) : i32
    %32 = llvm.mlir.constant(1 : i32) : i32
    %33 = llvm.mlir.constant(64 : i32) : i32
    %34 = rocdl.workitem.id.x : i32
    %35 = llvm.trunc %34 : i32 to i32
    %36 = llvm.urem %35, %33  : i32
    %37 = llvm.udiv %35, %33  : i32
    %38 = llvm.udiv %37, %32  : i32
    %39 = llvm.udiv %36, %31  : i32
    %40 = llvm.urem %38, %30  : i32
    %41 = llvm.urem %39, %29  : i32
    %42 = llvm.mul %40, %31  : i32
    %43 = llvm.add %41, %42  : i32
    %44 = llvm.mul %43, %32  : i32
    %45 = llvm.add %44, %28  : i32
    %46 = llvm.add %44, %27  : i32
    %47 = rocdl.workitem.id.x : i32
    %48 = llvm.trunc %47 : i32 to i32
    %49 = llvm.urem %48, %33  : i32
    %50 = llvm.udiv %48, %33  : i32
    %51 = llvm.urem %50, %32  : i32
    %52 = llvm.urem %49, %31  : i32
    %53 = llvm.urem %51, %32  : i32
    %54 = llvm.urem %52, %31  : i32
    %55 = llvm.mul %53, %31  : i32
    %56 = llvm.add %54, %55  : i32
    %57 = llvm.mul %56, %30  : i32
    %58 = llvm.add %57, %28  : i32
    %59 = llvm.add %57, %32  : i32
    %60 = llvm.add %57, %26  : i32
    %61 = llvm.add %57, %25  : i32
    %62 = rocdl.workitem.id.x : i32
    %63 = llvm.trunc %62 : i32 to i32
    %64 = llvm.urem %63, %33  : i32
    %65 = llvm.udiv %63, %33  : i32
    %66 = llvm.urem %65, %32  : i32
    %67 = llvm.udiv %65, %32  : i32
    %68 = llvm.urem %64, %31  : i32
    %69 = llvm.udiv %64, %31  : i32
    %70 = llvm.urem %67, %30  : i32
    %71 = llvm.urem %69, %29  : i32
    %72 = llvm.mul %70, %31  : i32
    %73 = llvm.add %71, %72  : i32
    %74 = llvm.mul %73, %32  : i32
    %75 = llvm.urem %66, %32  : i32
    %76 = llvm.urem %68, %31  : i32
    %77 = llvm.mul %75, %31  : i32
    %78 = llvm.add %76, %77  : i32
    %79 = llvm.mul %78, %30  : i32
    %80 = llvm.add %74, %28  : i32
    %81 = llvm.add %79, %28  : i32
    %82 = llvm.add %79, %26  : i32
    %83 = llvm.add %74, %27  : i32
    %84 = rocdl.workitem.id.x : i32
    %85 = llvm.trunc %84 : i32 to i32
    %86 = llvm.urem %85, %33  : i32
    %87 = llvm.udiv %85, %33  : i32
    %88 = llvm.urem %87, %26  : i32
    %89 = llvm.urem %88, %32  : i32
    %90 = llvm.udiv %87, %26  : i32
    %91 = llvm.urem %90, %32  : i32
    %92 = llvm.urem %91, %32  : i32
    %93 = llvm.mul %89, %29  : i32
    %94 = llvm.mul %92, %29  : i32
    %95 = llvm.udiv %86, %29  : i32
    %96 = llvm.mul %95, %30  : i32
    %97 = llvm.add %96, %93  : i32
    %98 = llvm.urem %86, %29  : i32
    %99 = llvm.add %98, %94  : i32
    %100 = rocdl.workitem.id.x : i32
    %101 = llvm.trunc %100 : i32 to i32
    %102 = llvm.urem %101, %33  : i32
    %103 = llvm.udiv %101, %33  : i32
    %104 = llvm.udiv %103, %32  : i32
    %105 = llvm.udiv %102, %31  : i32
    %106 = llvm.urem %104, %30  : i32
    %107 = llvm.urem %105, %29  : i32
    %108 = llvm.mul %106, %31  : i32
    %109 = llvm.add %107, %108  : i32
    %110 = llvm.mul %109, %32  : i32
    %111 = llvm.add %110, %28  : i32
    %112 = llvm.add %110, %27  : i32
    %113 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3>
    %114 = llvm.bitcast %113 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3>
    %115 = llvm.add %45, %23  : i32
    %116 = llvm.add %46, %23  : i32
    %117 = llvm.mul %115, %arg1  : i32
    %118 = llvm.mul %116, %arg1  : i32
    %119 = llvm.getelementptr %arg0[%117] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %120 = llvm.getelementptr %arg0[%118] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %121 = llvm.add %58, %23  : i32
    %122 = llvm.add %59, %23  : i32
    %123 = llvm.add %60, %23  : i32
    %124 = llvm.add %61, %23  : i32
    %125 = llvm.getelementptr %119[%121] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %126 = llvm.getelementptr %119[%122] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %127 = llvm.getelementptr %119[%123] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %128 = llvm.getelementptr %119[%124] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %129 = llvm.getelementptr %120[%121] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %130 = llvm.getelementptr %120[%122] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %131 = llvm.getelementptr %120[%123] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %132 = llvm.getelementptr %120[%124] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %133 = llvm.mul %115, %arg3  : i32
    %134 = llvm.mul %116, %arg3  : i32
    %135 = llvm.getelementptr %arg2[%133] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %136 = llvm.getelementptr %arg2[%134] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %137 = llvm.getelementptr %135[%121] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %138 = llvm.getelementptr %135[%122] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %139 = llvm.getelementptr %135[%123] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %140 = llvm.getelementptr %135[%124] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %141 = llvm.getelementptr %136[%121] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %142 = llvm.getelementptr %136[%122] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %143 = llvm.getelementptr %136[%123] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %144 = llvm.getelementptr %136[%124] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %145 = llvm.mul %115, %arg7  : i32
    %146 = llvm.mul %116, %arg7  : i32
    %147 = llvm.getelementptr %arg6[%145] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %148 = llvm.getelementptr %arg6[%146] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %149 = llvm.getelementptr %147[%121] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %150 = llvm.getelementptr %147[%122] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %151 = llvm.getelementptr %147[%123] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %152 = llvm.getelementptr %147[%124] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %153 = llvm.getelementptr %148[%121] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %154 = llvm.getelementptr %148[%122] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %155 = llvm.getelementptr %148[%123] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %156 = llvm.getelementptr %148[%124] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %157 = llvm.addrspacecast %125 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %158 = llvm.load %157 : !llvm.ptr<i32>
    %159 = llvm.bitcast %158 : i32 to vector<1xf32>
    %160 = llvm.extractelement %159[%23 : i32] : vector<1xf32>
    %161 = llvm.addrspacecast %126 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %162 = llvm.load %161 : !llvm.ptr<i32>
    %163 = llvm.bitcast %162 : i32 to vector<1xf32>
    %164 = llvm.extractelement %163[%23 : i32] : vector<1xf32>
    %165 = llvm.addrspacecast %127 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %166 = llvm.load %165 : !llvm.ptr<i32>
    %167 = llvm.bitcast %166 : i32 to vector<1xf32>
    %168 = llvm.extractelement %167[%23 : i32] : vector<1xf32>
    %169 = llvm.addrspacecast %128 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %170 = llvm.load %169 : !llvm.ptr<i32>
    %171 = llvm.bitcast %170 : i32 to vector<1xf32>
    %172 = llvm.extractelement %171[%23 : i32] : vector<1xf32>
    %173 = llvm.addrspacecast %129 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %174 = llvm.load %173 : !llvm.ptr<i32>
    %175 = llvm.bitcast %174 : i32 to vector<1xf32>
    %176 = llvm.extractelement %175[%23 : i32] : vector<1xf32>
    %177 = llvm.addrspacecast %130 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %178 = llvm.load %177 : !llvm.ptr<i32>
    %179 = llvm.bitcast %178 : i32 to vector<1xf32>
    %180 = llvm.extractelement %179[%23 : i32] : vector<1xf32>
    %181 = llvm.addrspacecast %131 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %182 = llvm.load %181 : !llvm.ptr<i32>
    %183 = llvm.bitcast %182 : i32 to vector<1xf32>
    %184 = llvm.extractelement %183[%23 : i32] : vector<1xf32>
    %185 = llvm.addrspacecast %132 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %186 = llvm.load %185 : !llvm.ptr<i32>
    %187 = llvm.bitcast %186 : i32 to vector<1xf32>
    %188 = llvm.extractelement %187[%23 : i32] : vector<1xf32>
    %189 = llvm.bitcast %114 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %190 = llvm.mul %28, %29  : i32
    %191 = llvm.add %190, %28  : i32
    %192 = llvm.mul %28, %32  : i32
    %193 = llvm.add %191, %192  : i32
    %194 = llvm.getelementptr %189[%193] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %195 = llvm.udiv %80, %32  : i32
    %196 = llvm.urem %195, %26  : i32
    %197 = llvm.mul %80, %29  : i32
    %198 = llvm.udiv %81, %31  : i32
    %199 = llvm.xor %198, %196  : i32
    %200 = llvm.mul %199, %31  : i32
    %201 = llvm.urem %81, %31  : i32
    %202 = llvm.udiv %201, %30  : i32
    %203 = llvm.mul %202, %30  : i32
    %204 = llvm.add %200, %203  : i32
    %205 = llvm.mul %204, %32  : i32
    %206 = llvm.add %197, %205  : i32
    %207 = llvm.getelementptr %194[%206] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %208 = llvm.mul %28, %29  : i32
    %209 = llvm.add %208, %28  : i32
    %210 = llvm.getelementptr %207[%209] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %211 = llvm.udiv %80, %32  : i32
    %212 = llvm.urem %211, %26  : i32
    %213 = llvm.mul %80, %29  : i32
    %214 = llvm.udiv %81, %31  : i32
    %215 = llvm.xor %214, %212  : i32
    %216 = llvm.mul %215, %31  : i32
    %217 = llvm.urem %81, %31  : i32
    %218 = llvm.udiv %217, %30  : i32
    %219 = llvm.mul %218, %30  : i32
    %220 = llvm.add %216, %219  : i32
    %221 = llvm.mul %220, %32  : i32
    %222 = llvm.add %213, %221  : i32
    %223 = llvm.getelementptr %194[%222] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %224 = llvm.mul %27, %29  : i32
    %225 = llvm.add %224, %28  : i32
    %226 = llvm.getelementptr %223[%225] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %227 = llvm.mlir.undef : vector<4xf32>
    %228 = llvm.insertelement %160, %227[%28 : i32] : vector<4xf32>
    %229 = llvm.insertelement %164, %228[%32 : i32] : vector<4xf32>
    %230 = llvm.insertelement %168, %229[%26 : i32] : vector<4xf32>
    %231 = llvm.insertelement %172, %230[%25 : i32] : vector<4xf32>
    %232 = llvm.bitcast %210 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    llvm.store %231, %232 : !llvm.ptr<vector<4xf32>, 3>
    %233 = llvm.mlir.undef : vector<4xf32>
    %234 = llvm.insertelement %176, %233[%28 : i32] : vector<4xf32>
    %235 = llvm.insertelement %180, %234[%32 : i32] : vector<4xf32>
    %236 = llvm.insertelement %184, %235[%26 : i32] : vector<4xf32>
    %237 = llvm.insertelement %188, %236[%25 : i32] : vector<4xf32>
    %238 = llvm.bitcast %226 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    llvm.store %237, %238 : !llvm.ptr<vector<4xf32>, 3>
    %239 = llvm.addrspacecast %137 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %240 = llvm.load %239 : !llvm.ptr<i32>
    %241 = llvm.bitcast %240 : i32 to vector<1xf32>
    %242 = llvm.extractelement %241[%23 : i32] : vector<1xf32>
    %243 = llvm.addrspacecast %138 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %244 = llvm.load %243 : !llvm.ptr<i32>
    %245 = llvm.bitcast %244 : i32 to vector<1xf32>
    %246 = llvm.extractelement %245[%23 : i32] : vector<1xf32>
    %247 = llvm.addrspacecast %139 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %248 = llvm.load %247 : !llvm.ptr<i32>
    %249 = llvm.bitcast %248 : i32 to vector<1xf32>
    %250 = llvm.extractelement %249[%23 : i32] : vector<1xf32>
    %251 = llvm.addrspacecast %140 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %252 = llvm.load %251 : !llvm.ptr<i32>
    %253 = llvm.bitcast %252 : i32 to vector<1xf32>
    %254 = llvm.extractelement %253[%23 : i32] : vector<1xf32>
    %255 = llvm.addrspacecast %141 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %256 = llvm.load %255 : !llvm.ptr<i32>
    %257 = llvm.bitcast %256 : i32 to vector<1xf32>
    %258 = llvm.extractelement %257[%23 : i32] : vector<1xf32>
    %259 = llvm.addrspacecast %142 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %260 = llvm.load %259 : !llvm.ptr<i32>
    %261 = llvm.bitcast %260 : i32 to vector<1xf32>
    %262 = llvm.extractelement %261[%23 : i32] : vector<1xf32>
    %263 = llvm.addrspacecast %143 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %264 = llvm.load %263 : !llvm.ptr<i32>
    %265 = llvm.bitcast %264 : i32 to vector<1xf32>
    %266 = llvm.extractelement %265[%23 : i32] : vector<1xf32>
    %267 = llvm.addrspacecast %144 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %268 = llvm.load %267 : !llvm.ptr<i32>
    %269 = llvm.bitcast %268 : i32 to vector<1xf32>
    %270 = llvm.extractelement %269[%23 : i32] : vector<1xf32>
    %271 = llvm.getelementptr %114[4096] : (!llvm.ptr<i8, 3>) -> !llvm.ptr<i8, 3>
    %272 = llvm.bitcast %271 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %273 = llvm.mul %28, %29  : i32
    %274 = llvm.add %273, %28  : i32
    %275 = llvm.mul %28, %32  : i32
    %276 = llvm.add %274, %275  : i32
    %277 = llvm.getelementptr %272[%276] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %278 = llvm.udiv %80, %32  : i32
    %279 = llvm.urem %278, %26  : i32
    %280 = llvm.mul %80, %29  : i32
    %281 = llvm.udiv %81, %26  : i32
    %282 = llvm.xor %281, %279  : i32
    %283 = llvm.mul %282, %26  : i32
    %284 = llvm.urem %81, %26  : i32
    %285 = llvm.udiv %284, %26  : i32
    %286 = llvm.mul %285, %26  : i32
    %287 = llvm.add %283, %286  : i32
    %288 = llvm.mul %287, %32  : i32
    %289 = llvm.add %280, %288  : i32
    %290 = llvm.getelementptr %277[%289] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %291 = llvm.mul %28, %29  : i32
    %292 = llvm.add %291, %28  : i32
    %293 = llvm.getelementptr %290[%292] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %294 = llvm.udiv %80, %32  : i32
    %295 = llvm.urem %294, %26  : i32
    %296 = llvm.mul %80, %29  : i32
    %297 = llvm.udiv %82, %26  : i32
    %298 = llvm.xor %297, %295  : i32
    %299 = llvm.mul %298, %26  : i32
    %300 = llvm.urem %82, %26  : i32
    %301 = llvm.udiv %300, %26  : i32
    %302 = llvm.mul %301, %26  : i32
    %303 = llvm.add %299, %302  : i32
    %304 = llvm.mul %303, %32  : i32
    %305 = llvm.add %296, %304  : i32
    %306 = llvm.getelementptr %277[%305] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %307 = llvm.mul %28, %29  : i32
    %308 = llvm.add %307, %28  : i32
    %309 = llvm.getelementptr %306[%308] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %310 = llvm.udiv %80, %32  : i32
    %311 = llvm.urem %310, %26  : i32
    %312 = llvm.mul %80, %29  : i32
    %313 = llvm.udiv %81, %26  : i32
    %314 = llvm.xor %313, %311  : i32
    %315 = llvm.mul %314, %26  : i32
    %316 = llvm.urem %81, %26  : i32
    %317 = llvm.udiv %316, %26  : i32
    %318 = llvm.mul %317, %26  : i32
    %319 = llvm.add %315, %318  : i32
    %320 = llvm.mul %319, %32  : i32
    %321 = llvm.add %312, %320  : i32
    %322 = llvm.getelementptr %277[%321] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %323 = llvm.mul %27, %29  : i32
    %324 = llvm.add %323, %28  : i32
    %325 = llvm.getelementptr %322[%324] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %326 = llvm.udiv %80, %32  : i32
    %327 = llvm.urem %326, %26  : i32
    %328 = llvm.mul %80, %29  : i32
    %329 = llvm.udiv %82, %26  : i32
    %330 = llvm.xor %329, %327  : i32
    %331 = llvm.mul %330, %26  : i32
    %332 = llvm.urem %82, %26  : i32
    %333 = llvm.udiv %332, %26  : i32
    %334 = llvm.mul %333, %26  : i32
    %335 = llvm.add %331, %334  : i32
    %336 = llvm.mul %335, %32  : i32
    %337 = llvm.add %328, %336  : i32
    %338 = llvm.getelementptr %277[%337] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %339 = llvm.mul %27, %29  : i32
    %340 = llvm.add %339, %28  : i32
    %341 = llvm.getelementptr %338[%340] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %342 = llvm.mlir.undef : vector<2xf32>
    %343 = llvm.insertelement %242, %342[%28 : i32] : vector<2xf32>
    %344 = llvm.insertelement %246, %343[%32 : i32] : vector<2xf32>
    %345 = llvm.bitcast %293 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %344, %345 : !llvm.ptr<vector<2xf32>, 3>
    %346 = llvm.mlir.undef : vector<2xf32>
    %347 = llvm.insertelement %250, %346[%28 : i32] : vector<2xf32>
    %348 = llvm.insertelement %254, %347[%32 : i32] : vector<2xf32>
    %349 = llvm.bitcast %309 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %348, %349 : !llvm.ptr<vector<2xf32>, 3>
    %350 = llvm.mlir.undef : vector<2xf32>
    %351 = llvm.insertelement %258, %350[%28 : i32] : vector<2xf32>
    %352 = llvm.insertelement %262, %351[%32 : i32] : vector<2xf32>
    %353 = llvm.bitcast %325 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %352, %353 : !llvm.ptr<vector<2xf32>, 3>
    %354 = llvm.mlir.undef : vector<2xf32>
    %355 = llvm.insertelement %266, %354[%28 : i32] : vector<2xf32>
    %356 = llvm.insertelement %270, %355[%32 : i32] : vector<2xf32>
    %357 = llvm.bitcast %341 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %356, %357 : !llvm.ptr<vector<2xf32>, 3>
    rocdl.barrier
    %358 = rocdl.workitem.id.x : i32
    %359 = llvm.trunc %358 : i32 to i32
    %360 = llvm.udiv %359, %33  : i32
    %361 = llvm.urem %359, %33  : i32
    %362 = llvm.urem %360, %26  : i32
    %363 = llvm.urem %362, %32  : i32
    %364 = llvm.mul %363, %29  : i32
    %365 = llvm.urem %361, %29  : i32
    %366 = llvm.udiv %361, %29  : i32
    %367 = llvm.mul %366, %32  : i32
    %368 = llvm.add %364, %28  : i32
    %369 = llvm.add %368, %28  : i32
    %370 = llvm.add %369, %365  : i32
    %371 = llvm.add %370, %28  : i32
    %372 = llvm.add %28, %28  : i32
    %373 = llvm.add %372, %28  : i32
    %374 = llvm.add %373, %367  : i32
    %375 = llvm.add %374, %28  : i32
    %376 = llvm.add %371, %28  : i32
    %377 = llvm.add %375, %28  : i32
    %378 = llvm.urem %361, %29  : i32
    %379 = llvm.udiv %361, %29  : i32
    %380 = llvm.mul %379, %32  : i32
    %381 = llvm.add %364, %28  : i32
    %382 = llvm.add %381, %28  : i32
    %383 = llvm.add %382, %378  : i32
    %384 = llvm.add %383, %28  : i32
    %385 = llvm.add %28, %28  : i32
    %386 = llvm.add %385, %26  : i32
    %387 = llvm.add %386, %380  : i32
    %388 = llvm.add %387, %28  : i32
    %389 = llvm.add %384, %28  : i32
    %390 = llvm.add %388, %28  : i32
    %391 = llvm.urem %361, %29  : i32
    %392 = llvm.udiv %361, %29  : i32
    %393 = llvm.mul %392, %32  : i32
    %394 = llvm.add %364, %28  : i32
    %395 = llvm.add %394, %28  : i32
    %396 = llvm.add %395, %391  : i32
    %397 = llvm.add %396, %28  : i32
    %398 = llvm.add %28, %28  : i32
    %399 = llvm.add %398, %30  : i32
    %400 = llvm.add %399, %393  : i32
    %401 = llvm.add %400, %28  : i32
    %402 = llvm.add %397, %28  : i32
    %403 = llvm.add %401, %28  : i32
    %404 = llvm.urem %361, %29  : i32
    %405 = llvm.udiv %361, %29  : i32
    %406 = llvm.mul %405, %32  : i32
    %407 = llvm.add %364, %28  : i32
    %408 = llvm.add %407, %28  : i32
    %409 = llvm.add %408, %404  : i32
    %410 = llvm.add %409, %28  : i32
    %411 = llvm.add %28, %28  : i32
    %412 = llvm.add %411, %22  : i32
    %413 = llvm.add %412, %406  : i32
    %414 = llvm.add %413, %28  : i32
    %415 = llvm.add %410, %28  : i32
    %416 = llvm.add %414, %28  : i32
    %417 = llvm.urem %361, %29  : i32
    %418 = llvm.udiv %361, %29  : i32
    %419 = llvm.mul %418, %32  : i32
    %420 = llvm.add %364, %28  : i32
    %421 = llvm.add %420, %28  : i32
    %422 = llvm.add %421, %417  : i32
    %423 = llvm.add %422, %28  : i32
    %424 = llvm.add %28, %28  : i32
    %425 = llvm.add %424, %31  : i32
    %426 = llvm.add %425, %419  : i32
    %427 = llvm.add %426, %28  : i32
    %428 = llvm.add %423, %28  : i32
    %429 = llvm.add %427, %28  : i32
    %430 = llvm.urem %361, %29  : i32
    %431 = llvm.udiv %361, %29  : i32
    %432 = llvm.mul %431, %32  : i32
    %433 = llvm.add %364, %28  : i32
    %434 = llvm.add %433, %28  : i32
    %435 = llvm.add %434, %430  : i32
    %436 = llvm.add %435, %28  : i32
    %437 = llvm.add %28, %28  : i32
    %438 = llvm.add %437, %21  : i32
    %439 = llvm.add %438, %432  : i32
    %440 = llvm.add %439, %28  : i32
    %441 = llvm.add %436, %28  : i32
    %442 = llvm.add %440, %28  : i32
    %443 = llvm.urem %361, %29  : i32
    %444 = llvm.udiv %361, %29  : i32
    %445 = llvm.mul %444, %32  : i32
    %446 = llvm.add %364, %28  : i32
    %447 = llvm.add %446, %28  : i32
    %448 = llvm.add %447, %443  : i32
    %449 = llvm.add %448, %28  : i32
    %450 = llvm.add %28, %28  : i32
    %451 = llvm.add %450, %20  : i32
    %452 = llvm.add %451, %445  : i32
    %453 = llvm.add %452, %28  : i32
    %454 = llvm.add %449, %28  : i32
    %455 = llvm.add %453, %28  : i32
    %456 = llvm.urem %361, %29  : i32
    %457 = llvm.udiv %361, %29  : i32
    %458 = llvm.mul %457, %32  : i32
    %459 = llvm.add %364, %28  : i32
    %460 = llvm.add %459, %28  : i32
    %461 = llvm.add %460, %456  : i32
    %462 = llvm.add %461, %28  : i32
    %463 = llvm.add %28, %28  : i32
    %464 = llvm.add %463, %19  : i32
    %465 = llvm.add %464, %458  : i32
    %466 = llvm.add %465, %28  : i32
    %467 = llvm.add %462, %28  : i32
    %468 = llvm.add %466, %28  : i32
    %469 = llvm.urem %361, %29  : i32
    %470 = llvm.udiv %361, %29  : i32
    %471 = llvm.mul %470, %32  : i32
    %472 = llvm.add %364, %28  : i32
    %473 = llvm.add %472, %28  : i32
    %474 = llvm.add %473, %469  : i32
    %475 = llvm.add %474, %28  : i32
    %476 = llvm.add %28, %28  : i32
    %477 = llvm.add %476, %27  : i32
    %478 = llvm.add %477, %471  : i32
    %479 = llvm.add %478, %28  : i32
    %480 = llvm.add %475, %28  : i32
    %481 = llvm.add %479, %28  : i32
    %482 = llvm.urem %361, %29  : i32
    %483 = llvm.udiv %361, %29  : i32
    %484 = llvm.mul %483, %32  : i32
    %485 = llvm.add %364, %28  : i32
    %486 = llvm.add %485, %28  : i32
    %487 = llvm.add %486, %482  : i32
    %488 = llvm.add %487, %28  : i32
    %489 = llvm.add %28, %28  : i32
    %490 = llvm.add %489, %18  : i32
    %491 = llvm.add %490, %484  : i32
    %492 = llvm.add %491, %28  : i32
    %493 = llvm.add %488, %28  : i32
    %494 = llvm.add %492, %28  : i32
    %495 = llvm.urem %361, %29  : i32
    %496 = llvm.udiv %361, %29  : i32
    %497 = llvm.mul %496, %32  : i32
    %498 = llvm.add %364, %28  : i32
    %499 = llvm.add %498, %28  : i32
    %500 = llvm.add %499, %495  : i32
    %501 = llvm.add %500, %28  : i32
    %502 = llvm.add %28, %28  : i32
    %503 = llvm.add %502, %17  : i32
    %504 = llvm.add %503, %497  : i32
    %505 = llvm.add %504, %28  : i32
    %506 = llvm.add %501, %28  : i32
    %507 = llvm.add %505, %28  : i32
    %508 = llvm.urem %361, %29  : i32
    %509 = llvm.udiv %361, %29  : i32
    %510 = llvm.mul %509, %32  : i32
    %511 = llvm.add %364, %28  : i32
    %512 = llvm.add %511, %28  : i32
    %513 = llvm.add %512, %508  : i32
    %514 = llvm.add %513, %28  : i32
    %515 = llvm.add %28, %28  : i32
    %516 = llvm.add %515, %16  : i32
    %517 = llvm.add %516, %510  : i32
    %518 = llvm.add %517, %28  : i32
    %519 = llvm.add %514, %28  : i32
    %520 = llvm.add %518, %28  : i32
    %521 = llvm.urem %361, %29  : i32
    %522 = llvm.udiv %361, %29  : i32
    %523 = llvm.mul %522, %32  : i32
    %524 = llvm.add %364, %28  : i32
    %525 = llvm.add %524, %28  : i32
    %526 = llvm.add %525, %521  : i32
    %527 = llvm.add %526, %28  : i32
    %528 = llvm.add %28, %28  : i32
    %529 = llvm.add %528, %15  : i32
    %530 = llvm.add %529, %523  : i32
    %531 = llvm.add %530, %28  : i32
    %532 = llvm.add %527, %28  : i32
    %533 = llvm.add %531, %28  : i32
    %534 = llvm.urem %361, %29  : i32
    %535 = llvm.udiv %361, %29  : i32
    %536 = llvm.mul %535, %32  : i32
    %537 = llvm.add %364, %28  : i32
    %538 = llvm.add %537, %28  : i32
    %539 = llvm.add %538, %534  : i32
    %540 = llvm.add %539, %28  : i32
    %541 = llvm.add %28, %28  : i32
    %542 = llvm.add %541, %14  : i32
    %543 = llvm.add %542, %536  : i32
    %544 = llvm.add %543, %28  : i32
    %545 = llvm.add %540, %28  : i32
    %546 = llvm.add %544, %28  : i32
    %547 = llvm.urem %361, %29  : i32
    %548 = llvm.udiv %361, %29  : i32
    %549 = llvm.mul %548, %32  : i32
    %550 = llvm.add %364, %28  : i32
    %551 = llvm.add %550, %28  : i32
    %552 = llvm.add %551, %547  : i32
    %553 = llvm.add %552, %28  : i32
    %554 = llvm.add %28, %28  : i32
    %555 = llvm.add %554, %13  : i32
    %556 = llvm.add %555, %549  : i32
    %557 = llvm.add %556, %28  : i32
    %558 = llvm.add %553, %28  : i32
    %559 = llvm.add %557, %28  : i32
    %560 = llvm.urem %361, %29  : i32
    %561 = llvm.udiv %361, %29  : i32
    %562 = llvm.mul %561, %32  : i32
    %563 = llvm.add %364, %28  : i32
    %564 = llvm.add %563, %28  : i32
    %565 = llvm.add %564, %560  : i32
    %566 = llvm.add %565, %28  : i32
    %567 = llvm.add %28, %28  : i32
    %568 = llvm.add %567, %12  : i32
    %569 = llvm.add %568, %562  : i32
    %570 = llvm.add %569, %28  : i32
    %571 = llvm.add %566, %28  : i32
    %572 = llvm.add %570, %28  : i32
    %573 = llvm.udiv %376, %32  : i32
    %574 = llvm.urem %573, %26  : i32
    %575 = llvm.udiv %377, %31  : i32
    %576 = llvm.xor %575, %574  : i32
    %577 = llvm.mul %576, %31  : i32
    %578 = llvm.urem %377, %31  : i32
    %579 = llvm.add %577, %578  : i32
    %580 = llvm.mul %376, %29  : i32
    %581 = llvm.mul %579, %32  : i32
    %582 = llvm.add %580, %581  : i32
    %583 = llvm.udiv %389, %32  : i32
    %584 = llvm.urem %583, %26  : i32
    %585 = llvm.udiv %390, %31  : i32
    %586 = llvm.xor %585, %584  : i32
    %587 = llvm.mul %586, %31  : i32
    %588 = llvm.urem %390, %31  : i32
    %589 = llvm.add %587, %588  : i32
    %590 = llvm.mul %389, %29  : i32
    %591 = llvm.mul %589, %32  : i32
    %592 = llvm.add %590, %591  : i32
    %593 = llvm.udiv %402, %32  : i32
    %594 = llvm.urem %593, %26  : i32
    %595 = llvm.udiv %403, %31  : i32
    %596 = llvm.xor %595, %594  : i32
    %597 = llvm.mul %596, %31  : i32
    %598 = llvm.urem %403, %31  : i32
    %599 = llvm.add %597, %598  : i32
    %600 = llvm.mul %402, %29  : i32
    %601 = llvm.mul %599, %32  : i32
    %602 = llvm.add %600, %601  : i32
    %603 = llvm.udiv %415, %32  : i32
    %604 = llvm.urem %603, %26  : i32
    %605 = llvm.udiv %416, %31  : i32
    %606 = llvm.xor %605, %604  : i32
    %607 = llvm.mul %606, %31  : i32
    %608 = llvm.urem %416, %31  : i32
    %609 = llvm.add %607, %608  : i32
    %610 = llvm.mul %415, %29  : i32
    %611 = llvm.mul %609, %32  : i32
    %612 = llvm.add %610, %611  : i32
    %613 = llvm.udiv %428, %32  : i32
    %614 = llvm.urem %613, %26  : i32
    %615 = llvm.udiv %429, %31  : i32
    %616 = llvm.xor %615, %614  : i32
    %617 = llvm.mul %616, %31  : i32
    %618 = llvm.urem %429, %31  : i32
    %619 = llvm.add %617, %618  : i32
    %620 = llvm.mul %428, %29  : i32
    %621 = llvm.mul %619, %32  : i32
    %622 = llvm.add %620, %621  : i32
    %623 = llvm.udiv %441, %32  : i32
    %624 = llvm.urem %623, %26  : i32
    %625 = llvm.udiv %442, %31  : i32
    %626 = llvm.xor %625, %624  : i32
    %627 = llvm.mul %626, %31  : i32
    %628 = llvm.urem %442, %31  : i32
    %629 = llvm.add %627, %628  : i32
    %630 = llvm.mul %441, %29  : i32
    %631 = llvm.mul %629, %32  : i32
    %632 = llvm.add %630, %631  : i32
    %633 = llvm.udiv %454, %32  : i32
    %634 = llvm.urem %633, %26  : i32
    %635 = llvm.udiv %455, %31  : i32
    %636 = llvm.xor %635, %634  : i32
    %637 = llvm.mul %636, %31  : i32
    %638 = llvm.urem %455, %31  : i32
    %639 = llvm.add %637, %638  : i32
    %640 = llvm.mul %454, %29  : i32
    %641 = llvm.mul %639, %32  : i32
    %642 = llvm.add %640, %641  : i32
    %643 = llvm.udiv %467, %32  : i32
    %644 = llvm.urem %643, %26  : i32
    %645 = llvm.udiv %468, %31  : i32
    %646 = llvm.xor %645, %644  : i32
    %647 = llvm.mul %646, %31  : i32
    %648 = llvm.urem %468, %31  : i32
    %649 = llvm.add %647, %648  : i32
    %650 = llvm.mul %467, %29  : i32
    %651 = llvm.mul %649, %32  : i32
    %652 = llvm.add %650, %651  : i32
    %653 = llvm.udiv %480, %32  : i32
    %654 = llvm.urem %653, %26  : i32
    %655 = llvm.udiv %481, %31  : i32
    %656 = llvm.xor %655, %654  : i32
    %657 = llvm.mul %656, %31  : i32
    %658 = llvm.urem %481, %31  : i32
    %659 = llvm.add %657, %658  : i32
    %660 = llvm.mul %480, %29  : i32
    %661 = llvm.mul %659, %32  : i32
    %662 = llvm.add %660, %661  : i32
    %663 = llvm.udiv %493, %32  : i32
    %664 = llvm.urem %663, %26  : i32
    %665 = llvm.udiv %494, %31  : i32
    %666 = llvm.xor %665, %664  : i32
    %667 = llvm.mul %666, %31  : i32
    %668 = llvm.urem %494, %31  : i32
    %669 = llvm.add %667, %668  : i32
    %670 = llvm.mul %493, %29  : i32
    %671 = llvm.mul %669, %32  : i32
    %672 = llvm.add %670, %671  : i32
    %673 = llvm.udiv %506, %32  : i32
    %674 = llvm.urem %673, %26  : i32
    %675 = llvm.udiv %507, %31  : i32
    %676 = llvm.xor %675, %674  : i32
    %677 = llvm.mul %676, %31  : i32
    %678 = llvm.urem %507, %31  : i32
    %679 = llvm.add %677, %678  : i32
    %680 = llvm.mul %506, %29  : i32
    %681 = llvm.mul %679, %32  : i32
    %682 = llvm.add %680, %681  : i32
    %683 = llvm.udiv %519, %32  : i32
    %684 = llvm.urem %683, %26  : i32
    %685 = llvm.udiv %520, %31  : i32
    %686 = llvm.xor %685, %684  : i32
    %687 = llvm.mul %686, %31  : i32
    %688 = llvm.urem %520, %31  : i32
    %689 = llvm.add %687, %688  : i32
    %690 = llvm.mul %519, %29  : i32
    %691 = llvm.mul %689, %32  : i32
    %692 = llvm.add %690, %691  : i32
    %693 = llvm.udiv %532, %32  : i32
    %694 = llvm.urem %693, %26  : i32
    %695 = llvm.udiv %533, %31  : i32
    %696 = llvm.xor %695, %694  : i32
    %697 = llvm.mul %696, %31  : i32
    %698 = llvm.urem %533, %31  : i32
    %699 = llvm.add %697, %698  : i32
    %700 = llvm.mul %532, %29  : i32
    %701 = llvm.mul %699, %32  : i32
    %702 = llvm.add %700, %701  : i32
    %703 = llvm.udiv %545, %32  : i32
    %704 = llvm.urem %703, %26  : i32
    %705 = llvm.udiv %546, %31  : i32
    %706 = llvm.xor %705, %704  : i32
    %707 = llvm.mul %706, %31  : i32
    %708 = llvm.urem %546, %31  : i32
    %709 = llvm.add %707, %708  : i32
    %710 = llvm.mul %545, %29  : i32
    %711 = llvm.mul %709, %32  : i32
    %712 = llvm.add %710, %711  : i32
    %713 = llvm.udiv %558, %32  : i32
    %714 = llvm.urem %713, %26  : i32
    %715 = llvm.udiv %559, %31  : i32
    %716 = llvm.xor %715, %714  : i32
    %717 = llvm.mul %716, %31  : i32
    %718 = llvm.urem %559, %31  : i32
    %719 = llvm.add %717, %718  : i32
    %720 = llvm.mul %558, %29  : i32
    %721 = llvm.mul %719, %32  : i32
    %722 = llvm.add %720, %721  : i32
    %723 = llvm.udiv %571, %32  : i32
    %724 = llvm.urem %723, %26  : i32
    %725 = llvm.udiv %572, %31  : i32
    %726 = llvm.xor %725, %724  : i32
    %727 = llvm.mul %726, %31  : i32
    %728 = llvm.urem %572, %31  : i32
    %729 = llvm.add %727, %728  : i32
    %730 = llvm.mul %571, %29  : i32
    %731 = llvm.mul %729, %32  : i32
    %732 = llvm.add %730, %731  : i32
    %733 = llvm.mul %28, %29  : i32
    %734 = llvm.sub %28, %733  : i32
    %735 = llvm.getelementptr %189[%734] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %736 = llvm.mul %28, %32  : i32
    %737 = llvm.sub %28, %736  : i32
    %738 = llvm.getelementptr %735[%737] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %739 = llvm.getelementptr %738[%582] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %740 = llvm.load %739 : !llvm.ptr<f32, 3>
    %741 = llvm.getelementptr %738[%592] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %742 = llvm.load %741 : !llvm.ptr<f32, 3>
    %743 = llvm.getelementptr %738[%602] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %744 = llvm.load %743 : !llvm.ptr<f32, 3>
    %745 = llvm.getelementptr %738[%612] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %746 = llvm.load %745 : !llvm.ptr<f32, 3>
    %747 = llvm.getelementptr %738[%622] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %748 = llvm.load %747 : !llvm.ptr<f32, 3>
    %749 = llvm.getelementptr %738[%632] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %750 = llvm.load %749 : !llvm.ptr<f32, 3>
    %751 = llvm.getelementptr %738[%642] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %752 = llvm.load %751 : !llvm.ptr<f32, 3>
    %753 = llvm.getelementptr %738[%652] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %754 = llvm.load %753 : !llvm.ptr<f32, 3>
    %755 = llvm.getelementptr %738[%662] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %756 = llvm.load %755 : !llvm.ptr<f32, 3>
    %757 = llvm.getelementptr %738[%672] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %758 = llvm.load %757 : !llvm.ptr<f32, 3>
    %759 = llvm.getelementptr %738[%682] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %760 = llvm.load %759 : !llvm.ptr<f32, 3>
    %761 = llvm.getelementptr %738[%692] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %762 = llvm.load %761 : !llvm.ptr<f32, 3>
    %763 = llvm.getelementptr %738[%702] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %764 = llvm.load %763 : !llvm.ptr<f32, 3>
    %765 = llvm.getelementptr %738[%712] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %766 = llvm.load %765 : !llvm.ptr<f32, 3>
    %767 = llvm.getelementptr %738[%722] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %768 = llvm.load %767 : !llvm.ptr<f32, 3>
    %769 = llvm.getelementptr %738[%732] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %770 = llvm.load %769 : !llvm.ptr<f32, 3>
    %771 = rocdl.workitem.id.x : i32
    %772 = llvm.trunc %771 : i32 to i32
    %773 = llvm.udiv %772, %33  : i32
    %774 = llvm.urem %772, %33  : i32
    %775 = llvm.udiv %773, %26  : i32
    %776 = llvm.urem %775, %32  : i32
    %777 = llvm.urem %776, %32  : i32
    %778 = llvm.mul %777, %29  : i32
    %779 = llvm.urem %774, %29  : i32
    %780 = llvm.udiv %774, %29  : i32
    %781 = llvm.mul %780, %32  : i32
    %782 = llvm.add %778, %28  : i32
    %783 = llvm.add %782, %28  : i32
    %784 = llvm.add %783, %779  : i32
    %785 = llvm.add %784, %28  : i32
    %786 = llvm.add %28, %28  : i32
    %787 = llvm.add %786, %28  : i32
    %788 = llvm.add %787, %781  : i32
    %789 = llvm.add %788, %28  : i32
    %790 = llvm.add %785, %28  : i32
    %791 = llvm.add %789, %28  : i32
    %792 = llvm.urem %774, %29  : i32
    %793 = llvm.udiv %774, %29  : i32
    %794 = llvm.mul %793, %32  : i32
    %795 = llvm.add %778, %28  : i32
    %796 = llvm.add %795, %28  : i32
    %797 = llvm.add %796, %792  : i32
    %798 = llvm.add %797, %28  : i32
    %799 = llvm.add %28, %28  : i32
    %800 = llvm.add %799, %26  : i32
    %801 = llvm.add %800, %794  : i32
    %802 = llvm.add %801, %28  : i32
    %803 = llvm.add %798, %28  : i32
    %804 = llvm.add %802, %28  : i32
    %805 = llvm.urem %774, %29  : i32
    %806 = llvm.udiv %774, %29  : i32
    %807 = llvm.mul %806, %32  : i32
    %808 = llvm.add %778, %28  : i32
    %809 = llvm.add %808, %28  : i32
    %810 = llvm.add %809, %805  : i32
    %811 = llvm.add %810, %28  : i32
    %812 = llvm.add %28, %28  : i32
    %813 = llvm.add %812, %30  : i32
    %814 = llvm.add %813, %807  : i32
    %815 = llvm.add %814, %28  : i32
    %816 = llvm.add %811, %28  : i32
    %817 = llvm.add %815, %28  : i32
    %818 = llvm.urem %774, %29  : i32
    %819 = llvm.udiv %774, %29  : i32
    %820 = llvm.mul %819, %32  : i32
    %821 = llvm.add %778, %28  : i32
    %822 = llvm.add %821, %28  : i32
    %823 = llvm.add %822, %818  : i32
    %824 = llvm.add %823, %28  : i32
    %825 = llvm.add %28, %28  : i32
    %826 = llvm.add %825, %22  : i32
    %827 = llvm.add %826, %820  : i32
    %828 = llvm.add %827, %28  : i32
    %829 = llvm.add %824, %28  : i32
    %830 = llvm.add %828, %28  : i32
    %831 = llvm.urem %774, %29  : i32
    %832 = llvm.udiv %774, %29  : i32
    %833 = llvm.mul %832, %32  : i32
    %834 = llvm.add %778, %28  : i32
    %835 = llvm.add %834, %28  : i32
    %836 = llvm.add %835, %831  : i32
    %837 = llvm.add %836, %28  : i32
    %838 = llvm.add %28, %28  : i32
    %839 = llvm.add %838, %31  : i32
    %840 = llvm.add %839, %833  : i32
    %841 = llvm.add %840, %28  : i32
    %842 = llvm.add %837, %28  : i32
    %843 = llvm.add %841, %28  : i32
    %844 = llvm.urem %774, %29  : i32
    %845 = llvm.udiv %774, %29  : i32
    %846 = llvm.mul %845, %32  : i32
    %847 = llvm.add %778, %28  : i32
    %848 = llvm.add %847, %28  : i32
    %849 = llvm.add %848, %844  : i32
    %850 = llvm.add %849, %28  : i32
    %851 = llvm.add %28, %28  : i32
    %852 = llvm.add %851, %21  : i32
    %853 = llvm.add %852, %846  : i32
    %854 = llvm.add %853, %28  : i32
    %855 = llvm.add %850, %28  : i32
    %856 = llvm.add %854, %28  : i32
    %857 = llvm.urem %774, %29  : i32
    %858 = llvm.udiv %774, %29  : i32
    %859 = llvm.mul %858, %32  : i32
    %860 = llvm.add %778, %28  : i32
    %861 = llvm.add %860, %28  : i32
    %862 = llvm.add %861, %857  : i32
    %863 = llvm.add %862, %28  : i32
    %864 = llvm.add %28, %28  : i32
    %865 = llvm.add %864, %20  : i32
    %866 = llvm.add %865, %859  : i32
    %867 = llvm.add %866, %28  : i32
    %868 = llvm.add %863, %28  : i32
    %869 = llvm.add %867, %28  : i32
    %870 = llvm.urem %774, %29  : i32
    %871 = llvm.udiv %774, %29  : i32
    %872 = llvm.mul %871, %32  : i32
    %873 = llvm.add %778, %28  : i32
    %874 = llvm.add %873, %28  : i32
    %875 = llvm.add %874, %870  : i32
    %876 = llvm.add %875, %28  : i32
    %877 = llvm.add %28, %28  : i32
    %878 = llvm.add %877, %19  : i32
    %879 = llvm.add %878, %872  : i32
    %880 = llvm.add %879, %28  : i32
    %881 = llvm.add %876, %28  : i32
    %882 = llvm.add %880, %28  : i32
    %883 = llvm.urem %774, %29  : i32
    %884 = llvm.udiv %774, %29  : i32
    %885 = llvm.mul %884, %32  : i32
    %886 = llvm.add %778, %28  : i32
    %887 = llvm.add %886, %28  : i32
    %888 = llvm.add %887, %883  : i32
    %889 = llvm.add %888, %28  : i32
    %890 = llvm.add %28, %28  : i32
    %891 = llvm.add %890, %27  : i32
    %892 = llvm.add %891, %885  : i32
    %893 = llvm.add %892, %28  : i32
    %894 = llvm.add %889, %28  : i32
    %895 = llvm.add %893, %28  : i32
    %896 = llvm.urem %774, %29  : i32
    %897 = llvm.udiv %774, %29  : i32
    %898 = llvm.mul %897, %32  : i32
    %899 = llvm.add %778, %28  : i32
    %900 = llvm.add %899, %28  : i32
    %901 = llvm.add %900, %896  : i32
    %902 = llvm.add %901, %28  : i32
    %903 = llvm.add %28, %28  : i32
    %904 = llvm.add %903, %18  : i32
    %905 = llvm.add %904, %898  : i32
    %906 = llvm.add %905, %28  : i32
    %907 = llvm.add %902, %28  : i32
    %908 = llvm.add %906, %28  : i32
    %909 = llvm.urem %774, %29  : i32
    %910 = llvm.udiv %774, %29  : i32
    %911 = llvm.mul %910, %32  : i32
    %912 = llvm.add %778, %28  : i32
    %913 = llvm.add %912, %28  : i32
    %914 = llvm.add %913, %909  : i32
    %915 = llvm.add %914, %28  : i32
    %916 = llvm.add %28, %28  : i32
    %917 = llvm.add %916, %17  : i32
    %918 = llvm.add %917, %911  : i32
    %919 = llvm.add %918, %28  : i32
    %920 = llvm.add %915, %28  : i32
    %921 = llvm.add %919, %28  : i32
    %922 = llvm.urem %774, %29  : i32
    %923 = llvm.udiv %774, %29  : i32
    %924 = llvm.mul %923, %32  : i32
    %925 = llvm.add %778, %28  : i32
    %926 = llvm.add %925, %28  : i32
    %927 = llvm.add %926, %922  : i32
    %928 = llvm.add %927, %28  : i32
    %929 = llvm.add %28, %28  : i32
    %930 = llvm.add %929, %16  : i32
    %931 = llvm.add %930, %924  : i32
    %932 = llvm.add %931, %28  : i32
    %933 = llvm.add %928, %28  : i32
    %934 = llvm.add %932, %28  : i32
    %935 = llvm.urem %774, %29  : i32
    %936 = llvm.udiv %774, %29  : i32
    %937 = llvm.mul %936, %32  : i32
    %938 = llvm.add %778, %28  : i32
    %939 = llvm.add %938, %28  : i32
    %940 = llvm.add %939, %935  : i32
    %941 = llvm.add %940, %28  : i32
    %942 = llvm.add %28, %28  : i32
    %943 = llvm.add %942, %15  : i32
    %944 = llvm.add %943, %937  : i32
    %945 = llvm.add %944, %28  : i32
    %946 = llvm.add %941, %28  : i32
    %947 = llvm.add %945, %28  : i32
    %948 = llvm.urem %774, %29  : i32
    %949 = llvm.udiv %774, %29  : i32
    %950 = llvm.mul %949, %32  : i32
    %951 = llvm.add %778, %28  : i32
    %952 = llvm.add %951, %28  : i32
    %953 = llvm.add %952, %948  : i32
    %954 = llvm.add %953, %28  : i32
    %955 = llvm.add %28, %28  : i32
    %956 = llvm.add %955, %14  : i32
    %957 = llvm.add %956, %950  : i32
    %958 = llvm.add %957, %28  : i32
    %959 = llvm.add %954, %28  : i32
    %960 = llvm.add %958, %28  : i32
    %961 = llvm.urem %774, %29  : i32
    %962 = llvm.udiv %774, %29  : i32
    %963 = llvm.mul %962, %32  : i32
    %964 = llvm.add %778, %28  : i32
    %965 = llvm.add %964, %28  : i32
    %966 = llvm.add %965, %961  : i32
    %967 = llvm.add %966, %28  : i32
    %968 = llvm.add %28, %28  : i32
    %969 = llvm.add %968, %13  : i32
    %970 = llvm.add %969, %963  : i32
    %971 = llvm.add %970, %28  : i32
    %972 = llvm.add %967, %28  : i32
    %973 = llvm.add %971, %28  : i32
    %974 = llvm.urem %774, %29  : i32
    %975 = llvm.udiv %774, %29  : i32
    %976 = llvm.mul %975, %32  : i32
    %977 = llvm.add %778, %28  : i32
    %978 = llvm.add %977, %28  : i32
    %979 = llvm.add %978, %974  : i32
    %980 = llvm.add %979, %28  : i32
    %981 = llvm.add %28, %28  : i32
    %982 = llvm.add %981, %12  : i32
    %983 = llvm.add %982, %976  : i32
    %984 = llvm.add %983, %28  : i32
    %985 = llvm.add %980, %28  : i32
    %986 = llvm.add %984, %28  : i32
    %987 = llvm.udiv %791, %32  : i32
    %988 = llvm.urem %987, %26  : i32
    %989 = llvm.udiv %790, %26  : i32
    %990 = llvm.xor %989, %988  : i32
    %991 = llvm.mul %990, %26  : i32
    %992 = llvm.urem %790, %26  : i32
    %993 = llvm.add %991, %992  : i32
    %994 = llvm.mul %791, %29  : i32
    %995 = llvm.mul %993, %32  : i32
    %996 = llvm.add %994, %995  : i32
    %997 = llvm.udiv %804, %32  : i32
    %998 = llvm.urem %997, %26  : i32
    %999 = llvm.udiv %803, %26  : i32
    %1000 = llvm.xor %999, %998  : i32
    %1001 = llvm.mul %1000, %26  : i32
    %1002 = llvm.urem %803, %26  : i32
    %1003 = llvm.add %1001, %1002  : i32
    %1004 = llvm.mul %804, %29  : i32
    %1005 = llvm.mul %1003, %32  : i32
    %1006 = llvm.add %1004, %1005  : i32
    %1007 = llvm.udiv %817, %32  : i32
    %1008 = llvm.urem %1007, %26  : i32
    %1009 = llvm.udiv %816, %26  : i32
    %1010 = llvm.xor %1009, %1008  : i32
    %1011 = llvm.mul %1010, %26  : i32
    %1012 = llvm.urem %816, %26  : i32
    %1013 = llvm.add %1011, %1012  : i32
    %1014 = llvm.mul %817, %29  : i32
    %1015 = llvm.mul %1013, %32  : i32
    %1016 = llvm.add %1014, %1015  : i32
    %1017 = llvm.udiv %830, %32  : i32
    %1018 = llvm.urem %1017, %26  : i32
    %1019 = llvm.udiv %829, %26  : i32
    %1020 = llvm.xor %1019, %1018  : i32
    %1021 = llvm.mul %1020, %26  : i32
    %1022 = llvm.urem %829, %26  : i32
    %1023 = llvm.add %1021, %1022  : i32
    %1024 = llvm.mul %830, %29  : i32
    %1025 = llvm.mul %1023, %32  : i32
    %1026 = llvm.add %1024, %1025  : i32
    %1027 = llvm.udiv %843, %32  : i32
    %1028 = llvm.urem %1027, %26  : i32
    %1029 = llvm.udiv %842, %26  : i32
    %1030 = llvm.xor %1029, %1028  : i32
    %1031 = llvm.mul %1030, %26  : i32
    %1032 = llvm.urem %842, %26  : i32
    %1033 = llvm.add %1031, %1032  : i32
    %1034 = llvm.mul %843, %29  : i32
    %1035 = llvm.mul %1033, %32  : i32
    %1036 = llvm.add %1034, %1035  : i32
    %1037 = llvm.udiv %856, %32  : i32
    %1038 = llvm.urem %1037, %26  : i32
    %1039 = llvm.udiv %855, %26  : i32
    %1040 = llvm.xor %1039, %1038  : i32
    %1041 = llvm.mul %1040, %26  : i32
    %1042 = llvm.urem %855, %26  : i32
    %1043 = llvm.add %1041, %1042  : i32
    %1044 = llvm.mul %856, %29  : i32
    %1045 = llvm.mul %1043, %32  : i32
    %1046 = llvm.add %1044, %1045  : i32
    %1047 = llvm.udiv %869, %32  : i32
    %1048 = llvm.urem %1047, %26  : i32
    %1049 = llvm.udiv %868, %26  : i32
    %1050 = llvm.xor %1049, %1048  : i32
    %1051 = llvm.mul %1050, %26  : i32
    %1052 = llvm.urem %868, %26  : i32
    %1053 = llvm.add %1051, %1052  : i32
    %1054 = llvm.mul %869, %29  : i32
    %1055 = llvm.mul %1053, %32  : i32
    %1056 = llvm.add %1054, %1055  : i32
    %1057 = llvm.udiv %882, %32  : i32
    %1058 = llvm.urem %1057, %26  : i32
    %1059 = llvm.udiv %881, %26  : i32
    %1060 = llvm.xor %1059, %1058  : i32
    %1061 = llvm.mul %1060, %26  : i32
    %1062 = llvm.urem %881, %26  : i32
    %1063 = llvm.add %1061, %1062  : i32
    %1064 = llvm.mul %882, %29  : i32
    %1065 = llvm.mul %1063, %32  : i32
    %1066 = llvm.add %1064, %1065  : i32
    %1067 = llvm.udiv %895, %32  : i32
    %1068 = llvm.urem %1067, %26  : i32
    %1069 = llvm.udiv %894, %26  : i32
    %1070 = llvm.xor %1069, %1068  : i32
    %1071 = llvm.mul %1070, %26  : i32
    %1072 = llvm.urem %894, %26  : i32
    %1073 = llvm.add %1071, %1072  : i32
    %1074 = llvm.mul %895, %29  : i32
    %1075 = llvm.mul %1073, %32  : i32
    %1076 = llvm.add %1074, %1075  : i32
    %1077 = llvm.udiv %908, %32  : i32
    %1078 = llvm.urem %1077, %26  : i32
    %1079 = llvm.udiv %907, %26  : i32
    %1080 = llvm.xor %1079, %1078  : i32
    %1081 = llvm.mul %1080, %26  : i32
    %1082 = llvm.urem %907, %26  : i32
    %1083 = llvm.add %1081, %1082  : i32
    %1084 = llvm.mul %908, %29  : i32
    %1085 = llvm.mul %1083, %32  : i32
    %1086 = llvm.add %1084, %1085  : i32
    %1087 = llvm.udiv %921, %32  : i32
    %1088 = llvm.urem %1087, %26  : i32
    %1089 = llvm.udiv %920, %26  : i32
    %1090 = llvm.xor %1089, %1088  : i32
    %1091 = llvm.mul %1090, %26  : i32
    %1092 = llvm.urem %920, %26  : i32
    %1093 = llvm.add %1091, %1092  : i32
    %1094 = llvm.mul %921, %29  : i32
    %1095 = llvm.mul %1093, %32  : i32
    %1096 = llvm.add %1094, %1095  : i32
    %1097 = llvm.udiv %934, %32  : i32
    %1098 = llvm.urem %1097, %26  : i32
    %1099 = llvm.udiv %933, %26  : i32
    %1100 = llvm.xor %1099, %1098  : i32
    %1101 = llvm.mul %1100, %26  : i32
    %1102 = llvm.urem %933, %26  : i32
    %1103 = llvm.add %1101, %1102  : i32
    %1104 = llvm.mul %934, %29  : i32
    %1105 = llvm.mul %1103, %32  : i32
    %1106 = llvm.add %1104, %1105  : i32
    %1107 = llvm.udiv %947, %32  : i32
    %1108 = llvm.urem %1107, %26  : i32
    %1109 = llvm.udiv %946, %26  : i32
    %1110 = llvm.xor %1109, %1108  : i32
    %1111 = llvm.mul %1110, %26  : i32
    %1112 = llvm.urem %946, %26  : i32
    %1113 = llvm.add %1111, %1112  : i32
    %1114 = llvm.mul %947, %29  : i32
    %1115 = llvm.mul %1113, %32  : i32
    %1116 = llvm.add %1114, %1115  : i32
    %1117 = llvm.udiv %960, %32  : i32
    %1118 = llvm.urem %1117, %26  : i32
    %1119 = llvm.udiv %959, %26  : i32
    %1120 = llvm.xor %1119, %1118  : i32
    %1121 = llvm.mul %1120, %26  : i32
    %1122 = llvm.urem %959, %26  : i32
    %1123 = llvm.add %1121, %1122  : i32
    %1124 = llvm.mul %960, %29  : i32
    %1125 = llvm.mul %1123, %32  : i32
    %1126 = llvm.add %1124, %1125  : i32
    %1127 = llvm.udiv %973, %32  : i32
    %1128 = llvm.urem %1127, %26  : i32
    %1129 = llvm.udiv %972, %26  : i32
    %1130 = llvm.xor %1129, %1128  : i32
    %1131 = llvm.mul %1130, %26  : i32
    %1132 = llvm.urem %972, %26  : i32
    %1133 = llvm.add %1131, %1132  : i32
    %1134 = llvm.mul %973, %29  : i32
    %1135 = llvm.mul %1133, %32  : i32
    %1136 = llvm.add %1134, %1135  : i32
    %1137 = llvm.udiv %986, %32  : i32
    %1138 = llvm.urem %1137, %26  : i32
    %1139 = llvm.udiv %985, %26  : i32
    %1140 = llvm.xor %1139, %1138  : i32
    %1141 = llvm.mul %1140, %26  : i32
    %1142 = llvm.urem %985, %26  : i32
    %1143 = llvm.add %1141, %1142  : i32
    %1144 = llvm.mul %986, %29  : i32
    %1145 = llvm.mul %1143, %32  : i32
    %1146 = llvm.add %1144, %1145  : i32
    %1147 = llvm.mul %28, %29  : i32
    %1148 = llvm.sub %28, %1147  : i32
    %1149 = llvm.getelementptr %272[%1148] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1150 = llvm.mul %28, %32  : i32
    %1151 = llvm.sub %28, %1150  : i32
    %1152 = llvm.getelementptr %1149[%1151] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1153 = llvm.getelementptr %1152[%996] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1154 = llvm.load %1153 : !llvm.ptr<f32, 3>
    %1155 = llvm.getelementptr %1152[%1006] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1156 = llvm.load %1155 : !llvm.ptr<f32, 3>
    %1157 = llvm.getelementptr %1152[%1016] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1158 = llvm.load %1157 : !llvm.ptr<f32, 3>
    %1159 = llvm.getelementptr %1152[%1026] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1160 = llvm.load %1159 : !llvm.ptr<f32, 3>
    %1161 = llvm.getelementptr %1152[%1036] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1162 = llvm.load %1161 : !llvm.ptr<f32, 3>
    %1163 = llvm.getelementptr %1152[%1046] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1164 = llvm.load %1163 : !llvm.ptr<f32, 3>
    %1165 = llvm.getelementptr %1152[%1056] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1166 = llvm.load %1165 : !llvm.ptr<f32, 3>
    %1167 = llvm.getelementptr %1152[%1066] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1168 = llvm.load %1167 : !llvm.ptr<f32, 3>
    %1169 = llvm.getelementptr %1152[%1076] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1170 = llvm.load %1169 : !llvm.ptr<f32, 3>
    %1171 = llvm.getelementptr %1152[%1086] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1172 = llvm.load %1171 : !llvm.ptr<f32, 3>
    %1173 = llvm.getelementptr %1152[%1096] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1174 = llvm.load %1173 : !llvm.ptr<f32, 3>
    %1175 = llvm.getelementptr %1152[%1106] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1176 = llvm.load %1175 : !llvm.ptr<f32, 3>
    %1177 = llvm.getelementptr %1152[%1116] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1178 = llvm.load %1177 : !llvm.ptr<f32, 3>
    %1179 = llvm.getelementptr %1152[%1126] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1180 = llvm.load %1179 : !llvm.ptr<f32, 3>
    %1181 = llvm.getelementptr %1152[%1136] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1182 = llvm.load %1181 : !llvm.ptr<f32, 3>
    %1183 = llvm.getelementptr %1152[%1146] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1184 = llvm.load %1183 : !llvm.ptr<f32, 3>
    %1185 = llvm.mlir.undef : vector<16xf32>
    %1186 = llvm.insertelement %24, %1185[%28 : i32] : vector<16xf32>
    %1187 = llvm.insertelement %24, %1186[%32 : i32] : vector<16xf32>
    %1188 = llvm.insertelement %24, %1187[%26 : i32] : vector<16xf32>
    %1189 = llvm.insertelement %24, %1188[%25 : i32] : vector<16xf32>
    %1190 = llvm.insertelement %24, %1189[%30 : i32] : vector<16xf32>
    %1191 = llvm.insertelement %24, %1190[%11 : i32] : vector<16xf32>
    %1192 = llvm.insertelement %24, %1191[%22 : i32] : vector<16xf32>
    %1193 = llvm.insertelement %24, %1192[%10 : i32] : vector<16xf32>
    %1194 = llvm.insertelement %24, %1193[%31 : i32] : vector<16xf32>
    %1195 = llvm.insertelement %24, %1194[%9 : i32] : vector<16xf32>
    %1196 = llvm.insertelement %24, %1195[%21 : i32] : vector<16xf32>
    %1197 = llvm.insertelement %24, %1196[%8 : i32] : vector<16xf32>
    %1198 = llvm.insertelement %24, %1197[%20 : i32] : vector<16xf32>
    %1199 = llvm.insertelement %24, %1198[%7 : i32] : vector<16xf32>
    %1200 = llvm.insertelement %24, %1199[%19 : i32] : vector<16xf32>
    %1201 = llvm.insertelement %24, %1200[%6 : i32] : vector<16xf32>
    %1202 = rocdl.mfma.f32.32x32x2f32 %740, %1154, %1201, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1203 = rocdl.mfma.f32.32x32x2f32 %742, %1156, %1202, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1204 = rocdl.mfma.f32.32x32x2f32 %744, %1158, %1203, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1205 = rocdl.mfma.f32.32x32x2f32 %746, %1160, %1204, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1206 = rocdl.mfma.f32.32x32x2f32 %748, %1162, %1205, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1207 = rocdl.mfma.f32.32x32x2f32 %750, %1164, %1206, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1208 = rocdl.mfma.f32.32x32x2f32 %752, %1166, %1207, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1209 = rocdl.mfma.f32.32x32x2f32 %754, %1168, %1208, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1210 = rocdl.mfma.f32.32x32x2f32 %756, %1170, %1209, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1211 = rocdl.mfma.f32.32x32x2f32 %758, %1172, %1210, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1212 = rocdl.mfma.f32.32x32x2f32 %760, %1174, %1211, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1213 = rocdl.mfma.f32.32x32x2f32 %762, %1176, %1212, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1214 = rocdl.mfma.f32.32x32x2f32 %764, %1178, %1213, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1215 = rocdl.mfma.f32.32x32x2f32 %766, %1180, %1214, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1216 = rocdl.mfma.f32.32x32x2f32 %768, %1182, %1215, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1217 = rocdl.mfma.f32.32x32x2f32 %770, %1184, %1216, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %1218 = llvm.extractelement %1217[%28 : i32] : vector<16xf32>
    %1219 = llvm.extractelement %1217[%32 : i32] : vector<16xf32>
    %1220 = llvm.extractelement %1217[%26 : i32] : vector<16xf32>
    %1221 = llvm.extractelement %1217[%25 : i32] : vector<16xf32>
    %1222 = llvm.extractelement %1217[%30 : i32] : vector<16xf32>
    %1223 = llvm.extractelement %1217[%11 : i32] : vector<16xf32>
    %1224 = llvm.extractelement %1217[%22 : i32] : vector<16xf32>
    %1225 = llvm.extractelement %1217[%10 : i32] : vector<16xf32>
    %1226 = llvm.extractelement %1217[%31 : i32] : vector<16xf32>
    %1227 = llvm.extractelement %1217[%9 : i32] : vector<16xf32>
    %1228 = llvm.extractelement %1217[%21 : i32] : vector<16xf32>
    %1229 = llvm.extractelement %1217[%8 : i32] : vector<16xf32>
    %1230 = llvm.extractelement %1217[%20 : i32] : vector<16xf32>
    %1231 = llvm.extractelement %1217[%7 : i32] : vector<16xf32>
    %1232 = llvm.extractelement %1217[%19 : i32] : vector<16xf32>
    %1233 = llvm.extractelement %1217[%6 : i32] : vector<16xf32>
    rocdl.barrier
    %1234 = llvm.bitcast %114 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %1235 = llvm.add %97, %28  : i32
    %1236 = llvm.add %99, %28  : i32
    %1237 = llvm.mul %1235, %5  : i32
    %1238 = llvm.add %1237, %1236  : i32
    %1239 = llvm.getelementptr %1234[%1238] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1240 = llvm.bitcast %1239 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1241 = llvm.mlir.undef : vector<1xf32>
    %1242 = llvm.insertelement %1218, %1241[%28 : i32] : vector<1xf32>
    llvm.store %1242, %1240 : !llvm.ptr<vector<1xf32>, 3>
    %1243 = llvm.add %97, %32  : i32
    %1244 = llvm.add %99, %28  : i32
    %1245 = llvm.mul %1243, %5  : i32
    %1246 = llvm.add %1245, %1244  : i32
    %1247 = llvm.getelementptr %1234[%1246] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1248 = llvm.bitcast %1247 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1249 = llvm.mlir.undef : vector<1xf32>
    %1250 = llvm.insertelement %1219, %1249[%28 : i32] : vector<1xf32>
    llvm.store %1250, %1248 : !llvm.ptr<vector<1xf32>, 3>
    %1251 = llvm.add %97, %26  : i32
    %1252 = llvm.add %99, %28  : i32
    %1253 = llvm.mul %1251, %5  : i32
    %1254 = llvm.add %1253, %1252  : i32
    %1255 = llvm.getelementptr %1234[%1254] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1256 = llvm.bitcast %1255 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1257 = llvm.mlir.undef : vector<1xf32>
    %1258 = llvm.insertelement %1220, %1257[%28 : i32] : vector<1xf32>
    llvm.store %1258, %1256 : !llvm.ptr<vector<1xf32>, 3>
    %1259 = llvm.add %97, %25  : i32
    %1260 = llvm.add %99, %28  : i32
    %1261 = llvm.mul %1259, %5  : i32
    %1262 = llvm.add %1261, %1260  : i32
    %1263 = llvm.getelementptr %1234[%1262] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1264 = llvm.bitcast %1263 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1265 = llvm.mlir.undef : vector<1xf32>
    %1266 = llvm.insertelement %1221, %1265[%28 : i32] : vector<1xf32>
    llvm.store %1266, %1264 : !llvm.ptr<vector<1xf32>, 3>
    %1267 = llvm.add %97, %31  : i32
    %1268 = llvm.add %99, %28  : i32
    %1269 = llvm.mul %1267, %5  : i32
    %1270 = llvm.add %1269, %1268  : i32
    %1271 = llvm.getelementptr %1234[%1270] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1272 = llvm.bitcast %1271 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1273 = llvm.mlir.undef : vector<1xf32>
    %1274 = llvm.insertelement %1222, %1273[%28 : i32] : vector<1xf32>
    llvm.store %1274, %1272 : !llvm.ptr<vector<1xf32>, 3>
    %1275 = llvm.add %97, %9  : i32
    %1276 = llvm.add %99, %28  : i32
    %1277 = llvm.mul %1275, %5  : i32
    %1278 = llvm.add %1277, %1276  : i32
    %1279 = llvm.getelementptr %1234[%1278] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1280 = llvm.bitcast %1279 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1281 = llvm.mlir.undef : vector<1xf32>
    %1282 = llvm.insertelement %1223, %1281[%28 : i32] : vector<1xf32>
    llvm.store %1282, %1280 : !llvm.ptr<vector<1xf32>, 3>
    %1283 = llvm.add %97, %21  : i32
    %1284 = llvm.add %99, %28  : i32
    %1285 = llvm.mul %1283, %5  : i32
    %1286 = llvm.add %1285, %1284  : i32
    %1287 = llvm.getelementptr %1234[%1286] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1288 = llvm.bitcast %1287 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1289 = llvm.mlir.undef : vector<1xf32>
    %1290 = llvm.insertelement %1224, %1289[%28 : i32] : vector<1xf32>
    llvm.store %1290, %1288 : !llvm.ptr<vector<1xf32>, 3>
    %1291 = llvm.add %97, %8  : i32
    %1292 = llvm.add %99, %28  : i32
    %1293 = llvm.mul %1291, %5  : i32
    %1294 = llvm.add %1293, %1292  : i32
    %1295 = llvm.getelementptr %1234[%1294] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1296 = llvm.bitcast %1295 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1297 = llvm.mlir.undef : vector<1xf32>
    %1298 = llvm.insertelement %1225, %1297[%28 : i32] : vector<1xf32>
    llvm.store %1298, %1296 : !llvm.ptr<vector<1xf32>, 3>
    %1299 = llvm.add %97, %27  : i32
    %1300 = llvm.add %99, %28  : i32
    %1301 = llvm.mul %1299, %5  : i32
    %1302 = llvm.add %1301, %1300  : i32
    %1303 = llvm.getelementptr %1234[%1302] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1304 = llvm.bitcast %1303 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1305 = llvm.mlir.undef : vector<1xf32>
    %1306 = llvm.insertelement %1226, %1305[%28 : i32] : vector<1xf32>
    llvm.store %1306, %1304 : !llvm.ptr<vector<1xf32>, 3>
    %1307 = llvm.add %97, %4  : i32
    %1308 = llvm.add %99, %28  : i32
    %1309 = llvm.mul %1307, %5  : i32
    %1310 = llvm.add %1309, %1308  : i32
    %1311 = llvm.getelementptr %1234[%1310] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1312 = llvm.bitcast %1311 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1313 = llvm.mlir.undef : vector<1xf32>
    %1314 = llvm.insertelement %1227, %1313[%28 : i32] : vector<1xf32>
    llvm.store %1314, %1312 : !llvm.ptr<vector<1xf32>, 3>
    %1315 = llvm.add %97, %18  : i32
    %1316 = llvm.add %99, %28  : i32
    %1317 = llvm.mul %1315, %5  : i32
    %1318 = llvm.add %1317, %1316  : i32
    %1319 = llvm.getelementptr %1234[%1318] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1320 = llvm.bitcast %1319 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1321 = llvm.mlir.undef : vector<1xf32>
    %1322 = llvm.insertelement %1228, %1321[%28 : i32] : vector<1xf32>
    llvm.store %1322, %1320 : !llvm.ptr<vector<1xf32>, 3>
    %1323 = llvm.add %97, %3  : i32
    %1324 = llvm.add %99, %28  : i32
    %1325 = llvm.mul %1323, %5  : i32
    %1326 = llvm.add %1325, %1324  : i32
    %1327 = llvm.getelementptr %1234[%1326] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1328 = llvm.bitcast %1327 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1329 = llvm.mlir.undef : vector<1xf32>
    %1330 = llvm.insertelement %1229, %1329[%28 : i32] : vector<1xf32>
    llvm.store %1330, %1328 : !llvm.ptr<vector<1xf32>, 3>
    %1331 = llvm.add %97, %15  : i32
    %1332 = llvm.add %99, %28  : i32
    %1333 = llvm.mul %1331, %5  : i32
    %1334 = llvm.add %1333, %1332  : i32
    %1335 = llvm.getelementptr %1234[%1334] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1336 = llvm.bitcast %1335 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1337 = llvm.mlir.undef : vector<1xf32>
    %1338 = llvm.insertelement %1230, %1337[%28 : i32] : vector<1xf32>
    llvm.store %1338, %1336 : !llvm.ptr<vector<1xf32>, 3>
    %1339 = llvm.add %97, %2  : i32
    %1340 = llvm.add %99, %28  : i32
    %1341 = llvm.mul %1339, %5  : i32
    %1342 = llvm.add %1341, %1340  : i32
    %1343 = llvm.getelementptr %1234[%1342] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1344 = llvm.bitcast %1343 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1345 = llvm.mlir.undef : vector<1xf32>
    %1346 = llvm.insertelement %1231, %1345[%28 : i32] : vector<1xf32>
    llvm.store %1346, %1344 : !llvm.ptr<vector<1xf32>, 3>
    %1347 = llvm.add %97, %14  : i32
    %1348 = llvm.add %99, %28  : i32
    %1349 = llvm.mul %1347, %5  : i32
    %1350 = llvm.add %1349, %1348  : i32
    %1351 = llvm.getelementptr %1234[%1350] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1352 = llvm.bitcast %1351 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1353 = llvm.mlir.undef : vector<1xf32>
    %1354 = llvm.insertelement %1232, %1353[%28 : i32] : vector<1xf32>
    llvm.store %1354, %1352 : !llvm.ptr<vector<1xf32>, 3>
    %1355 = llvm.add %97, %1  : i32
    %1356 = llvm.add %99, %28  : i32
    %1357 = llvm.mul %1355, %5  : i32
    %1358 = llvm.add %1357, %1356  : i32
    %1359 = llvm.getelementptr %1234[%1358] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1360 = llvm.bitcast %1359 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %1361 = llvm.mlir.undef : vector<1xf32>
    %1362 = llvm.insertelement %1233, %1361[%28 : i32] : vector<1xf32>
    llvm.store %1362, %1360 : !llvm.ptr<vector<1xf32>, 3>
    rocdl.barrier
    %1363 = llvm.add %74, %28  : i32
    %1364 = llvm.add %79, %28  : i32
    %1365 = llvm.mul %1363, %5  : i32
    %1366 = llvm.add %1365, %1364  : i32
    %1367 = llvm.getelementptr %1234[%1366] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1368 = llvm.bitcast %1367 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    %1369 = llvm.load %1368 : !llvm.ptr<vector<4xf32>, 3>
    %1370 = llvm.extractelement %1369[%28 : i32] : vector<4xf32>
    %1371 = llvm.extractelement %1369[%32 : i32] : vector<4xf32>
    %1372 = llvm.extractelement %1369[%26 : i32] : vector<4xf32>
    %1373 = llvm.extractelement %1369[%25 : i32] : vector<4xf32>
    %1374 = llvm.add %74, %27  : i32
    %1375 = llvm.add %79, %28  : i32
    %1376 = llvm.mul %1374, %5  : i32
    %1377 = llvm.add %1376, %1375  : i32
    %1378 = llvm.getelementptr %1234[%1377] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1379 = llvm.bitcast %1378 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    %1380 = llvm.load %1379 : !llvm.ptr<vector<4xf32>, 3>
    %1381 = llvm.extractelement %1380[%28 : i32] : vector<4xf32>
    %1382 = llvm.extractelement %1380[%32 : i32] : vector<4xf32>
    %1383 = llvm.extractelement %1380[%26 : i32] : vector<4xf32>
    %1384 = llvm.extractelement %1380[%25 : i32] : vector<4xf32>
    rocdl.barrier
    %1385 = llvm.bitcast %114 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %1386 = llvm.fcmp "ogt" %1370, %1371 : f32
    %1387 = llvm.select %1386, %1370, %1371 : i1, f32
    %1388 = llvm.fcmp "ogt" %1387, %1372 : f32
    %1389 = llvm.select %1388, %1387, %1372 : i1, f32
    %1390 = llvm.fcmp "ogt" %1389, %1373 : f32
    %1391 = llvm.select %1390, %1389, %1373 : i1, f32
    %1392 = llvm.fcmp "ogt" %1381, %1382 : f32
    %1393 = llvm.select %1392, %1381, %1382 : i1, f32
    %1394 = llvm.fcmp "ogt" %1393, %1383 : f32
    %1395 = llvm.select %1394, %1393, %1383 : i1, f32
    %1396 = llvm.fcmp "ogt" %1395, %1384 : f32
    %1397 = llvm.select %1396, %1395, %1384 : i1, f32
    %1398 = rocdl.workitem.id.x : i32
    %1399 = llvm.trunc %1398 : i32 to i32
    %1400 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1391 : (f32) -> f32
    %1401 = llvm.fcmp "ogt" %1391, %1400 : f32
    %1402 = llvm.select %1401, %1391, %1400 : i1, f32
    %1403 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1402 : (f32) -> f32
    %1404 = llvm.fcmp "ogt" %1402, %1403 : f32
    %1405 = llvm.select %1404, %1402, %1403 : i1, f32
    %1406 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1405 : (f32) -> f32
    %1407 = llvm.fcmp "ogt" %1405, %1406 : f32
    %1408 = llvm.select %1407, %1405, %1406 : i1, f32
    %1409 = llvm.mul %80, %32  : i32
    %1410 = llvm.add %1409, %28  : i32
    %1411 = llvm.getelementptr %1385[%1410] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %1408, %1411 : !llvm.ptr<f32, 3>
    %1412 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1397 : (f32) -> f32
    %1413 = llvm.fcmp "ogt" %1397, %1412 : f32
    %1414 = llvm.select %1413, %1397, %1412 : i1, f32
    %1415 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1414 : (f32) -> f32
    %1416 = llvm.fcmp "ogt" %1414, %1415 : f32
    %1417 = llvm.select %1416, %1414, %1415 : i1, f32
    %1418 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1417 : (f32) -> f32
    %1419 = llvm.fcmp "ogt" %1417, %1418 : f32
    %1420 = llvm.select %1419, %1417, %1418 : i1, f32
    %1421 = llvm.mul %83, %32  : i32
    %1422 = llvm.add %1421, %28  : i32
    %1423 = llvm.getelementptr %1385[%1422] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %1420, %1423 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %1424 = llvm.getelementptr %1385[%1399] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1425 = llvm.load %1424 : !llvm.ptr<f32, 3>
    %1426 = llvm.getelementptr %1385[%1399] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %1425, %1426 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %1427 = llvm.mul %111, %32  : i32
    %1428 = llvm.add %1427, %28  : i32
    %1429 = llvm.getelementptr %1385[%1428] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1430 = llvm.load %1429 : !llvm.ptr<f32, 3>
    %1431 = llvm.mul %112, %32  : i32
    %1432 = llvm.add %1431, %28  : i32
    %1433 = llvm.getelementptr %1385[%1432] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1434 = llvm.load %1433 : !llvm.ptr<f32, 3>
    %1435 = llvm.fsub %1370, %1430  : f32
    %1436 = llvm.fsub %1371, %1430  : f32
    %1437 = llvm.fsub %1372, %1430  : f32
    %1438 = llvm.fsub %1373, %1430  : f32
    %1439 = llvm.fsub %1381, %1434  : f32
    %1440 = llvm.fsub %1382, %1434  : f32
    %1441 = llvm.fsub %1383, %1434  : f32
    %1442 = llvm.fsub %1384, %1434  : f32
    %1443 = llvm.fmul %1435, %0  : f32
    %1444 = llvm.call @__ocml_exp2_f32(%1443) : (f32) -> f32
    %1445 = llvm.fmul %1436, %0  : f32
    %1446 = llvm.call @__ocml_exp2_f32(%1445) : (f32) -> f32
    %1447 = llvm.fmul %1437, %0  : f32
    %1448 = llvm.call @__ocml_exp2_f32(%1447) : (f32) -> f32
    %1449 = llvm.fmul %1438, %0  : f32
    %1450 = llvm.call @__ocml_exp2_f32(%1449) : (f32) -> f32
    %1451 = llvm.fmul %1439, %0  : f32
    %1452 = llvm.call @__ocml_exp2_f32(%1451) : (f32) -> f32
    %1453 = llvm.fmul %1440, %0  : f32
    %1454 = llvm.call @__ocml_exp2_f32(%1453) : (f32) -> f32
    %1455 = llvm.fmul %1441, %0  : f32
    %1456 = llvm.call @__ocml_exp2_f32(%1455) : (f32) -> f32
    %1457 = llvm.fmul %1442, %0  : f32
    %1458 = llvm.call @__ocml_exp2_f32(%1457) : (f32) -> f32
    rocdl.barrier
    %1459 = llvm.bitcast %114 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %1460 = llvm.fadd %1444, %1446  : f32
    %1461 = llvm.fadd %1460, %1448  : f32
    %1462 = llvm.fadd %1461, %1450  : f32
    %1463 = llvm.fadd %1452, %1454  : f32
    %1464 = llvm.fadd %1463, %1456  : f32
    %1465 = llvm.fadd %1464, %1458  : f32
    %1466 = rocdl.workitem.id.x : i32
    %1467 = llvm.trunc %1466 : i32 to i32
    %1468 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1462 : (f32) -> f32
    %1469 = llvm.fadd %1462, %1468  : f32
    %1470 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1469 : (f32) -> f32
    %1471 = llvm.fadd %1469, %1470  : f32
    %1472 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1471 : (f32) -> f32
    %1473 = llvm.fadd %1471, %1472  : f32
    %1474 = llvm.mul %80, %32  : i32
    %1475 = llvm.add %1474, %28  : i32
    %1476 = llvm.getelementptr %1459[%1475] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %1473, %1476 : !llvm.ptr<f32, 3>
    %1477 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1465 : (f32) -> f32
    %1478 = llvm.fadd %1465, %1477  : f32
    %1479 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1478 : (f32) -> f32
    %1480 = llvm.fadd %1478, %1479  : f32
    %1481 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %1480 : (f32) -> f32
    %1482 = llvm.fadd %1480, %1481  : f32
    %1483 = llvm.mul %83, %32  : i32
    %1484 = llvm.add %1483, %28  : i32
    %1485 = llvm.getelementptr %1459[%1484] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %1482, %1485 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %1486 = llvm.getelementptr %1459[%1467] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1487 = llvm.load %1486 : !llvm.ptr<f32, 3>
    %1488 = llvm.getelementptr %1459[%1467] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %1487, %1488 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %1489 = llvm.mul %111, %32  : i32
    %1490 = llvm.add %1489, %28  : i32
    %1491 = llvm.getelementptr %1459[%1490] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1492 = llvm.load %1491 : !llvm.ptr<f32, 3>
    %1493 = llvm.mul %112, %32  : i32
    %1494 = llvm.add %1493, %28  : i32
    %1495 = llvm.getelementptr %1459[%1494] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %1496 = llvm.load %1495 : !llvm.ptr<f32, 3>
    %1497 = llvm.fdiv %1444, %1492  : f32
    %1498 = llvm.fdiv %1446, %1492  : f32
    %1499 = llvm.fdiv %1448, %1492  : f32
    %1500 = llvm.fdiv %1450, %1492  : f32
    %1501 = llvm.fdiv %1452, %1496  : f32
    %1502 = llvm.fdiv %1454, %1496  : f32
    %1503 = llvm.fdiv %1456, %1496  : f32
    %1504 = llvm.fdiv %1458, %1496  : f32
    %1505 = llvm.mlir.undef : vector<1xf32>
    %1506 = llvm.insertelement %1497, %1505[%28 : i32] : vector<1xf32>
    %1507 = llvm.bitcast %1506 : vector<1xf32> to i32
    llvm.store %1507, %149 : !llvm.ptr<f32, 1>
    %1508 = llvm.mlir.undef : vector<1xf32>
    %1509 = llvm.insertelement %1498, %1508[%28 : i32] : vector<1xf32>
    %1510 = llvm.bitcast %1509 : vector<1xf32> to i32
    llvm.store %1510, %150 : !llvm.ptr<f32, 1>
    %1511 = llvm.mlir.undef : vector<1xf32>
    %1512 = llvm.insertelement %1499, %1511[%28 : i32] : vector<1xf32>
    %1513 = llvm.bitcast %1512 : vector<1xf32> to i32
    llvm.store %1513, %151 : !llvm.ptr<f32, 1>
    %1514 = llvm.mlir.undef : vector<1xf32>
    %1515 = llvm.insertelement %1500, %1514[%28 : i32] : vector<1xf32>
    %1516 = llvm.bitcast %1515 : vector<1xf32> to i32
    llvm.store %1516, %152 : !llvm.ptr<f32, 1>
    %1517 = llvm.mlir.undef : vector<1xf32>
    %1518 = llvm.insertelement %1501, %1517[%28 : i32] : vector<1xf32>
    %1519 = llvm.bitcast %1518 : vector<1xf32> to i32
    llvm.store %1519, %153 : !llvm.ptr<f32, 1>
    %1520 = llvm.mlir.undef : vector<1xf32>
    %1521 = llvm.insertelement %1502, %1520[%28 : i32] : vector<1xf32>
    %1522 = llvm.bitcast %1521 : vector<1xf32> to i32
    llvm.store %1522, %154 : !llvm.ptr<f32, 1>
    %1523 = llvm.mlir.undef : vector<1xf32>
    %1524 = llvm.insertelement %1503, %1523[%28 : i32] : vector<1xf32>
    %1525 = llvm.bitcast %1524 : vector<1xf32> to i32
    llvm.store %1525, %155 : !llvm.ptr<f32, 1>
    %1526 = llvm.mlir.undef : vector<1xf32>
    %1527 = llvm.insertelement %1504, %1526[%28 : i32] : vector<1xf32>
    %1528 = llvm.bitcast %1527 : vector<1xf32> to i32
    llvm.store %1528, %156 : !llvm.ptr<f32, 1>
    llvm.return
  }
}


// -----// IR Dump After CSE (cse) //----- //
module attributes {triton_gpu.externs = {library_0 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/opencl.bc", library_1 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/ocml.bc", library_2 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/ockl.bc", library_3 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/root/triton/triton/python/triton/third_party/rocm/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-warps" = 2 : i32, triton_gpu.shared = 8192 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @__ocml_exp2_f32(f32) -> f32
  llvm.func @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public"} {
    %0 = llvm.mlir.constant(1.44269502 : f32) : f32
    %1 = llvm.mlir.constant(27 : i32) : i32
    %2 = llvm.mlir.constant(25 : i32) : i32
    %3 = llvm.mlir.constant(19 : i32) : i32
    %4 = llvm.mlir.constant(17 : i32) : i32
    %5 = llvm.mlir.constant(36 : i32) : i32
    %6 = llvm.mlir.constant(15 : i32) : i32
    %7 = llvm.mlir.constant(13 : i32) : i32
    %8 = llvm.mlir.constant(11 : i32) : i32
    %9 = llvm.mlir.constant(9 : i32) : i32
    %10 = llvm.mlir.constant(7 : i32) : i32
    %11 = llvm.mlir.constant(5 : i32) : i32
    %12 = llvm.mlir.constant(30 : i32) : i32
    %13 = llvm.mlir.constant(28 : i32) : i32
    %14 = llvm.mlir.constant(26 : i32) : i32
    %15 = llvm.mlir.constant(24 : i32) : i32
    %16 = llvm.mlir.constant(22 : i32) : i32
    %17 = llvm.mlir.constant(20 : i32) : i32
    %18 = llvm.mlir.constant(18 : i32) : i32
    %19 = llvm.mlir.constant(14 : i32) : i32
    %20 = llvm.mlir.constant(12 : i32) : i32
    %21 = llvm.mlir.constant(10 : i32) : i32
    %22 = llvm.mlir.constant(6 : i32) : i32
    %23 = llvm.mlir.constant(0 : index) : i32
    %24 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    %25 = llvm.mlir.constant(3 : i32) : i32
    %26 = llvm.mlir.constant(2 : i32) : i32
    %27 = llvm.mlir.constant(16 : i32) : i32
    %28 = llvm.mlir.constant(0 : i32) : i32
    %29 = llvm.mlir.constant(32 : i32) : i32
    %30 = llvm.mlir.constant(4 : i32) : i32
    %31 = llvm.mlir.constant(8 : i32) : i32
    %32 = llvm.mlir.constant(1 : i32) : i32
    %33 = llvm.mlir.constant(64 : i32) : i32
    %34 = rocdl.workitem.id.x : i32
    %35 = llvm.trunc %34 : i32 to i32
    %36 = llvm.urem %35, %33  : i32
    %37 = llvm.udiv %35, %33  : i32
    %38 = llvm.udiv %37, %32  : i32
    %39 = llvm.udiv %36, %31  : i32
    %40 = llvm.urem %38, %30  : i32
    %41 = llvm.urem %39, %29  : i32
    %42 = llvm.mul %40, %31  : i32
    %43 = llvm.add %41, %42  : i32
    %44 = llvm.mul %43, %32  : i32
    %45 = llvm.add %44, %28  : i32
    %46 = llvm.add %44, %27  : i32
    %47 = llvm.urem %37, %32  : i32
    %48 = llvm.urem %36, %31  : i32
    %49 = llvm.urem %47, %32  : i32
    %50 = llvm.urem %48, %31  : i32
    %51 = llvm.mul %49, %31  : i32
    %52 = llvm.add %50, %51  : i32
    %53 = llvm.mul %52, %30  : i32
    %54 = llvm.add %53, %28  : i32
    %55 = llvm.add %53, %32  : i32
    %56 = llvm.add %53, %26  : i32
    %57 = llvm.add %53, %25  : i32
    %58 = llvm.urem %37, %26  : i32
    %59 = llvm.urem %58, %32  : i32
    %60 = llvm.udiv %37, %26  : i32
    %61 = llvm.urem %60, %32  : i32
    %62 = llvm.urem %61, %32  : i32
    %63 = llvm.mul %59, %29  : i32
    %64 = llvm.mul %62, %29  : i32
    %65 = llvm.udiv %36, %29  : i32
    %66 = llvm.mul %65, %30  : i32
    %67 = llvm.add %66, %63  : i32
    %68 = llvm.urem %36, %29  : i32
    %69 = llvm.add %68, %64  : i32
    %70 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3>
    %71 = llvm.bitcast %70 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3>
    %72 = llvm.add %45, %23  : i32
    %73 = llvm.add %46, %23  : i32
    %74 = llvm.mul %72, %arg1  : i32
    %75 = llvm.mul %73, %arg1  : i32
    %76 = llvm.getelementptr %arg0[%74] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %77 = llvm.getelementptr %arg0[%75] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %78 = llvm.add %54, %23  : i32
    %79 = llvm.add %55, %23  : i32
    %80 = llvm.add %56, %23  : i32
    %81 = llvm.add %57, %23  : i32
    %82 = llvm.getelementptr %76[%78] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %83 = llvm.getelementptr %76[%79] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %84 = llvm.getelementptr %76[%80] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %85 = llvm.getelementptr %76[%81] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %86 = llvm.getelementptr %77[%78] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %87 = llvm.getelementptr %77[%79] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %88 = llvm.getelementptr %77[%80] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %89 = llvm.getelementptr %77[%81] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %90 = llvm.mul %72, %arg3  : i32
    %91 = llvm.mul %73, %arg3  : i32
    %92 = llvm.getelementptr %arg2[%90] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %93 = llvm.getelementptr %arg2[%91] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %94 = llvm.getelementptr %92[%78] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %95 = llvm.getelementptr %92[%79] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %96 = llvm.getelementptr %92[%80] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %97 = llvm.getelementptr %92[%81] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %98 = llvm.getelementptr %93[%78] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %99 = llvm.getelementptr %93[%79] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %100 = llvm.getelementptr %93[%80] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %101 = llvm.getelementptr %93[%81] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %102 = llvm.mul %72, %arg7  : i32
    %103 = llvm.mul %73, %arg7  : i32
    %104 = llvm.getelementptr %arg6[%102] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %105 = llvm.getelementptr %arg6[%103] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %106 = llvm.getelementptr %104[%78] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %107 = llvm.getelementptr %104[%79] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %108 = llvm.getelementptr %104[%80] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %109 = llvm.getelementptr %104[%81] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %110 = llvm.getelementptr %105[%78] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %111 = llvm.getelementptr %105[%79] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %112 = llvm.getelementptr %105[%80] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %113 = llvm.getelementptr %105[%81] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %114 = llvm.addrspacecast %82 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %115 = llvm.load %114 : !llvm.ptr<i32>
    %116 = llvm.bitcast %115 : i32 to vector<1xf32>
    %117 = llvm.extractelement %116[%23 : i32] : vector<1xf32>
    %118 = llvm.addrspacecast %83 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %119 = llvm.load %118 : !llvm.ptr<i32>
    %120 = llvm.bitcast %119 : i32 to vector<1xf32>
    %121 = llvm.extractelement %120[%23 : i32] : vector<1xf32>
    %122 = llvm.addrspacecast %84 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %123 = llvm.load %122 : !llvm.ptr<i32>
    %124 = llvm.bitcast %123 : i32 to vector<1xf32>
    %125 = llvm.extractelement %124[%23 : i32] : vector<1xf32>
    %126 = llvm.addrspacecast %85 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %127 = llvm.load %126 : !llvm.ptr<i32>
    %128 = llvm.bitcast %127 : i32 to vector<1xf32>
    %129 = llvm.extractelement %128[%23 : i32] : vector<1xf32>
    %130 = llvm.addrspacecast %86 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %131 = llvm.load %130 : !llvm.ptr<i32>
    %132 = llvm.bitcast %131 : i32 to vector<1xf32>
    %133 = llvm.extractelement %132[%23 : i32] : vector<1xf32>
    %134 = llvm.addrspacecast %87 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %135 = llvm.load %134 : !llvm.ptr<i32>
    %136 = llvm.bitcast %135 : i32 to vector<1xf32>
    %137 = llvm.extractelement %136[%23 : i32] : vector<1xf32>
    %138 = llvm.addrspacecast %88 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %139 = llvm.load %138 : !llvm.ptr<i32>
    %140 = llvm.bitcast %139 : i32 to vector<1xf32>
    %141 = llvm.extractelement %140[%23 : i32] : vector<1xf32>
    %142 = llvm.addrspacecast %89 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %143 = llvm.load %142 : !llvm.ptr<i32>
    %144 = llvm.bitcast %143 : i32 to vector<1xf32>
    %145 = llvm.extractelement %144[%23 : i32] : vector<1xf32>
    %146 = llvm.bitcast %71 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %147 = llvm.mul %28, %29  : i32
    %148 = llvm.add %147, %28  : i32
    %149 = llvm.mul %28, %32  : i32
    %150 = llvm.add %148, %149  : i32
    %151 = llvm.getelementptr %146[%150] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %152 = llvm.udiv %45, %32  : i32
    %153 = llvm.urem %152, %26  : i32
    %154 = llvm.mul %45, %29  : i32
    %155 = llvm.udiv %54, %31  : i32
    %156 = llvm.xor %155, %153  : i32
    %157 = llvm.mul %156, %31  : i32
    %158 = llvm.urem %54, %31  : i32
    %159 = llvm.udiv %158, %30  : i32
    %160 = llvm.mul %159, %30  : i32
    %161 = llvm.add %157, %160  : i32
    %162 = llvm.mul %161, %32  : i32
    %163 = llvm.add %154, %162  : i32
    %164 = llvm.getelementptr %151[%163] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %165 = llvm.getelementptr %164[%148] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %166 = llvm.mul %27, %29  : i32
    %167 = llvm.add %166, %28  : i32
    %168 = llvm.getelementptr %164[%167] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %169 = llvm.mlir.undef : vector<4xf32>
    %170 = llvm.insertelement %117, %169[%28 : i32] : vector<4xf32>
    %171 = llvm.insertelement %121, %170[%32 : i32] : vector<4xf32>
    %172 = llvm.insertelement %125, %171[%26 : i32] : vector<4xf32>
    %173 = llvm.insertelement %129, %172[%25 : i32] : vector<4xf32>
    %174 = llvm.bitcast %165 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    llvm.store %173, %174 : !llvm.ptr<vector<4xf32>, 3>
    %175 = llvm.insertelement %133, %169[%28 : i32] : vector<4xf32>
    %176 = llvm.insertelement %137, %175[%32 : i32] : vector<4xf32>
    %177 = llvm.insertelement %141, %176[%26 : i32] : vector<4xf32>
    %178 = llvm.insertelement %145, %177[%25 : i32] : vector<4xf32>
    %179 = llvm.bitcast %168 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    llvm.store %178, %179 : !llvm.ptr<vector<4xf32>, 3>
    %180 = llvm.addrspacecast %94 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %181 = llvm.load %180 : !llvm.ptr<i32>
    %182 = llvm.bitcast %181 : i32 to vector<1xf32>
    %183 = llvm.extractelement %182[%23 : i32] : vector<1xf32>
    %184 = llvm.addrspacecast %95 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %185 = llvm.load %184 : !llvm.ptr<i32>
    %186 = llvm.bitcast %185 : i32 to vector<1xf32>
    %187 = llvm.extractelement %186[%23 : i32] : vector<1xf32>
    %188 = llvm.addrspacecast %96 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %189 = llvm.load %188 : !llvm.ptr<i32>
    %190 = llvm.bitcast %189 : i32 to vector<1xf32>
    %191 = llvm.extractelement %190[%23 : i32] : vector<1xf32>
    %192 = llvm.addrspacecast %97 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %193 = llvm.load %192 : !llvm.ptr<i32>
    %194 = llvm.bitcast %193 : i32 to vector<1xf32>
    %195 = llvm.extractelement %194[%23 : i32] : vector<1xf32>
    %196 = llvm.addrspacecast %98 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %197 = llvm.load %196 : !llvm.ptr<i32>
    %198 = llvm.bitcast %197 : i32 to vector<1xf32>
    %199 = llvm.extractelement %198[%23 : i32] : vector<1xf32>
    %200 = llvm.addrspacecast %99 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %201 = llvm.load %200 : !llvm.ptr<i32>
    %202 = llvm.bitcast %201 : i32 to vector<1xf32>
    %203 = llvm.extractelement %202[%23 : i32] : vector<1xf32>
    %204 = llvm.addrspacecast %100 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %205 = llvm.load %204 : !llvm.ptr<i32>
    %206 = llvm.bitcast %205 : i32 to vector<1xf32>
    %207 = llvm.extractelement %206[%23 : i32] : vector<1xf32>
    %208 = llvm.addrspacecast %101 : !llvm.ptr<f32, 1> to !llvm.ptr<i32>
    %209 = llvm.load %208 : !llvm.ptr<i32>
    %210 = llvm.bitcast %209 : i32 to vector<1xf32>
    %211 = llvm.extractelement %210[%23 : i32] : vector<1xf32>
    %212 = llvm.getelementptr %71[4096] : (!llvm.ptr<i8, 3>) -> !llvm.ptr<i8, 3>
    %213 = llvm.bitcast %212 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %214 = llvm.getelementptr %213[%150] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %215 = llvm.udiv %54, %26  : i32
    %216 = llvm.xor %215, %153  : i32
    %217 = llvm.mul %216, %26  : i32
    %218 = llvm.urem %54, %26  : i32
    %219 = llvm.udiv %218, %26  : i32
    %220 = llvm.mul %219, %26  : i32
    %221 = llvm.add %217, %220  : i32
    %222 = llvm.mul %221, %32  : i32
    %223 = llvm.add %154, %222  : i32
    %224 = llvm.getelementptr %214[%223] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %225 = llvm.getelementptr %224[%148] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %226 = llvm.udiv %56, %26  : i32
    %227 = llvm.xor %226, %153  : i32
    %228 = llvm.mul %227, %26  : i32
    %229 = llvm.urem %56, %26  : i32
    %230 = llvm.udiv %229, %26  : i32
    %231 = llvm.mul %230, %26  : i32
    %232 = llvm.add %228, %231  : i32
    %233 = llvm.mul %232, %32  : i32
    %234 = llvm.add %154, %233  : i32
    %235 = llvm.getelementptr %214[%234] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %236 = llvm.getelementptr %235[%148] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %237 = llvm.getelementptr %224[%167] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %238 = llvm.getelementptr %235[%167] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %239 = llvm.mlir.undef : vector<2xf32>
    %240 = llvm.insertelement %183, %239[%28 : i32] : vector<2xf32>
    %241 = llvm.insertelement %187, %240[%32 : i32] : vector<2xf32>
    %242 = llvm.bitcast %225 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %241, %242 : !llvm.ptr<vector<2xf32>, 3>
    %243 = llvm.insertelement %191, %239[%28 : i32] : vector<2xf32>
    %244 = llvm.insertelement %195, %243[%32 : i32] : vector<2xf32>
    %245 = llvm.bitcast %236 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %244, %245 : !llvm.ptr<vector<2xf32>, 3>
    %246 = llvm.insertelement %199, %239[%28 : i32] : vector<2xf32>
    %247 = llvm.insertelement %203, %246[%32 : i32] : vector<2xf32>
    %248 = llvm.bitcast %237 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %247, %248 : !llvm.ptr<vector<2xf32>, 3>
    %249 = llvm.insertelement %207, %239[%28 : i32] : vector<2xf32>
    %250 = llvm.insertelement %211, %249[%32 : i32] : vector<2xf32>
    %251 = llvm.bitcast %238 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<2xf32>, 3>
    llvm.store %250, %251 : !llvm.ptr<vector<2xf32>, 3>
    rocdl.barrier
    %252 = llvm.mul %65, %32  : i32
    %253 = llvm.add %63, %28  : i32
    %254 = llvm.add %253, %28  : i32
    %255 = llvm.add %254, %68  : i32
    %256 = llvm.add %255, %28  : i32
    %257 = llvm.add %28, %28  : i32
    %258 = llvm.add %257, %28  : i32
    %259 = llvm.add %258, %252  : i32
    %260 = llvm.add %259, %28  : i32
    %261 = llvm.add %256, %28  : i32
    %262 = llvm.add %260, %28  : i32
    %263 = llvm.add %257, %26  : i32
    %264 = llvm.add %263, %252  : i32
    %265 = llvm.add %264, %28  : i32
    %266 = llvm.add %265, %28  : i32
    %267 = llvm.add %257, %30  : i32
    %268 = llvm.add %267, %252  : i32
    %269 = llvm.add %268, %28  : i32
    %270 = llvm.add %269, %28  : i32
    %271 = llvm.add %257, %22  : i32
    %272 = llvm.add %271, %252  : i32
    %273 = llvm.add %272, %28  : i32
    %274 = llvm.add %273, %28  : i32
    %275 = llvm.add %257, %31  : i32
    %276 = llvm.add %275, %252  : i32
    %277 = llvm.add %276, %28  : i32
    %278 = llvm.add %277, %28  : i32
    %279 = llvm.add %257, %21  : i32
    %280 = llvm.add %279, %252  : i32
    %281 = llvm.add %280, %28  : i32
    %282 = llvm.add %281, %28  : i32
    %283 = llvm.add %257, %20  : i32
    %284 = llvm.add %283, %252  : i32
    %285 = llvm.add %284, %28  : i32
    %286 = llvm.add %285, %28  : i32
    %287 = llvm.add %257, %19  : i32
    %288 = llvm.add %287, %252  : i32
    %289 = llvm.add %288, %28  : i32
    %290 = llvm.add %289, %28  : i32
    %291 = llvm.add %257, %27  : i32
    %292 = llvm.add %291, %252  : i32
    %293 = llvm.add %292, %28  : i32
    %294 = llvm.add %293, %28  : i32
    %295 = llvm.add %257, %18  : i32
    %296 = llvm.add %295, %252  : i32
    %297 = llvm.add %296, %28  : i32
    %298 = llvm.add %297, %28  : i32
    %299 = llvm.add %257, %17  : i32
    %300 = llvm.add %299, %252  : i32
    %301 = llvm.add %300, %28  : i32
    %302 = llvm.add %301, %28  : i32
    %303 = llvm.add %257, %16  : i32
    %304 = llvm.add %303, %252  : i32
    %305 = llvm.add %304, %28  : i32
    %306 = llvm.add %305, %28  : i32
    %307 = llvm.add %257, %15  : i32
    %308 = llvm.add %307, %252  : i32
    %309 = llvm.add %308, %28  : i32
    %310 = llvm.add %309, %28  : i32
    %311 = llvm.add %257, %14  : i32
    %312 = llvm.add %311, %252  : i32
    %313 = llvm.add %312, %28  : i32
    %314 = llvm.add %313, %28  : i32
    %315 = llvm.add %257, %13  : i32
    %316 = llvm.add %315, %252  : i32
    %317 = llvm.add %316, %28  : i32
    %318 = llvm.add %317, %28  : i32
    %319 = llvm.add %257, %12  : i32
    %320 = llvm.add %319, %252  : i32
    %321 = llvm.add %320, %28  : i32
    %322 = llvm.add %321, %28  : i32
    %323 = llvm.udiv %261, %32  : i32
    %324 = llvm.urem %323, %26  : i32
    %325 = llvm.udiv %262, %31  : i32
    %326 = llvm.xor %325, %324  : i32
    %327 = llvm.mul %326, %31  : i32
    %328 = llvm.urem %262, %31  : i32
    %329 = llvm.add %327, %328  : i32
    %330 = llvm.mul %261, %29  : i32
    %331 = llvm.mul %329, %32  : i32
    %332 = llvm.add %330, %331  : i32
    %333 = llvm.udiv %266, %31  : i32
    %334 = llvm.xor %333, %324  : i32
    %335 = llvm.mul %334, %31  : i32
    %336 = llvm.urem %266, %31  : i32
    %337 = llvm.add %335, %336  : i32
    %338 = llvm.mul %337, %32  : i32
    %339 = llvm.add %330, %338  : i32
    %340 = llvm.udiv %270, %31  : i32
    %341 = llvm.xor %340, %324  : i32
    %342 = llvm.mul %341, %31  : i32
    %343 = llvm.urem %270, %31  : i32
    %344 = llvm.add %342, %343  : i32
    %345 = llvm.mul %344, %32  : i32
    %346 = llvm.add %330, %345  : i32
    %347 = llvm.udiv %274, %31  : i32
    %348 = llvm.xor %347, %324  : i32
    %349 = llvm.mul %348, %31  : i32
    %350 = llvm.urem %274, %31  : i32
    %351 = llvm.add %349, %350  : i32
    %352 = llvm.mul %351, %32  : i32
    %353 = llvm.add %330, %352  : i32
    %354 = llvm.udiv %278, %31  : i32
    %355 = llvm.xor %354, %324  : i32
    %356 = llvm.mul %355, %31  : i32
    %357 = llvm.urem %278, %31  : i32
    %358 = llvm.add %356, %357  : i32
    %359 = llvm.mul %358, %32  : i32
    %360 = llvm.add %330, %359  : i32
    %361 = llvm.udiv %282, %31  : i32
    %362 = llvm.xor %361, %324  : i32
    %363 = llvm.mul %362, %31  : i32
    %364 = llvm.urem %282, %31  : i32
    %365 = llvm.add %363, %364  : i32
    %366 = llvm.mul %365, %32  : i32
    %367 = llvm.add %330, %366  : i32
    %368 = llvm.udiv %286, %31  : i32
    %369 = llvm.xor %368, %324  : i32
    %370 = llvm.mul %369, %31  : i32
    %371 = llvm.urem %286, %31  : i32
    %372 = llvm.add %370, %371  : i32
    %373 = llvm.mul %372, %32  : i32
    %374 = llvm.add %330, %373  : i32
    %375 = llvm.udiv %290, %31  : i32
    %376 = llvm.xor %375, %324  : i32
    %377 = llvm.mul %376, %31  : i32
    %378 = llvm.urem %290, %31  : i32
    %379 = llvm.add %377, %378  : i32
    %380 = llvm.mul %379, %32  : i32
    %381 = llvm.add %330, %380  : i32
    %382 = llvm.udiv %294, %31  : i32
    %383 = llvm.xor %382, %324  : i32
    %384 = llvm.mul %383, %31  : i32
    %385 = llvm.urem %294, %31  : i32
    %386 = llvm.add %384, %385  : i32
    %387 = llvm.mul %386, %32  : i32
    %388 = llvm.add %330, %387  : i32
    %389 = llvm.udiv %298, %31  : i32
    %390 = llvm.xor %389, %324  : i32
    %391 = llvm.mul %390, %31  : i32
    %392 = llvm.urem %298, %31  : i32
    %393 = llvm.add %391, %392  : i32
    %394 = llvm.mul %393, %32  : i32
    %395 = llvm.add %330, %394  : i32
    %396 = llvm.udiv %302, %31  : i32
    %397 = llvm.xor %396, %324  : i32
    %398 = llvm.mul %397, %31  : i32
    %399 = llvm.urem %302, %31  : i32
    %400 = llvm.add %398, %399  : i32
    %401 = llvm.mul %400, %32  : i32
    %402 = llvm.add %330, %401  : i32
    %403 = llvm.udiv %306, %31  : i32
    %404 = llvm.xor %403, %324  : i32
    %405 = llvm.mul %404, %31  : i32
    %406 = llvm.urem %306, %31  : i32
    %407 = llvm.add %405, %406  : i32
    %408 = llvm.mul %407, %32  : i32
    %409 = llvm.add %330, %408  : i32
    %410 = llvm.udiv %310, %31  : i32
    %411 = llvm.xor %410, %324  : i32
    %412 = llvm.mul %411, %31  : i32
    %413 = llvm.urem %310, %31  : i32
    %414 = llvm.add %412, %413  : i32
    %415 = llvm.mul %414, %32  : i32
    %416 = llvm.add %330, %415  : i32
    %417 = llvm.udiv %314, %31  : i32
    %418 = llvm.xor %417, %324  : i32
    %419 = llvm.mul %418, %31  : i32
    %420 = llvm.urem %314, %31  : i32
    %421 = llvm.add %419, %420  : i32
    %422 = llvm.mul %421, %32  : i32
    %423 = llvm.add %330, %422  : i32
    %424 = llvm.udiv %318, %31  : i32
    %425 = llvm.xor %424, %324  : i32
    %426 = llvm.mul %425, %31  : i32
    %427 = llvm.urem %318, %31  : i32
    %428 = llvm.add %426, %427  : i32
    %429 = llvm.mul %428, %32  : i32
    %430 = llvm.add %330, %429  : i32
    %431 = llvm.udiv %322, %31  : i32
    %432 = llvm.xor %431, %324  : i32
    %433 = llvm.mul %432, %31  : i32
    %434 = llvm.urem %322, %31  : i32
    %435 = llvm.add %433, %434  : i32
    %436 = llvm.mul %435, %32  : i32
    %437 = llvm.add %330, %436  : i32
    %438 = llvm.sub %28, %147  : i32
    %439 = llvm.getelementptr %146[%438] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %440 = llvm.sub %28, %149  : i32
    %441 = llvm.getelementptr %439[%440] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %442 = llvm.getelementptr %441[%332] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %443 = llvm.load %442 : !llvm.ptr<f32, 3>
    %444 = llvm.getelementptr %441[%339] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %445 = llvm.load %444 : !llvm.ptr<f32, 3>
    %446 = llvm.getelementptr %441[%346] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %447 = llvm.load %446 : !llvm.ptr<f32, 3>
    %448 = llvm.getelementptr %441[%353] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %449 = llvm.load %448 : !llvm.ptr<f32, 3>
    %450 = llvm.getelementptr %441[%360] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %451 = llvm.load %450 : !llvm.ptr<f32, 3>
    %452 = llvm.getelementptr %441[%367] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %453 = llvm.load %452 : !llvm.ptr<f32, 3>
    %454 = llvm.getelementptr %441[%374] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %455 = llvm.load %454 : !llvm.ptr<f32, 3>
    %456 = llvm.getelementptr %441[%381] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %457 = llvm.load %456 : !llvm.ptr<f32, 3>
    %458 = llvm.getelementptr %441[%388] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %459 = llvm.load %458 : !llvm.ptr<f32, 3>
    %460 = llvm.getelementptr %441[%395] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %461 = llvm.load %460 : !llvm.ptr<f32, 3>
    %462 = llvm.getelementptr %441[%402] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %463 = llvm.load %462 : !llvm.ptr<f32, 3>
    %464 = llvm.getelementptr %441[%409] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %465 = llvm.load %464 : !llvm.ptr<f32, 3>
    %466 = llvm.getelementptr %441[%416] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %467 = llvm.load %466 : !llvm.ptr<f32, 3>
    %468 = llvm.getelementptr %441[%423] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %469 = llvm.load %468 : !llvm.ptr<f32, 3>
    %470 = llvm.getelementptr %441[%430] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %471 = llvm.load %470 : !llvm.ptr<f32, 3>
    %472 = llvm.getelementptr %441[%437] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %473 = llvm.load %472 : !llvm.ptr<f32, 3>
    %474 = llvm.add %64, %28  : i32
    %475 = llvm.add %474, %28  : i32
    %476 = llvm.add %475, %68  : i32
    %477 = llvm.add %476, %28  : i32
    %478 = llvm.add %477, %28  : i32
    %479 = llvm.udiv %262, %32  : i32
    %480 = llvm.urem %479, %26  : i32
    %481 = llvm.udiv %478, %26  : i32
    %482 = llvm.xor %481, %480  : i32
    %483 = llvm.mul %482, %26  : i32
    %484 = llvm.urem %478, %26  : i32
    %485 = llvm.add %483, %484  : i32
    %486 = llvm.mul %262, %29  : i32
    %487 = llvm.mul %485, %32  : i32
    %488 = llvm.add %486, %487  : i32
    %489 = llvm.udiv %266, %32  : i32
    %490 = llvm.urem %489, %26  : i32
    %491 = llvm.xor %481, %490  : i32
    %492 = llvm.mul %491, %26  : i32
    %493 = llvm.add %492, %484  : i32
    %494 = llvm.mul %266, %29  : i32
    %495 = llvm.mul %493, %32  : i32
    %496 = llvm.add %494, %495  : i32
    %497 = llvm.udiv %270, %32  : i32
    %498 = llvm.urem %497, %26  : i32
    %499 = llvm.xor %481, %498  : i32
    %500 = llvm.mul %499, %26  : i32
    %501 = llvm.add %500, %484  : i32
    %502 = llvm.mul %270, %29  : i32
    %503 = llvm.mul %501, %32  : i32
    %504 = llvm.add %502, %503  : i32
    %505 = llvm.udiv %274, %32  : i32
    %506 = llvm.urem %505, %26  : i32
    %507 = llvm.xor %481, %506  : i32
    %508 = llvm.mul %507, %26  : i32
    %509 = llvm.add %508, %484  : i32
    %510 = llvm.mul %274, %29  : i32
    %511 = llvm.mul %509, %32  : i32
    %512 = llvm.add %510, %511  : i32
    %513 = llvm.udiv %278, %32  : i32
    %514 = llvm.urem %513, %26  : i32
    %515 = llvm.xor %481, %514  : i32
    %516 = llvm.mul %515, %26  : i32
    %517 = llvm.add %516, %484  : i32
    %518 = llvm.mul %278, %29  : i32
    %519 = llvm.mul %517, %32  : i32
    %520 = llvm.add %518, %519  : i32
    %521 = llvm.udiv %282, %32  : i32
    %522 = llvm.urem %521, %26  : i32
    %523 = llvm.xor %481, %522  : i32
    %524 = llvm.mul %523, %26  : i32
    %525 = llvm.add %524, %484  : i32
    %526 = llvm.mul %282, %29  : i32
    %527 = llvm.mul %525, %32  : i32
    %528 = llvm.add %526, %527  : i32
    %529 = llvm.udiv %286, %32  : i32
    %530 = llvm.urem %529, %26  : i32
    %531 = llvm.xor %481, %530  : i32
    %532 = llvm.mul %531, %26  : i32
    %533 = llvm.add %532, %484  : i32
    %534 = llvm.mul %286, %29  : i32
    %535 = llvm.mul %533, %32  : i32
    %536 = llvm.add %534, %535  : i32
    %537 = llvm.udiv %290, %32  : i32
    %538 = llvm.urem %537, %26  : i32
    %539 = llvm.xor %481, %538  : i32
    %540 = llvm.mul %539, %26  : i32
    %541 = llvm.add %540, %484  : i32
    %542 = llvm.mul %290, %29  : i32
    %543 = llvm.mul %541, %32  : i32
    %544 = llvm.add %542, %543  : i32
    %545 = llvm.udiv %294, %32  : i32
    %546 = llvm.urem %545, %26  : i32
    %547 = llvm.xor %481, %546  : i32
    %548 = llvm.mul %547, %26  : i32
    %549 = llvm.add %548, %484  : i32
    %550 = llvm.mul %294, %29  : i32
    %551 = llvm.mul %549, %32  : i32
    %552 = llvm.add %550, %551  : i32
    %553 = llvm.udiv %298, %32  : i32
    %554 = llvm.urem %553, %26  : i32
    %555 = llvm.xor %481, %554  : i32
    %556 = llvm.mul %555, %26  : i32
    %557 = llvm.add %556, %484  : i32
    %558 = llvm.mul %298, %29  : i32
    %559 = llvm.mul %557, %32  : i32
    %560 = llvm.add %558, %559  : i32
    %561 = llvm.udiv %302, %32  : i32
    %562 = llvm.urem %561, %26  : i32
    %563 = llvm.xor %481, %562  : i32
    %564 = llvm.mul %563, %26  : i32
    %565 = llvm.add %564, %484  : i32
    %566 = llvm.mul %302, %29  : i32
    %567 = llvm.mul %565, %32  : i32
    %568 = llvm.add %566, %567  : i32
    %569 = llvm.udiv %306, %32  : i32
    %570 = llvm.urem %569, %26  : i32
    %571 = llvm.xor %481, %570  : i32
    %572 = llvm.mul %571, %26  : i32
    %573 = llvm.add %572, %484  : i32
    %574 = llvm.mul %306, %29  : i32
    %575 = llvm.mul %573, %32  : i32
    %576 = llvm.add %574, %575  : i32
    %577 = llvm.udiv %310, %32  : i32
    %578 = llvm.urem %577, %26  : i32
    %579 = llvm.xor %481, %578  : i32
    %580 = llvm.mul %579, %26  : i32
    %581 = llvm.add %580, %484  : i32
    %582 = llvm.mul %310, %29  : i32
    %583 = llvm.mul %581, %32  : i32
    %584 = llvm.add %582, %583  : i32
    %585 = llvm.udiv %314, %32  : i32
    %586 = llvm.urem %585, %26  : i32
    %587 = llvm.xor %481, %586  : i32
    %588 = llvm.mul %587, %26  : i32
    %589 = llvm.add %588, %484  : i32
    %590 = llvm.mul %314, %29  : i32
    %591 = llvm.mul %589, %32  : i32
    %592 = llvm.add %590, %591  : i32
    %593 = llvm.udiv %318, %32  : i32
    %594 = llvm.urem %593, %26  : i32
    %595 = llvm.xor %481, %594  : i32
    %596 = llvm.mul %595, %26  : i32
    %597 = llvm.add %596, %484  : i32
    %598 = llvm.mul %318, %29  : i32
    %599 = llvm.mul %597, %32  : i32
    %600 = llvm.add %598, %599  : i32
    %601 = llvm.udiv %322, %32  : i32
    %602 = llvm.urem %601, %26  : i32
    %603 = llvm.xor %481, %602  : i32
    %604 = llvm.mul %603, %26  : i32
    %605 = llvm.add %604, %484  : i32
    %606 = llvm.mul %322, %29  : i32
    %607 = llvm.mul %605, %32  : i32
    %608 = llvm.add %606, %607  : i32
    %609 = llvm.getelementptr %213[%438] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %610 = llvm.getelementptr %609[%440] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %611 = llvm.getelementptr %610[%488] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %612 = llvm.load %611 : !llvm.ptr<f32, 3>
    %613 = llvm.getelementptr %610[%496] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %614 = llvm.load %613 : !llvm.ptr<f32, 3>
    %615 = llvm.getelementptr %610[%504] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %616 = llvm.load %615 : !llvm.ptr<f32, 3>
    %617 = llvm.getelementptr %610[%512] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %618 = llvm.load %617 : !llvm.ptr<f32, 3>
    %619 = llvm.getelementptr %610[%520] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %620 = llvm.load %619 : !llvm.ptr<f32, 3>
    %621 = llvm.getelementptr %610[%528] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %622 = llvm.load %621 : !llvm.ptr<f32, 3>
    %623 = llvm.getelementptr %610[%536] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %624 = llvm.load %623 : !llvm.ptr<f32, 3>
    %625 = llvm.getelementptr %610[%544] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %626 = llvm.load %625 : !llvm.ptr<f32, 3>
    %627 = llvm.getelementptr %610[%552] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %628 = llvm.load %627 : !llvm.ptr<f32, 3>
    %629 = llvm.getelementptr %610[%560] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %630 = llvm.load %629 : !llvm.ptr<f32, 3>
    %631 = llvm.getelementptr %610[%568] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %632 = llvm.load %631 : !llvm.ptr<f32, 3>
    %633 = llvm.getelementptr %610[%576] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %634 = llvm.load %633 : !llvm.ptr<f32, 3>
    %635 = llvm.getelementptr %610[%584] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %636 = llvm.load %635 : !llvm.ptr<f32, 3>
    %637 = llvm.getelementptr %610[%592] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %638 = llvm.load %637 : !llvm.ptr<f32, 3>
    %639 = llvm.getelementptr %610[%600] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %640 = llvm.load %639 : !llvm.ptr<f32, 3>
    %641 = llvm.getelementptr %610[%608] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %642 = llvm.load %641 : !llvm.ptr<f32, 3>
    %643 = llvm.mlir.undef : vector<16xf32>
    %644 = llvm.insertelement %24, %643[%28 : i32] : vector<16xf32>
    %645 = llvm.insertelement %24, %644[%32 : i32] : vector<16xf32>
    %646 = llvm.insertelement %24, %645[%26 : i32] : vector<16xf32>
    %647 = llvm.insertelement %24, %646[%25 : i32] : vector<16xf32>
    %648 = llvm.insertelement %24, %647[%30 : i32] : vector<16xf32>
    %649 = llvm.insertelement %24, %648[%11 : i32] : vector<16xf32>
    %650 = llvm.insertelement %24, %649[%22 : i32] : vector<16xf32>
    %651 = llvm.insertelement %24, %650[%10 : i32] : vector<16xf32>
    %652 = llvm.insertelement %24, %651[%31 : i32] : vector<16xf32>
    %653 = llvm.insertelement %24, %652[%9 : i32] : vector<16xf32>
    %654 = llvm.insertelement %24, %653[%21 : i32] : vector<16xf32>
    %655 = llvm.insertelement %24, %654[%8 : i32] : vector<16xf32>
    %656 = llvm.insertelement %24, %655[%20 : i32] : vector<16xf32>
    %657 = llvm.insertelement %24, %656[%7 : i32] : vector<16xf32>
    %658 = llvm.insertelement %24, %657[%19 : i32] : vector<16xf32>
    %659 = llvm.insertelement %24, %658[%6 : i32] : vector<16xf32>
    %660 = rocdl.mfma.f32.32x32x2f32 %443, %612, %659, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %661 = rocdl.mfma.f32.32x32x2f32 %445, %614, %660, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %662 = rocdl.mfma.f32.32x32x2f32 %447, %616, %661, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %663 = rocdl.mfma.f32.32x32x2f32 %449, %618, %662, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %664 = rocdl.mfma.f32.32x32x2f32 %451, %620, %663, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %665 = rocdl.mfma.f32.32x32x2f32 %453, %622, %664, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %666 = rocdl.mfma.f32.32x32x2f32 %455, %624, %665, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %667 = rocdl.mfma.f32.32x32x2f32 %457, %626, %666, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %668 = rocdl.mfma.f32.32x32x2f32 %459, %628, %667, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %669 = rocdl.mfma.f32.32x32x2f32 %461, %630, %668, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %670 = rocdl.mfma.f32.32x32x2f32 %463, %632, %669, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %671 = rocdl.mfma.f32.32x32x2f32 %465, %634, %670, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %672 = rocdl.mfma.f32.32x32x2f32 %467, %636, %671, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %673 = rocdl.mfma.f32.32x32x2f32 %469, %638, %672, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %674 = rocdl.mfma.f32.32x32x2f32 %471, %640, %673, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %675 = rocdl.mfma.f32.32x32x2f32 %473, %642, %674, %28, %28, %28 : (f32, f32, vector<16xf32>, i32, i32, i32) -> vector<16xf32>
    %676 = llvm.extractelement %675[%28 : i32] : vector<16xf32>
    %677 = llvm.extractelement %675[%32 : i32] : vector<16xf32>
    %678 = llvm.extractelement %675[%26 : i32] : vector<16xf32>
    %679 = llvm.extractelement %675[%25 : i32] : vector<16xf32>
    %680 = llvm.extractelement %675[%30 : i32] : vector<16xf32>
    %681 = llvm.extractelement %675[%11 : i32] : vector<16xf32>
    %682 = llvm.extractelement %675[%22 : i32] : vector<16xf32>
    %683 = llvm.extractelement %675[%10 : i32] : vector<16xf32>
    %684 = llvm.extractelement %675[%31 : i32] : vector<16xf32>
    %685 = llvm.extractelement %675[%9 : i32] : vector<16xf32>
    %686 = llvm.extractelement %675[%21 : i32] : vector<16xf32>
    %687 = llvm.extractelement %675[%8 : i32] : vector<16xf32>
    %688 = llvm.extractelement %675[%20 : i32] : vector<16xf32>
    %689 = llvm.extractelement %675[%7 : i32] : vector<16xf32>
    %690 = llvm.extractelement %675[%19 : i32] : vector<16xf32>
    %691 = llvm.extractelement %675[%6 : i32] : vector<16xf32>
    rocdl.barrier
    %692 = llvm.add %67, %28  : i32
    %693 = llvm.add %69, %28  : i32
    %694 = llvm.mul %692, %5  : i32
    %695 = llvm.add %694, %693  : i32
    %696 = llvm.getelementptr %146[%695] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %697 = llvm.bitcast %696 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %698 = llvm.mlir.undef : vector<1xf32>
    %699 = llvm.insertelement %676, %698[%28 : i32] : vector<1xf32>
    llvm.store %699, %697 : !llvm.ptr<vector<1xf32>, 3>
    %700 = llvm.add %67, %32  : i32
    %701 = llvm.mul %700, %5  : i32
    %702 = llvm.add %701, %693  : i32
    %703 = llvm.getelementptr %146[%702] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %704 = llvm.bitcast %703 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %705 = llvm.insertelement %677, %698[%28 : i32] : vector<1xf32>
    llvm.store %705, %704 : !llvm.ptr<vector<1xf32>, 3>
    %706 = llvm.add %67, %26  : i32
    %707 = llvm.mul %706, %5  : i32
    %708 = llvm.add %707, %693  : i32
    %709 = llvm.getelementptr %146[%708] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %710 = llvm.bitcast %709 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %711 = llvm.insertelement %678, %698[%28 : i32] : vector<1xf32>
    llvm.store %711, %710 : !llvm.ptr<vector<1xf32>, 3>
    %712 = llvm.add %67, %25  : i32
    %713 = llvm.mul %712, %5  : i32
    %714 = llvm.add %713, %693  : i32
    %715 = llvm.getelementptr %146[%714] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %716 = llvm.bitcast %715 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %717 = llvm.insertelement %679, %698[%28 : i32] : vector<1xf32>
    llvm.store %717, %716 : !llvm.ptr<vector<1xf32>, 3>
    %718 = llvm.add %67, %31  : i32
    %719 = llvm.mul %718, %5  : i32
    %720 = llvm.add %719, %693  : i32
    %721 = llvm.getelementptr %146[%720] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %722 = llvm.bitcast %721 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %723 = llvm.insertelement %680, %698[%28 : i32] : vector<1xf32>
    llvm.store %723, %722 : !llvm.ptr<vector<1xf32>, 3>
    %724 = llvm.add %67, %9  : i32
    %725 = llvm.mul %724, %5  : i32
    %726 = llvm.add %725, %693  : i32
    %727 = llvm.getelementptr %146[%726] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %728 = llvm.bitcast %727 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %729 = llvm.insertelement %681, %698[%28 : i32] : vector<1xf32>
    llvm.store %729, %728 : !llvm.ptr<vector<1xf32>, 3>
    %730 = llvm.add %67, %21  : i32
    %731 = llvm.mul %730, %5  : i32
    %732 = llvm.add %731, %693  : i32
    %733 = llvm.getelementptr %146[%732] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %734 = llvm.bitcast %733 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %735 = llvm.insertelement %682, %698[%28 : i32] : vector<1xf32>
    llvm.store %735, %734 : !llvm.ptr<vector<1xf32>, 3>
    %736 = llvm.add %67, %8  : i32
    %737 = llvm.mul %736, %5  : i32
    %738 = llvm.add %737, %693  : i32
    %739 = llvm.getelementptr %146[%738] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %740 = llvm.bitcast %739 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %741 = llvm.insertelement %683, %698[%28 : i32] : vector<1xf32>
    llvm.store %741, %740 : !llvm.ptr<vector<1xf32>, 3>
    %742 = llvm.add %67, %27  : i32
    %743 = llvm.mul %742, %5  : i32
    %744 = llvm.add %743, %693  : i32
    %745 = llvm.getelementptr %146[%744] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %746 = llvm.bitcast %745 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %747 = llvm.insertelement %684, %698[%28 : i32] : vector<1xf32>
    llvm.store %747, %746 : !llvm.ptr<vector<1xf32>, 3>
    %748 = llvm.add %67, %4  : i32
    %749 = llvm.mul %748, %5  : i32
    %750 = llvm.add %749, %693  : i32
    %751 = llvm.getelementptr %146[%750] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %752 = llvm.bitcast %751 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %753 = llvm.insertelement %685, %698[%28 : i32] : vector<1xf32>
    llvm.store %753, %752 : !llvm.ptr<vector<1xf32>, 3>
    %754 = llvm.add %67, %18  : i32
    %755 = llvm.mul %754, %5  : i32
    %756 = llvm.add %755, %693  : i32
    %757 = llvm.getelementptr %146[%756] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %758 = llvm.bitcast %757 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %759 = llvm.insertelement %686, %698[%28 : i32] : vector<1xf32>
    llvm.store %759, %758 : !llvm.ptr<vector<1xf32>, 3>
    %760 = llvm.add %67, %3  : i32
    %761 = llvm.mul %760, %5  : i32
    %762 = llvm.add %761, %693  : i32
    %763 = llvm.getelementptr %146[%762] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %764 = llvm.bitcast %763 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %765 = llvm.insertelement %687, %698[%28 : i32] : vector<1xf32>
    llvm.store %765, %764 : !llvm.ptr<vector<1xf32>, 3>
    %766 = llvm.add %67, %15  : i32
    %767 = llvm.mul %766, %5  : i32
    %768 = llvm.add %767, %693  : i32
    %769 = llvm.getelementptr %146[%768] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %770 = llvm.bitcast %769 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %771 = llvm.insertelement %688, %698[%28 : i32] : vector<1xf32>
    llvm.store %771, %770 : !llvm.ptr<vector<1xf32>, 3>
    %772 = llvm.add %67, %2  : i32
    %773 = llvm.mul %772, %5  : i32
    %774 = llvm.add %773, %693  : i32
    %775 = llvm.getelementptr %146[%774] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %776 = llvm.bitcast %775 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %777 = llvm.insertelement %689, %698[%28 : i32] : vector<1xf32>
    llvm.store %777, %776 : !llvm.ptr<vector<1xf32>, 3>
    %778 = llvm.add %67, %14  : i32
    %779 = llvm.mul %778, %5  : i32
    %780 = llvm.add %779, %693  : i32
    %781 = llvm.getelementptr %146[%780] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %782 = llvm.bitcast %781 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %783 = llvm.insertelement %690, %698[%28 : i32] : vector<1xf32>
    llvm.store %783, %782 : !llvm.ptr<vector<1xf32>, 3>
    %784 = llvm.add %67, %1  : i32
    %785 = llvm.mul %784, %5  : i32
    %786 = llvm.add %785, %693  : i32
    %787 = llvm.getelementptr %146[%786] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %788 = llvm.bitcast %787 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<1xf32>, 3>
    %789 = llvm.insertelement %691, %698[%28 : i32] : vector<1xf32>
    llvm.store %789, %788 : !llvm.ptr<vector<1xf32>, 3>
    rocdl.barrier
    %790 = llvm.mul %45, %5  : i32
    %791 = llvm.add %790, %54  : i32
    %792 = llvm.getelementptr %146[%791] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %793 = llvm.bitcast %792 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    %794 = llvm.load %793 : !llvm.ptr<vector<4xf32>, 3>
    %795 = llvm.extractelement %794[%28 : i32] : vector<4xf32>
    %796 = llvm.extractelement %794[%32 : i32] : vector<4xf32>
    %797 = llvm.extractelement %794[%26 : i32] : vector<4xf32>
    %798 = llvm.extractelement %794[%25 : i32] : vector<4xf32>
    %799 = llvm.mul %46, %5  : i32
    %800 = llvm.add %799, %54  : i32
    %801 = llvm.getelementptr %146[%800] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %802 = llvm.bitcast %801 : !llvm.ptr<f32, 3> to !llvm.ptr<vector<4xf32>, 3>
    %803 = llvm.load %802 : !llvm.ptr<vector<4xf32>, 3>
    %804 = llvm.extractelement %803[%28 : i32] : vector<4xf32>
    %805 = llvm.extractelement %803[%32 : i32] : vector<4xf32>
    %806 = llvm.extractelement %803[%26 : i32] : vector<4xf32>
    %807 = llvm.extractelement %803[%25 : i32] : vector<4xf32>
    rocdl.barrier
    %808 = llvm.fcmp "ogt" %795, %796 : f32
    %809 = llvm.select %808, %795, %796 : i1, f32
    %810 = llvm.fcmp "ogt" %809, %797 : f32
    %811 = llvm.select %810, %809, %797 : i1, f32
    %812 = llvm.fcmp "ogt" %811, %798 : f32
    %813 = llvm.select %812, %811, %798 : i1, f32
    %814 = llvm.fcmp "ogt" %804, %805 : f32
    %815 = llvm.select %814, %804, %805 : i1, f32
    %816 = llvm.fcmp "ogt" %815, %806 : f32
    %817 = llvm.select %816, %815, %806 : i1, f32
    %818 = llvm.fcmp "ogt" %817, %807 : f32
    %819 = llvm.select %818, %817, %807 : i1, f32
    %820 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %813 : (f32) -> f32
    %821 = llvm.fcmp "ogt" %813, %820 : f32
    %822 = llvm.select %821, %813, %820 : i1, f32
    %823 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %822 : (f32) -> f32
    %824 = llvm.fcmp "ogt" %822, %823 : f32
    %825 = llvm.select %824, %822, %823 : i1, f32
    %826 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %825 : (f32) -> f32
    %827 = llvm.fcmp "ogt" %825, %826 : f32
    %828 = llvm.select %827, %825, %826 : i1, f32
    %829 = llvm.mul %45, %32  : i32
    %830 = llvm.add %829, %28  : i32
    %831 = llvm.getelementptr %146[%830] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %828, %831 : !llvm.ptr<f32, 3>
    %832 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %819 : (f32) -> f32
    %833 = llvm.fcmp "ogt" %819, %832 : f32
    %834 = llvm.select %833, %819, %832 : i1, f32
    %835 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %834 : (f32) -> f32
    %836 = llvm.fcmp "ogt" %834, %835 : f32
    %837 = llvm.select %836, %834, %835 : i1, f32
    %838 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %837 : (f32) -> f32
    %839 = llvm.fcmp "ogt" %837, %838 : f32
    %840 = llvm.select %839, %837, %838 : i1, f32
    %841 = llvm.mul %46, %32  : i32
    %842 = llvm.add %841, %28  : i32
    %843 = llvm.getelementptr %146[%842] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    llvm.store %840, %843 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %844 = llvm.getelementptr %146[%35] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %845 = llvm.load %844 : !llvm.ptr<f32, 3>
    llvm.store %845, %844 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %846 = llvm.load %831 : !llvm.ptr<f32, 3>
    %847 = llvm.load %843 : !llvm.ptr<f32, 3>
    %848 = llvm.fsub %795, %846  : f32
    %849 = llvm.fsub %796, %846  : f32
    %850 = llvm.fsub %797, %846  : f32
    %851 = llvm.fsub %798, %846  : f32
    %852 = llvm.fsub %804, %847  : f32
    %853 = llvm.fsub %805, %847  : f32
    %854 = llvm.fsub %806, %847  : f32
    %855 = llvm.fsub %807, %847  : f32
    %856 = llvm.fmul %848, %0  : f32
    %857 = llvm.call @__ocml_exp2_f32(%856) : (f32) -> f32
    %858 = llvm.fmul %849, %0  : f32
    %859 = llvm.call @__ocml_exp2_f32(%858) : (f32) -> f32
    %860 = llvm.fmul %850, %0  : f32
    %861 = llvm.call @__ocml_exp2_f32(%860) : (f32) -> f32
    %862 = llvm.fmul %851, %0  : f32
    %863 = llvm.call @__ocml_exp2_f32(%862) : (f32) -> f32
    %864 = llvm.fmul %852, %0  : f32
    %865 = llvm.call @__ocml_exp2_f32(%864) : (f32) -> f32
    %866 = llvm.fmul %853, %0  : f32
    %867 = llvm.call @__ocml_exp2_f32(%866) : (f32) -> f32
    %868 = llvm.fmul %854, %0  : f32
    %869 = llvm.call @__ocml_exp2_f32(%868) : (f32) -> f32
    %870 = llvm.fmul %855, %0  : f32
    %871 = llvm.call @__ocml_exp2_f32(%870) : (f32) -> f32
    rocdl.barrier
    %872 = llvm.fadd %857, %859  : f32
    %873 = llvm.fadd %872, %861  : f32
    %874 = llvm.fadd %873, %863  : f32
    %875 = llvm.fadd %865, %867  : f32
    %876 = llvm.fadd %875, %869  : f32
    %877 = llvm.fadd %876, %871  : f32
    %878 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %874 : (f32) -> f32
    %879 = llvm.fadd %874, %878  : f32
    %880 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %879 : (f32) -> f32
    %881 = llvm.fadd %879, %880  : f32
    %882 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %881 : (f32) -> f32
    %883 = llvm.fadd %881, %882  : f32
    llvm.store %883, %831 : !llvm.ptr<f32, 3>
    %884 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %877 : (f32) -> f32
    %885 = llvm.fadd %877, %884  : f32
    %886 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %885 : (f32) -> f32
    %887 = llvm.fadd %885, %886  : f32
    %888 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v" %887 : (f32) -> f32
    %889 = llvm.fadd %887, %888  : f32
    llvm.store %889, %843 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %890 = llvm.load %844 : !llvm.ptr<f32, 3>
    llvm.store %890, %844 : !llvm.ptr<f32, 3>
    rocdl.barrier
    %891 = llvm.load %831 : !llvm.ptr<f32, 3>
    %892 = llvm.load %843 : !llvm.ptr<f32, 3>
    %893 = llvm.fdiv %857, %891  : f32
    %894 = llvm.fdiv %859, %891  : f32
    %895 = llvm.fdiv %861, %891  : f32
    %896 = llvm.fdiv %863, %891  : f32
    %897 = llvm.fdiv %865, %892  : f32
    %898 = llvm.fdiv %867, %892  : f32
    %899 = llvm.fdiv %869, %892  : f32
    %900 = llvm.fdiv %871, %892  : f32
    %901 = llvm.insertelement %893, %698[%28 : i32] : vector<1xf32>
    %902 = llvm.bitcast %901 : vector<1xf32> to i32
    llvm.store %902, %106 : !llvm.ptr<f32, 1>
    %903 = llvm.insertelement %894, %698[%28 : i32] : vector<1xf32>
    %904 = llvm.bitcast %903 : vector<1xf32> to i32
    llvm.store %904, %107 : !llvm.ptr<f32, 1>
    %905 = llvm.insertelement %895, %698[%28 : i32] : vector<1xf32>
    %906 = llvm.bitcast %905 : vector<1xf32> to i32
    llvm.store %906, %108 : !llvm.ptr<f32, 1>
    %907 = llvm.insertelement %896, %698[%28 : i32] : vector<1xf32>
    %908 = llvm.bitcast %907 : vector<1xf32> to i32
    llvm.store %908, %109 : !llvm.ptr<f32, 1>
    %909 = llvm.insertelement %897, %698[%28 : i32] : vector<1xf32>
    %910 = llvm.bitcast %909 : vector<1xf32> to i32
    llvm.store %910, %110 : !llvm.ptr<f32, 1>
    %911 = llvm.insertelement %898, %698[%28 : i32] : vector<1xf32>
    %912 = llvm.bitcast %911 : vector<1xf32> to i32
    llvm.store %912, %111 : !llvm.ptr<f32, 1>
    %913 = llvm.insertelement %899, %698[%28 : i32] : vector<1xf32>
    %914 = llvm.bitcast %913 : vector<1xf32> to i32
    llvm.store %914, %112 : !llvm.ptr<f32, 1>
    %915 = llvm.insertelement %900, %698[%28 : i32] : vector<1xf32>
    %916 = llvm.bitcast %915 : vector<1xf32> to i32
    llvm.store %916, %113 : !llvm.ptr<f32, 1>
    llvm.return
  }
}


// -----// LLVM IR Dump //----- //
; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define amdgpu_kernel void @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(ptr addrspace(1) nocapture readonly %0, i32 %1, ptr addrspace(1) nocapture readonly %2, i32 %3, ptr addrspace(1) nocapture readnone %4, i32 %5, ptr addrspace(1) nocapture writeonly %6, i32 %7) local_unnamed_addr #0 {
  %9 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %10 = and i32 %9, 63
  %11 = lshr i32 %10, 3
  %12 = lshr i32 %9, 3
  %13 = and i32 %12, 24
  %14 = or i32 %11, %13
  %15 = add nuw nsw i32 %14, 16
  %16 = shl i32 %9, 2
  %17 = and i32 %16, 28
  %18 = or i32 %17, 1
  %19 = or i32 %17, 2
  %20 = or i32 %17, 3
  %21 = lshr i32 %10, 5
  %22 = and i32 %9, 31
  %23 = mul i32 %14, %1
  %24 = mul i32 %15, %1
  %25 = sext i32 %23 to i64
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25
  %27 = sext i32 %24 to i64
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27
  %29 = zext i32 %17 to i64
  %30 = getelementptr float, ptr addrspace(1) %26, i64 %29
  %31 = zext i32 %18 to i64
  %32 = getelementptr float, ptr addrspace(1) %26, i64 %31
  %33 = zext i32 %19 to i64
  %34 = getelementptr float, ptr addrspace(1) %26, i64 %33
  %35 = zext i32 %20 to i64
  %36 = getelementptr float, ptr addrspace(1) %26, i64 %35
  %37 = getelementptr float, ptr addrspace(1) %28, i64 %29
  %38 = getelementptr float, ptr addrspace(1) %28, i64 %31
  %39 = getelementptr float, ptr addrspace(1) %28, i64 %33
  %40 = getelementptr float, ptr addrspace(1) %28, i64 %35
  %41 = mul i32 %14, %3
  %42 = mul i32 %15, %3
  %43 = sext i32 %41 to i64
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43
  %45 = sext i32 %42 to i64
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45
  %47 = getelementptr float, ptr addrspace(1) %44, i64 %29
  %48 = getelementptr float, ptr addrspace(1) %44, i64 %31
  %49 = getelementptr float, ptr addrspace(1) %44, i64 %33
  %50 = getelementptr float, ptr addrspace(1) %44, i64 %35
  %51 = getelementptr float, ptr addrspace(1) %46, i64 %29
  %52 = getelementptr float, ptr addrspace(1) %46, i64 %31
  %53 = getelementptr float, ptr addrspace(1) %46, i64 %33
  %54 = getelementptr float, ptr addrspace(1) %46, i64 %35
  %55 = mul i32 %14, %7
  %56 = mul i32 %15, %7
  %57 = sext i32 %55 to i64
  %58 = getelementptr float, ptr addrspace(1) %6, i64 %57
  %59 = sext i32 %56 to i64
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %59
  %61 = getelementptr float, ptr addrspace(1) %58, i64 %29
  %62 = getelementptr float, ptr addrspace(1) %58, i64 %31
  %63 = getelementptr float, ptr addrspace(1) %58, i64 %33
  %64 = getelementptr float, ptr addrspace(1) %58, i64 %35
  %65 = getelementptr float, ptr addrspace(1) %60, i64 %29
  %66 = getelementptr float, ptr addrspace(1) %60, i64 %31
  %67 = getelementptr float, ptr addrspace(1) %60, i64 %33
  %68 = getelementptr float, ptr addrspace(1) %60, i64 %35
  %69 = addrspacecast ptr addrspace(1) %30 to ptr
  %70 = load <1 x float>, ptr %69, align 4
  %71 = addrspacecast ptr addrspace(1) %32 to ptr
  %72 = load <1 x float>, ptr %71, align 4
  %73 = addrspacecast ptr addrspace(1) %34 to ptr
  %74 = load <1 x float>, ptr %73, align 4
  %75 = shufflevector <1 x float> %74, <1 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %76 = addrspacecast ptr addrspace(1) %36 to ptr
  %77 = load <1 x float>, ptr %76, align 4
  %78 = shufflevector <1 x float> %77, <1 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %79 = addrspacecast ptr addrspace(1) %37 to ptr
  %80 = load <1 x float>, ptr %79, align 4
  %81 = addrspacecast ptr addrspace(1) %38 to ptr
  %82 = load <1 x float>, ptr %81, align 4
  %83 = addrspacecast ptr addrspace(1) %39 to ptr
  %84 = load <1 x float>, ptr %83, align 4
  %85 = shufflevector <1 x float> %84, <1 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %86 = addrspacecast ptr addrspace(1) %40 to ptr
  %87 = load <1 x float>, ptr %86, align 4
  %88 = shufflevector <1 x float> %87, <1 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %89 = and i32 %11, 1
  %90 = shl nuw nsw i32 %14, 5
  %91 = shl nuw nsw i32 %89, 3
  %.masked = and i32 %16, 24
  %92 = xor i32 %91, %.masked
  %93 = and i32 %16, 4
  %94 = or i32 %93, %92
  %95 = or i32 %94, %90
  %96 = zext i32 %95 to i64
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i64 %96
  %98 = getelementptr float, ptr addrspace(3) %97, i64 512
  %99 = shufflevector <1 x float> %70, <1 x float> %72, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %100 = shufflevector <4 x float> %99, <4 x float> %75, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %101 = shufflevector <4 x float> %100, <4 x float> %78, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x float> %101, ptr addrspace(3) %97, align 16
  %102 = shufflevector <1 x float> %80, <1 x float> %82, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %103 = shufflevector <4 x float> %102, <4 x float> %85, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %104 = shufflevector <4 x float> %103, <4 x float> %88, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x float> %104, ptr addrspace(3) %98, align 16
  %105 = addrspacecast ptr addrspace(1) %47 to ptr
  %106 = load <1 x float>, ptr %105, align 4
  %107 = addrspacecast ptr addrspace(1) %48 to ptr
  %108 = load <1 x float>, ptr %107, align 4
  %109 = addrspacecast ptr addrspace(1) %49 to ptr
  %110 = load <1 x float>, ptr %109, align 4
  %111 = addrspacecast ptr addrspace(1) %50 to ptr
  %112 = load <1 x float>, ptr %111, align 4
  %113 = addrspacecast ptr addrspace(1) %51 to ptr
  %114 = load <1 x float>, ptr %113, align 4
  %115 = addrspacecast ptr addrspace(1) %52 to ptr
  %116 = load <1 x float>, ptr %115, align 4
  %117 = addrspacecast ptr addrspace(1) %53 to ptr
  %118 = load <1 x float>, ptr %117, align 4
  %119 = addrspacecast ptr addrspace(1) %54 to ptr
  %120 = load <1 x float>, ptr %119, align 4
  %121 = shl nuw nsw i32 %89, 1
  %122 = or i32 %121, %17
  %123 = or i32 %122, %90
  %124 = zext i32 %123 to i64
  %125 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %124
  %126 = xor i32 %121, %19
  %127 = or i32 %126, %90
  %128 = zext i32 %127 to i64
  %129 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %128
  %130 = getelementptr float, ptr addrspace(3) %125, i64 512
  %131 = getelementptr float, ptr addrspace(3) %129, i64 512
  %132 = shufflevector <1 x float> %106, <1 x float> %108, <2 x i32> <i32 0, i32 1>
  store <2 x float> %132, ptr addrspace(3) %125, align 8
  %133 = shufflevector <1 x float> %110, <1 x float> %112, <2 x i32> <i32 0, i32 1>
  store <2 x float> %133, ptr addrspace(3) %129, align 8
  %134 = shufflevector <1 x float> %114, <1 x float> %116, <2 x i32> <i32 0, i32 1>
  store <2 x float> %134, ptr addrspace(3) %130, align 8
  %135 = shufflevector <1 x float> %118, <1 x float> %120, <2 x i32> <i32 0, i32 1>
  store <2 x float> %135, ptr addrspace(3) %131, align 8
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %136 = or i32 %21, 2
  %137 = or i32 %21, 4
  %138 = or i32 %21, 6
  %139 = or i32 %21, 10
  %140 = or i32 %21, 12
  %141 = or i32 %21, 14
  %142 = or i32 %21, 18
  %143 = or i32 %21, 20
  %144 = or i32 %21, 22
  %145 = or i32 %21, 26
  %146 = or i32 %21, 28
  %147 = or i32 %21, 30
  %148 = and i32 %9, 1
  %149 = shl nuw nsw i32 %148, 3
  %150 = or i32 %149, %21
  %151 = shl nuw nsw i32 %22, 5
  %152 = or i32 %150, %151
  %153 = or i32 %151, %149
  %154 = or i32 %153, %136
  %155 = or i32 %153, %137
  %156 = or i32 %153, %138
  %157 = xor i32 %152, 8
  %158 = and i32 %139, 3
  %159 = or i32 %149, %158
  %160 = or i32 %159, %151
  %161 = xor i32 %160, 8
  %162 = and i32 %140, 5
  %163 = or i32 %149, %162
  %164 = or i32 %163, %151
  %165 = xor i32 %164, 8
  %166 = and i32 %141, 7
  %167 = or i32 %149, %166
  %168 = or i32 %167, %151
  %169 = xor i32 %168, 8
  %170 = or i32 %152, 16
  %171 = or i32 %153, %142
  %172 = or i32 %153, %143
  %173 = or i32 %153, %144
  %174 = xor i32 %152, 24
  %175 = and i32 %145, 3
  %176 = or i32 %149, %175
  %177 = or i32 %176, %151
  %178 = xor i32 %177, 24
  %179 = and i32 %146, 5
  %180 = or i32 %149, %179
  %181 = or i32 %180, %151
  %182 = xor i32 %181, 24
  %183 = and i32 %147, 7
  %184 = or i32 %149, %183
  %185 = or i32 %184, %151
  %186 = xor i32 %185, 24
  %187 = zext i32 %152 to i64
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i64 %187
  %189 = load float, ptr addrspace(3) %188, align 4
  %190 = zext i32 %154 to i64
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i64 %190
  %192 = load float, ptr addrspace(3) %191, align 4
  %193 = zext i32 %155 to i64
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i64 %193
  %195 = load float, ptr addrspace(3) %194, align 4
  %196 = zext i32 %156 to i64
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i64 %196
  %198 = load float, ptr addrspace(3) %197, align 4
  %199 = zext i32 %157 to i64
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i64 %199
  %201 = load float, ptr addrspace(3) %200, align 4
  %202 = zext i32 %161 to i64
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %202
  %204 = load float, ptr addrspace(3) %203, align 4
  %205 = zext i32 %165 to i64
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i64 %205
  %207 = load float, ptr addrspace(3) %206, align 4
  %208 = zext i32 %169 to i64
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i64 %208
  %210 = load float, ptr addrspace(3) %209, align 4
  %211 = zext i32 %170 to i64
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i64 %211
  %213 = load float, ptr addrspace(3) %212, align 4
  %214 = zext i32 %171 to i64
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i64 %214
  %216 = load float, ptr addrspace(3) %215, align 4
  %217 = zext i32 %172 to i64
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i64 %217
  %219 = load float, ptr addrspace(3) %218, align 4
  %220 = zext i32 %173 to i64
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i64 %220
  %222 = load float, ptr addrspace(3) %221, align 4
  %223 = zext i32 %174 to i64
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i64 %223
  %225 = load float, ptr addrspace(3) %224, align 4
  %226 = zext i32 %178 to i64
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i64 %226
  %228 = load float, ptr addrspace(3) %227, align 4
  %229 = zext i32 %182 to i64
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i64 %229
  %231 = load float, ptr addrspace(3) %230, align 4
  %232 = zext i32 %186 to i64
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i64 %232
  %234 = load float, ptr addrspace(3) %233, align 4
  %235 = shl nuw nsw i32 %21, 1
  %.masked1 = and i32 %9, 30
  %236 = xor i32 %235, %.masked1
  %237 = and i32 %9, 33
  %238 = or i32 %237, %236
  %239 = shl nuw nsw i32 %136, 5
  %240 = or i32 %236, %239
  %241 = or i32 %240, %148
  %242 = shl nuw nsw i32 %137, 5
  %243 = or i32 %236, %242
  %244 = or i32 %243, %148
  %245 = shl nuw nsw i32 %138, 5
  %246 = or i32 %236, %245
  %247 = or i32 %246, %148
  %248 = or i32 %238, 256
  %249 = shl nuw nsw i32 %139, 5
  %250 = or i32 %236, %249
  %251 = or i32 %250, %148
  %252 = shl nuw nsw i32 %140, 5
  %253 = or i32 %236, %252
  %254 = or i32 %253, %148
  %255 = shl nuw nsw i32 %141, 5
  %256 = or i32 %236, %255
  %257 = or i32 %256, %148
  %258 = or i32 %238, 512
  %259 = shl nuw nsw i32 %142, 5
  %260 = or i32 %236, %259
  %261 = or i32 %260, %148
  %262 = shl nuw nsw i32 %143, 5
  %263 = or i32 %236, %262
  %264 = or i32 %263, %148
  %265 = shl nuw nsw i32 %144, 5
  %266 = or i32 %236, %265
  %267 = or i32 %266, %148
  %268 = or i32 %238, 768
  %269 = shl nuw nsw i32 %145, 5
  %270 = or i32 %236, %269
  %271 = or i32 %270, %148
  %272 = shl nuw nsw i32 %146, 5
  %273 = or i32 %236, %272
  %274 = or i32 %273, %148
  %275 = shl nuw nsw i32 %147, 5
  %276 = or i32 %236, %275
  %277 = or i32 %276, %148
  %278 = zext i32 %238 to i64
  %279 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %278
  %280 = load float, ptr addrspace(3) %279, align 4
  %281 = zext i32 %241 to i64
  %282 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %281
  %283 = load float, ptr addrspace(3) %282, align 4
  %284 = zext i32 %244 to i64
  %285 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %284
  %286 = load float, ptr addrspace(3) %285, align 4
  %287 = zext i32 %247 to i64
  %288 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %287
  %289 = load float, ptr addrspace(3) %288, align 4
  %290 = zext i32 %248 to i64
  %291 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %290
  %292 = load float, ptr addrspace(3) %291, align 4
  %293 = zext i32 %251 to i64
  %294 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %293
  %295 = load float, ptr addrspace(3) %294, align 4
  %296 = zext i32 %254 to i64
  %297 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %296
  %298 = load float, ptr addrspace(3) %297, align 4
  %299 = zext i32 %257 to i64
  %300 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %299
  %301 = load float, ptr addrspace(3) %300, align 4
  %302 = zext i32 %258 to i64
  %303 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %302
  %304 = load float, ptr addrspace(3) %303, align 4
  %305 = zext i32 %261 to i64
  %306 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %305
  %307 = load float, ptr addrspace(3) %306, align 4
  %308 = zext i32 %264 to i64
  %309 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %308
  %310 = load float, ptr addrspace(3) %309, align 4
  %311 = zext i32 %267 to i64
  %312 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %311
  %313 = load float, ptr addrspace(3) %312, align 4
  %314 = zext i32 %268 to i64
  %315 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %314
  %316 = load float, ptr addrspace(3) %315, align 4
  %317 = zext i32 %271 to i64
  %318 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %317
  %319 = load float, ptr addrspace(3) %318, align 4
  %320 = zext i32 %274 to i64
  %321 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %320
  %322 = load float, ptr addrspace(3) %321, align 4
  %323 = zext i32 %277 to i64
  %324 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %323
  %325 = load float, ptr addrspace(3) %324, align 4
  %326 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %189, float %280, <16 x float> zeroinitializer, i32 0, i32 0, i32 0)
  %327 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %192, float %283, <16 x float> %326, i32 0, i32 0, i32 0)
  %328 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %195, float %286, <16 x float> %327, i32 0, i32 0, i32 0)
  %329 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %198, float %289, <16 x float> %328, i32 0, i32 0, i32 0)
  %330 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %201, float %292, <16 x float> %329, i32 0, i32 0, i32 0)
  %331 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %204, float %295, <16 x float> %330, i32 0, i32 0, i32 0)
  %332 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %207, float %298, <16 x float> %331, i32 0, i32 0, i32 0)
  %333 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %210, float %301, <16 x float> %332, i32 0, i32 0, i32 0)
  %334 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %213, float %304, <16 x float> %333, i32 0, i32 0, i32 0)
  %335 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %216, float %307, <16 x float> %334, i32 0, i32 0, i32 0)
  %336 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %219, float %310, <16 x float> %335, i32 0, i32 0, i32 0)
  %337 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %222, float %313, <16 x float> %336, i32 0, i32 0, i32 0)
  %338 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %225, float %316, <16 x float> %337, i32 0, i32 0, i32 0)
  %339 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %228, float %319, <16 x float> %338, i32 0, i32 0, i32 0)
  %340 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %231, float %322, <16 x float> %339, i32 0, i32 0, i32 0)
  %341 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float %234, float %325, <16 x float> %340, i32 0, i32 0, i32 0)
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %342 = mul nuw nsw i32 %21, 144
  %343 = add nuw nsw i32 %342, %22
  %344 = zext i32 %343 to i64
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i64 %344
  %346 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> zeroinitializer
  store <1 x float> %346, ptr addrspace(3) %345, align 4
  %347 = add nuw nsw i32 %343, 36
  %348 = zext i32 %347 to i64
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i64 %348
  %350 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 1>
  store <1 x float> %350, ptr addrspace(3) %349, align 4
  %351 = add nuw nsw i32 %343, 72
  %352 = zext i32 %351 to i64
  %353 = getelementptr float, ptr addrspace(3) @global_smem, i64 %352
  %354 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 2>
  store <1 x float> %354, ptr addrspace(3) %353, align 4
  %355 = add nuw nsw i32 %343, 108
  %356 = zext i32 %355 to i64
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i64 %356
  %358 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 3>
  store <1 x float> %358, ptr addrspace(3) %357, align 4
  %359 = add nuw nsw i32 %343, 288
  %360 = zext i32 %359 to i64
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i64 %360
  %362 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 4>
  store <1 x float> %362, ptr addrspace(3) %361, align 4
  %363 = add nuw nsw i32 %343, 324
  %364 = zext i32 %363 to i64
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i64 %364
  %366 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 5>
  store <1 x float> %366, ptr addrspace(3) %365, align 4
  %367 = add nuw nsw i32 %343, 360
  %368 = zext i32 %367 to i64
  %369 = getelementptr float, ptr addrspace(3) @global_smem, i64 %368
  %370 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 6>
  store <1 x float> %370, ptr addrspace(3) %369, align 4
  %371 = add nuw nsw i32 %343, 396
  %372 = zext i32 %371 to i64
  %373 = getelementptr float, ptr addrspace(3) @global_smem, i64 %372
  %374 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 7>
  store <1 x float> %374, ptr addrspace(3) %373, align 4
  %375 = add nuw nsw i32 %343, 576
  %376 = zext i32 %375 to i64
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i64 %376
  %378 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 8>
  store <1 x float> %378, ptr addrspace(3) %377, align 4
  %379 = add nuw nsw i32 %343, 612
  %380 = zext i32 %379 to i64
  %381 = getelementptr float, ptr addrspace(3) @global_smem, i64 %380
  %382 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 9>
  store <1 x float> %382, ptr addrspace(3) %381, align 4
  %383 = add nuw nsw i32 %343, 648
  %384 = zext i32 %383 to i64
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i64 %384
  %386 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 10>
  store <1 x float> %386, ptr addrspace(3) %385, align 4
  %387 = add nuw nsw i32 %343, 684
  %388 = zext i32 %387 to i64
  %389 = getelementptr float, ptr addrspace(3) @global_smem, i64 %388
  %390 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 11>
  store <1 x float> %390, ptr addrspace(3) %389, align 4
  %391 = add nuw nsw i32 %343, 864
  %392 = zext i32 %391 to i64
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i64 %392
  %394 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 12>
  store <1 x float> %394, ptr addrspace(3) %393, align 4
  %395 = add nuw nsw i32 %343, 900
  %396 = zext i32 %395 to i64
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i64 %396
  %398 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 13>
  store <1 x float> %398, ptr addrspace(3) %397, align 4
  %399 = add nuw nsw i32 %343, 936
  %400 = zext i32 %399 to i64
  %401 = getelementptr float, ptr addrspace(3) @global_smem, i64 %400
  %402 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 14>
  store <1 x float> %402, ptr addrspace(3) %401, align 4
  %403 = add nuw nsw i32 %343, 972
  %404 = zext i32 %403 to i64
  %405 = getelementptr float, ptr addrspace(3) @global_smem, i64 %404
  %406 = shufflevector <16 x float> %341, <16 x float> undef, <1 x i32> <i32 15>
  store <1 x float> %406, ptr addrspace(3) %405, align 4
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %407 = mul nuw nsw i32 %14, 36
  %408 = add nuw nsw i32 %407, %17
  %409 = zext i32 %408 to i64
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i64 %409
  %411 = getelementptr inbounds <4 x float>, ptr addrspace(3) %410, i64 0, i64 1
  %412 = getelementptr inbounds <4 x float>, ptr addrspace(3) %410, i64 0, i64 2
  %413 = getelementptr inbounds <4 x float>, ptr addrspace(3) %410, i64 0, i64 3
  %414 = mul nuw nsw i32 %15, 36
  %415 = add nuw nsw i32 %414, %17
  %416 = zext i32 %415 to i64
  %417 = getelementptr float, ptr addrspace(3) @global_smem, i64 %416
  %418 = getelementptr inbounds <4 x float>, ptr addrspace(3) %417, i64 0, i64 1
  %419 = getelementptr inbounds <4 x float>, ptr addrspace(3) %417, i64 0, i64 2
  %420 = getelementptr inbounds <4 x float>, ptr addrspace(3) %417, i64 0, i64 3
  %421 = zext i32 %14 to i64
  %422 = getelementptr float, ptr addrspace(3) @global_smem, i64 %421
  %423 = zext i32 %15 to i64
  %424 = getelementptr float, ptr addrspace(3) @global_smem, i64 %423
  %425 = load float, ptr addrspace(3) %410, align 16
  %426 = load float, ptr addrspace(3) %411, align 4
  %427 = load float, ptr addrspace(3) %412, align 8
  %428 = load float, ptr addrspace(3) %413, align 4
  %429 = load float, ptr addrspace(3) %417, align 16
  %430 = load float, ptr addrspace(3) %418, align 4
  %431 = load float, ptr addrspace(3) %419, align 8
  %432 = load float, ptr addrspace(3) %420, align 4
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %433 = fcmp ogt float %425, %426
  %434 = select i1 %433, float %425, float %426
  %435 = fcmp ogt float %434, %427
  %436 = select i1 %435, float %434, float %427
  %437 = fcmp ogt float %436, %428
  %438 = select i1 %437, float %436, float %428
  %439 = fcmp ogt float %429, %430
  %440 = select i1 %439, float %429, float %430
  %441 = fcmp ogt float %440, %431
  %442 = select i1 %441, float %440, float %431
  %443 = fcmp ogt float %442, %432
  %444 = select i1 %443, float %442, float %432
  %445 = tail call float asm "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %438) #4
  %446 = fcmp ogt float %438, %445
  %447 = select i1 %446, float %438, float %445
  %448 = tail call float asm "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %447) #4
  %449 = fcmp ogt float %447, %448
  %450 = select i1 %449, float %447, float %448
  %451 = tail call float asm "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %450) #4
  %452 = fcmp ogt float %450, %451
  %453 = select i1 %452, float %450, float %451
  store float %453, ptr addrspace(3) %422, align 4
  %454 = tail call float asm "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %444) #4
  %455 = fcmp ogt float %444, %454
  %456 = select i1 %455, float %444, float %454
  %457 = tail call float asm "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %456) #4
  %458 = fcmp ogt float %456, %457
  %459 = select i1 %458, float %456, float %457
  %460 = tail call float asm "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %459) #4
  %461 = fcmp ogt float %459, %460
  %462 = select i1 %461, float %459, float %460
  store float %462, ptr addrspace(3) %424, align 4
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %463 = load float, ptr addrspace(3) %422, align 4
  %464 = load float, ptr addrspace(3) %424, align 4
  %465 = insertelement <8 x float> poison, float %429, i64 0
  %466 = insertelement <8 x float> %465, float %430, i64 1
  %467 = insertelement <8 x float> %466, float %431, i64 2
  %468 = insertelement <8 x float> %467, float %432, i64 3
  %469 = insertelement <8 x float> %468, float %425, i64 4
  %470 = insertelement <8 x float> %469, float %426, i64 5
  %471 = insertelement <8 x float> %470, float %427, i64 6
  %472 = insertelement <8 x float> %471, float %428, i64 7
  %473 = insertelement <8 x float> poison, float %464, i64 0
  %474 = insertelement <8 x float> %473, float %463, i64 1
  %475 = shufflevector <8 x float> %474, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>
  %476 = fsub <8 x float> %472, %475
  %477 = fmul <8 x float> %476, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %478 = fcmp olt <8 x float> %477, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>
  %479 = extractelement <8 x i1> %478, i64 4
  %480 = select i1 %479, float 0x3BF0000000000000, float 1.000000e+00
  %481 = select i1 %479, float 6.400000e+01, float 0.000000e+00
  %482 = extractelement <8 x float> %477, i64 4
  %483 = fadd float %482, %481
  %484 = tail call float @llvm.exp2.f32(float %483)
  %485 = fmul float %480, %484
  %486 = extractelement <8 x i1> %478, i64 5
  %487 = select i1 %486, float 0x3BF0000000000000, float 1.000000e+00
  %488 = select i1 %486, float 6.400000e+01, float 0.000000e+00
  %489 = extractelement <8 x float> %477, i64 5
  %490 = fadd float %489, %488
  %491 = tail call float @llvm.exp2.f32(float %490)
  %492 = fmul float %487, %491
  %493 = extractelement <8 x i1> %478, i64 6
  %494 = select i1 %493, float 0x3BF0000000000000, float 1.000000e+00
  %495 = select i1 %493, float 6.400000e+01, float 0.000000e+00
  %496 = extractelement <8 x float> %477, i64 6
  %497 = fadd float %496, %495
  %498 = tail call float @llvm.exp2.f32(float %497)
  %499 = fmul float %494, %498
  %500 = extractelement <8 x i1> %478, i64 7
  %501 = select i1 %500, float 0x3BF0000000000000, float 1.000000e+00
  %502 = select i1 %500, float 6.400000e+01, float 0.000000e+00
  %503 = extractelement <8 x float> %477, i64 7
  %504 = fadd float %503, %502
  %505 = tail call float @llvm.exp2.f32(float %504)
  %506 = fmul float %501, %505
  %507 = extractelement <8 x i1> %478, i64 0
  %508 = select i1 %507, float 0x3BF0000000000000, float 1.000000e+00
  %509 = select i1 %507, float 6.400000e+01, float 0.000000e+00
  %510 = extractelement <8 x float> %477, i64 0
  %511 = fadd float %510, %509
  %512 = tail call float @llvm.exp2.f32(float %511)
  %513 = fmul float %508, %512
  %514 = extractelement <8 x i1> %478, i64 1
  %515 = select i1 %514, float 0x3BF0000000000000, float 1.000000e+00
  %516 = select i1 %514, float 6.400000e+01, float 0.000000e+00
  %517 = extractelement <8 x float> %477, i64 1
  %518 = fadd float %517, %516
  %519 = tail call float @llvm.exp2.f32(float %518)
  %520 = fmul float %515, %519
  %521 = extractelement <8 x i1> %478, i64 2
  %522 = select i1 %521, float 0x3BF0000000000000, float 1.000000e+00
  %523 = select i1 %521, float 6.400000e+01, float 0.000000e+00
  %524 = extractelement <8 x float> %477, i64 2
  %525 = fadd float %524, %523
  %526 = tail call float @llvm.exp2.f32(float %525)
  %527 = fmul float %522, %526
  %528 = extractelement <8 x i1> %478, i64 3
  %529 = select i1 %528, float 0x3BF0000000000000, float 1.000000e+00
  %530 = select i1 %528, float 6.400000e+01, float 0.000000e+00
  %531 = extractelement <8 x float> %477, i64 3
  %532 = fadd float %531, %530
  %533 = tail call float @llvm.exp2.f32(float %532)
  %534 = fmul float %529, %533
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %535 = fadd float %485, %492
  %536 = fadd float %499, %535
  %537 = fadd float %506, %536
  %538 = fadd float %513, %520
  %539 = fadd float %527, %538
  %540 = fadd float %534, %539
  %541 = tail call float asm "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %537) #4
  %542 = fadd float %541, %537
  %543 = tail call float asm "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %542) #4
  %544 = fadd float %543, %542
  %545 = tail call float asm "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %544) #4
  %546 = fadd float %545, %544
  store float %546, ptr addrspace(3) %422, align 4
  %547 = tail call float asm "ds_swizzle_b32 $0, $1, offset:4127\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %540) #4
  %548 = fadd float %547, %540
  %549 = tail call float asm "ds_swizzle_b32 $0, $1, offset:2079\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %548) #4
  %550 = fadd float %549, %548
  %551 = tail call float asm "ds_swizzle_b32 $0, $1, offset:1055\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %550) #4
  %552 = fadd float %551, %550
  store float %552, ptr addrspace(3) %424, align 4
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %553 = load float, ptr addrspace(3) %422, align 4
  %554 = load float, ptr addrspace(3) %424, align 4
  %555 = fdiv float %485, %553
  %556 = fdiv float %492, %553
  %557 = fdiv float %499, %553
  %558 = fdiv float %506, %553
  %559 = fdiv float %513, %554
  %560 = fdiv float %520, %554
  %561 = fdiv float %527, %554
  %562 = fdiv float %534, %554
  store float %555, ptr addrspace(1) %61, align 4
  store float %556, ptr addrspace(1) %62, align 4
  store float %557, ptr addrspace(1) %63, align 4
  store float %558, ptr addrspace(1) %64, align 4
  store float %559, ptr addrspace(1) %65, align 4
  store float %560, ptr addrspace(1) %66, align 4
  store float %561, ptr addrspace(1) %67, align 4
  store float %562, ptr addrspace(1) %68, align 4
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x2f32(float, float, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.exp2.f32(float) #1

attributes #0 = { "amdgpu-flat-work-group-size"="1, 1024" "amdgpu-unsafe-fp-atomics"="true" "denormal-fp-math-f32"="preserve-sign" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!nvvm.annotations = !{!0}
!llvm.ident = !{}
!opencl.ocl.version = !{}
!llvm.module.flags = !{!4, !5}

!0 = !{ptr @kernel_0d1d2c3d4d5c6d7d8c9d10d11c, !"kernel", i32 1}
!1 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!2 = !{!"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"}
!3 = !{i32 2, i32 0}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 1}

// -----// AMDGCN Dump //----- //
	.text
	.amdgcn_target "amdgcn-amd-amdhsa--gfx90a:sramecc+:xnack-"
	.globl	kernel_0d1d2c3d4d5c6d7d8c9d10d11c
	.p2align	8
	.type	kernel_0d1d2c3d4d5c6d7d8c9d10d11c,@function
kernel_0d1d2c3d4d5c6d7d8c9d10d11c:
	s_load_dwordx2 s[0:1], s[4:5], 0x0
	s_load_dword s6, s[4:5], 0x8
	s_load_dwordx2 s[2:3], s[4:5], 0x10
	s_load_dword s7, s[4:5], 0x18
	v_bfe_u32 v1, v0, 3, 3
	v_lshrrev_b32_e32 v2, 3, v0
	v_and_or_b32 v16, v2, 24, v1
	s_waitcnt lgkmcnt(0)
	v_mul_lo_u32 v2, v16, s6
	v_ashrrev_i32_e32 v3, 31, v2
	v_lshl_add_u32 v4, s6, 4, v2
	v_lshlrev_b64 v[2:3], 2, v[2:3]
	v_mov_b32_e32 v6, s1
	v_add_co_u32_e32 v7, vcc, s0, v2
	v_ashrrev_i32_e32 v5, 31, v4
	v_lshlrev_b32_e32 v1, 2, v0
	v_addc_co_u32_e32 v8, vcc, v6, v3, vcc
	v_lshlrev_b64 v[2:3], 2, v[4:5]
	v_and_b32_e32 v17, 28, v1
	v_add_co_u32_e32 v4, vcc, s0, v2
	v_addc_co_u32_e32 v5, vcc, v6, v3, vcc
	v_lshlrev_b32_e32 v18, 2, v17
	v_add_co_u32_e32 v2, vcc, v7, v18
	v_addc_co_u32_e32 v3, vcc, 0, v8, vcc
	v_add_co_u32_e32 v6, vcc, v4, v18
	v_mul_lo_u32 v4, v16, s7
	v_addc_co_u32_e32 v7, vcc, 0, v5, vcc
	v_ashrrev_i32_e32 v5, 31, v4
	v_lshl_add_u32 v8, s7, 4, v4
	v_lshlrev_b64 v[4:5], 2, v[4:5]
	v_mov_b32_e32 v10, s3
	v_add_co_u32_e32 v11, vcc, s2, v4
	v_ashrrev_i32_e32 v9, 31, v8
	v_addc_co_u32_e32 v12, vcc, v10, v5, vcc
	v_lshlrev_b64 v[4:5], 2, v[8:9]
	v_add_co_u32_e32 v14, vcc, s2, v4
	v_addc_co_u32_e32 v15, vcc, v10, v5, vcc
	v_add_co_u32_e32 v10, vcc, v11, v18
	v_addc_co_u32_e32 v11, vcc, 0, v12, vcc
	global_load_dwordx4 v[2:5], v[2:3], off
	global_load_dwordx4 v[6:9], v[6:7], off
	global_load_dwordx4 v[10:13], v[10:11], off
	v_add_co_u32_e32 v14, vcc, v14, v18
	v_addc_co_u32_e32 v15, vcc, 0, v15, vcc
	global_load_dwordx4 v[20:23], v[14:15], off
	v_and_b32_e32 v14, 63, v0
	v_bfe_u32 v14, v14, 3, 1
	v_and_b32_e32 v15, 24, v1
	v_lshlrev_b32_e32 v25, 5, v16
	v_lshlrev_b32_e32 v30, 3, v14
	v_lshlrev_b32_e32 v14, 1, v14
	s_add_i32 s0, 0, 0x1000
	v_and_b32_e32 v1, 4, v1
	v_xor_b32_e32 v15, v30, v15
	v_or3_b32 v30, v14, v17, v25
	v_and_b32_e32 v26, 31, v0
	v_or_b32_e32 v24, 2, v17
	v_or3_b32 v1, v1, v15, v25
	v_lshl_add_u32 v15, v30, 2, s0
	v_and_b32_e32 v30, 1, v0
	v_bfe_u32 v19, v0, 5, 1
	v_xor_b32_e32 v14, v14, v24
	v_lshlrev_b32_e32 v31, 3, v30
	v_lshlrev_b32_e32 v32, 5, v26
	v_or_b32_e32 v14, v14, v25
	v_lshl_add_u32 v1, v1, 2, 0
	v_or3_b32 v33, v31, v19, v32
	v_lshl_add_u32 v14, v14, 2, s0
	v_or_b32_e32 v27, 10, v19
	v_or_b32_e32 v28, 12, v19
	v_or_b32_e32 v29, 14, v19
	v_or_b32_e32 v44, 28, v19
	v_or_b32_e32 v45, 30, v19
	v_xor_b32_e32 v46, 8, v33
	v_and_b32_e32 v47, 5, v44
	v_and_b32_e32 v48, 7, v45
	v_or3_b32 v47, v31, v47, v32
	v_xor_b32_e32 v47, 24, v47
	s_movk_i32 s1, 0x90
	v_mad_u32_u24 v17, v16, 36, v17
	s_mov_b32 s12, 0xc2fc0000
	s_waitcnt vmcnt(3)
	ds_write_b128 v1, v[2:5]
	s_waitcnt vmcnt(2)
	ds_write_b128 v1, v[6:9] offset:2048
	s_waitcnt vmcnt(1)
	ds_write_b64 v15, v[10:11]
	ds_write_b64 v14, v[12:13]
	s_waitcnt vmcnt(0)
	ds_write_b64 v15, v[20:21] offset:2048
	ds_write_b64 v14, v[22:23] offset:2048
	v_lshl_add_u32 v2, v33, 2, 0
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_waitcnt lgkmcnt(0)
	ds_read2_b32 v[20:21], v2 offset1:16
	v_or3_b32 v2, v32, v31, v19
	v_lshl_add_u32 v34, v2, 2, 0
	v_lshlrev_b32_e32 v2, 1, v19
	v_and_b32_e32 v3, 30, v0
	v_xor_b32_e32 v35, v2, v3
	v_and_b32_e32 v1, 32, v0
	v_and_or_b32 v0, v0, 33, v35
	v_lshl_add_u32 v40, v0, 2, s0
	v_or3_b32 v1, v1, v35, v30
	ds_read2st64_b32 v[24:25], v40 offset1:4
	v_lshlrev_b32_e32 v39, 2, v1
	v_lshlrev_b32_e32 v2, 5, v27
	v_or_b32_e32 v0, 0x100, v39
	v_or3_b32 v36, v35, v2, v30
	v_lshlrev_b32_e32 v2, 5, v28
	v_add_u32_e32 v41, s0, v0
	v_or_b32_e32 v0, 0x200, v39
	v_or3_b32 v37, v35, v2, v30
	v_lshlrev_b32_e32 v2, 5, v29
	v_add_u32_e32 v42, s0, v0
	v_or_b32_e32 v0, 0x300, v39
	v_or3_b32 v38, v35, v2, v30
	v_add_u32_e32 v43, s0, v0
	s_waitcnt lgkmcnt(0)
	v_mfma_f32_32x32x2f32 v[0:15], v20, v24, 0
	ds_read2_b32 v[22:23], v34 offset0:2 offset1:4
	v_lshl_add_u32 v20, v36, 2, s0
	v_lshl_add_u32 v24, v37, 2, s0
	v_lshl_add_u32 v36, v38, 2, s0
	v_or_b32_e32 v37, 0x900, v39
	v_or_b32_e32 v38, 0xa00, v39
	v_add_u32_e32 v37, s0, v37
	v_add_u32_e32 v38, s0, v38
	ds_read_b32 v41, v41
	ds_read_b32 v42, v42
	ds_read_b32 v43, v43
	ds_read_b32 v20, v20
	ds_read_b32 v24, v24
	ds_read_b32 v36, v36
	ds_read_b32 v37, v37
	ds_read_b32 v38, v38
	v_xor_b32_e32 v33, 24, v33
	s_waitcnt lgkmcnt(7)
	v_mfma_f32_32x32x2f32 v[0:15], v22, v41, v[0:15]
	v_and_b32_e32 v22, 3, v27
	v_or3_b32 v22, v31, v22, v32
	v_xor_b32_e32 v27, 8, v22
	v_and_b32_e32 v22, 5, v28
	v_or3_b32 v22, v31, v22, v32
	v_xor_b32_e32 v28, 8, v22
	v_and_b32_e32 v22, 7, v29
	v_or_b32_e32 v41, 26, v19
	v_or3_b32 v22, v31, v22, v32
	v_xor_b32_e32 v29, 8, v22
	v_and_b32_e32 v22, 3, v41
	v_mad_u32_u24 v19, v19, s1, v26
	v_lshl_add_u32 v26, v16, 2, 0
	v_lshl_add_u32 v19, v19, 2, 0
	s_waitcnt lgkmcnt(6)
	v_mfma_f32_32x32x2f32 v[0:15], v23, v42, v[0:15]
	v_or3_b32 v42, v31, v22, v32
	ds_read2_b32 v[22:23], v34 offset0:6 offset1:18
	v_or3_b32 v31, v31, v48, v32
	v_lshl_add_u32 v32, v46, 2, 0
	ds_read_b32 v32, v32
	v_xor_b32_e32 v42, 24, v42
	v_xor_b32_e32 v31, 24, v31
	v_lshl_add_u32 v31, v31, 2, 0
	s_waitcnt lgkmcnt(1)
	v_mfma_f32_32x32x2f32 v[0:15], v22, v43, v[0:15]
	v_lshl_add_u32 v22, v27, 2, 0
	v_lshl_add_u32 v27, v28, 2, 0
	v_lshl_add_u32 v28, v29, 2, 0
	v_lshl_add_u32 v29, v33, 2, 0
	v_lshl_add_u32 v33, v42, 2, 0
	v_lshl_add_u32 v42, v47, 2, 0
	ds_read_b32 v22, v22
	ds_read_b32 v27, v27
	ds_read_b32 v28, v28
	ds_read_b32 v29, v29
	ds_read_b32 v33, v33
	ds_read_b32 v42, v42
	ds_read_b32 v31, v31
	s_waitcnt lgkmcnt(7)
	v_mfma_f32_32x32x2f32 v[0:15], v32, v25, v[0:15]
	s_waitcnt lgkmcnt(6)
	v_mfma_f32_32x32x2f32 v[0:15], v22, v20, v[0:15]
	v_lshlrev_b32_e32 v22, 5, v44
	v_or3_b32 v22, v35, v22, v30
	v_lshl_add_u32 v22, v22, 2, s0
	s_waitcnt lgkmcnt(5)
	v_mfma_f32_32x32x2f32 v[0:15], v27, v24, v[0:15]
	ds_read2st64_b32 v[24:25], v40 offset0:8 offset1:12
	v_add_u32_e32 v27, 0x400, v19
	s_waitcnt lgkmcnt(5)
	v_mfma_f32_32x32x2f32 v[0:15], v28, v36, v[0:15]
	v_add_u32_e32 v28, 0x800, v19
	s_waitcnt lgkmcnt(0)
	v_mfma_f32_32x32x2f32 v[0:15], v21, v24, v[0:15]
	ds_read2_b32 v[20:21], v34 offset0:20 offset1:22
	v_or_b32_e32 v24, 0xb00, v39
	v_add_u32_e32 v24, s0, v24
	ds_read_b32 v24, v24
	v_mfma_f32_32x32x2f32 v[0:15], v23, v37, v[0:15]
	v_lshlrev_b32_e32 v23, 5, v45
	v_or3_b32 v23, v35, v23, v30
	v_lshl_add_u32 v23, v23, 2, s0
	s_waitcnt lgkmcnt(1)
	v_mfma_f32_32x32x2f32 v[0:15], v20, v38, v[0:15]
	v_lshlrev_b32_e32 v20, 5, v41
	v_or3_b32 v20, v35, v20, v30
	v_lshl_add_u32 v20, v20, 2, s0
	ds_read_b32 v20, v20
	ds_read_b32 v22, v22
	ds_read_b32 v23, v23
	s_load_dwordx2 s[2:3], s[4:5], 0x30
	s_load_dword s4, s[4:5], 0x38
	v_lshl_add_u32 v30, v17, 2, 0
	s_waitcnt lgkmcnt(0)
	s_barrier
	v_mov_b32_e32 v32, s3
	v_mul_lo_u32 v16, v16, s4
	v_ashrrev_i32_e32 v17, 31, v16
	s_waitcnt lgkmcnt(0)
	s_mov_b32 s0, 0x3fb8aa3b
	v_mfma_f32_32x32x2f32 v[0:15], v21, v24, v[0:15]
	v_mov_b32_e32 v24, 0x1f800000
	v_mfma_f32_32x32x2f32 v[0:15], v29, v25, v[0:15]
	v_add_u32_e32 v29, 0xc00, v19
	v_mov_b32_e32 v25, 0x42800000
	v_mfma_f32_32x32x2f32 v[0:15], v33, v20, v[0:15]
	v_lshl_add_u32 v20, s4, 4, v16
	v_lshlrev_b64 v[16:17], 2, v[16:17]
	v_ashrrev_i32_e32 v21, 31, v20
	v_mfma_f32_32x32x2f32 v[0:15], v42, v22, v[0:15]
	v_add_co_u32_e32 v22, vcc, s2, v16
	v_addc_co_u32_e32 v33, vcc, v32, v17, vcc
	v_lshlrev_b64 v[16:17], 2, v[20:21]
	v_add_co_u32_e32 v20, vcc, s2, v16
	v_addc_co_u32_e32 v21, vcc, v32, v17, vcc
	v_add_co_u32_e32 v16, vcc, v22, v18
	v_addc_co_u32_e32 v17, vcc, 0, v33, vcc
	v_mfma_f32_32x32x2f32 v[0:15], v31, v23, v[0:15]
	s_nop 7
	s_nop 7
	s_nop 2
	ds_write2_b32 v19, v0, v1 offset1:36
	ds_write2_b32 v19, v2, v3 offset0:72 offset1:108
	ds_write2_b32 v27, v4, v5 offset0:32 offset1:68
	ds_write2_b32 v27, v6, v7 offset0:104 offset1:140
	ds_write2_b32 v28, v8, v9 offset0:64 offset1:100
	ds_write2_b32 v28, v10, v11 offset0:136 offset1:172
	ds_write2_b32 v29, v12, v13 offset0:96 offset1:132
	ds_write2_b32 v29, v14, v15 offset0:168 offset1:204
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_waitcnt lgkmcnt(0)
	ds_read_b128 v[2:5], v30
	ds_read_b128 v[6:9], v30 offset:2304
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_waitcnt lgkmcnt(0)
	v_cmp_gt_f32_e32 vcc, v2, v3
	v_cndmask_b32_e32 v0, v3, v2, vcc
	v_cmp_gt_f32_e32 vcc, v6, v7
	v_cndmask_b32_e32 v1, v7, v6, vcc
	v_cmp_gt_f32_e32 vcc, v0, v4
	v_cndmask_b32_e32 v0, v4, v0, vcc
	v_cmp_gt_f32_e32 vcc, v1, v8
	v_cndmask_b32_e32 v1, v8, v1, vcc
	v_cmp_gt_f32_e32 vcc, v0, v5
	v_cndmask_b32_e32 v0, v5, v0, vcc
	v_cmp_gt_f32_e32 vcc, v1, v9
	v_cndmask_b32_e32 v1, v9, v1, vcc
	;;#ASMSTART
	ds_swizzle_b32 v10, v0, offset:4127
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	v_cmp_gt_f32_e32 vcc, v0, v10
	;;#ASMSTART
	ds_swizzle_b32 v11, v1, offset:4127
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	v_cndmask_b32_e32 v0, v10, v0, vcc
	v_cmp_gt_f32_e32 vcc, v1, v11
	v_cndmask_b32_e32 v1, v11, v1, vcc
	;;#ASMSTART
	ds_swizzle_b32 v10, v0, offset:2079
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	v_cmp_gt_f32_e32 vcc, v0, v10
	;;#ASMSTART
	ds_swizzle_b32 v11, v1, offset:2079
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	v_cndmask_b32_e32 v0, v10, v0, vcc
	v_cmp_gt_f32_e32 vcc, v1, v11
	v_cndmask_b32_e32 v1, v11, v1, vcc
	;;#ASMSTART
	ds_swizzle_b32 v10, v0, offset:1055
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	v_cmp_gt_f32_e32 vcc, v0, v10
	;;#ASMSTART
	ds_swizzle_b32 v11, v1, offset:1055
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	v_cndmask_b32_e32 v0, v10, v0, vcc
	v_cmp_gt_f32_e32 vcc, v1, v11
	v_cndmask_b32_e32 v1, v11, v1, vcc
	ds_write2_b32 v26, v0, v1 offset1:16
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_waitcnt lgkmcnt(0)
	ds_read2_b32 v[10:11], v26 offset1:16
	v_add_co_u32_e32 v0, vcc, v20, v18
	v_addc_co_u32_e32 v1, vcc, 0, v21, vcc
	s_waitcnt lgkmcnt(0)
	v_sub_f32_e32 v7, v7, v11
	v_sub_f32_e32 v6, v6, v11
	v_sub_f32_e32 v3, v3, v10
	v_sub_f32_e32 v2, v2, v10
	v_sub_f32_e32 v9, v9, v11
	v_sub_f32_e32 v8, v8, v11
	v_sub_f32_e32 v5, v5, v10
	v_sub_f32_e32 v4, v4, v10
	v_pk_mul_f32 v[2:3], v[2:3], s[0:1] op_sel_hi:[1,0]
	v_pk_mul_f32 v[6:7], v[6:7], s[0:1] op_sel_hi:[1,0]
	v_pk_mul_f32 v[4:5], v[4:5], s[0:1] op_sel_hi:[1,0]
	v_pk_mul_f32 v[8:9], v[8:9], s[0:1] op_sel_hi:[1,0]
	v_cmp_gt_f32_e64 s[0:1], s12, v3
	v_cmp_gt_f32_e64 s[8:9], s12, v7
	v_cmp_gt_f32_e32 vcc, s12, v2
	v_cmp_gt_f32_e64 s[2:3], s12, v4
	v_cmp_gt_f32_e64 s[4:5], s12, v5
	v_cmp_gt_f32_e64 s[6:7], s12, v6
	v_cmp_gt_f32_e64 s[10:11], s12, v8
	v_cmp_gt_f32_e64 s[12:13], s12, v9
	v_cndmask_b32_e64 v21, 0, v25, s[0:1]
	v_cndmask_b32_e64 v27, 0, v25, s[8:9]
	v_cndmask_b32_e32 v10, 1.0, v24, vcc
	v_cndmask_b32_e64 v11, 1.0, v24, s[0:1]
	v_cndmask_b32_e64 v12, 1.0, v24, s[2:3]
	v_cndmask_b32_e64 v13, 1.0, v24, s[4:5]
	v_cndmask_b32_e64 v14, 1.0, v24, s[6:7]
	v_cndmask_b32_e64 v15, 1.0, v24, s[8:9]
	v_cndmask_b32_e64 v18, 1.0, v24, s[10:11]
	v_cndmask_b32_e64 v19, 1.0, v24, s[12:13]
	v_cndmask_b32_e32 v20, 0, v25, vcc
	v_cndmask_b32_e64 v24, 0, v25, s[6:7]
	v_add_f32_e32 v3, v3, v21
	v_add_f32_e32 v7, v7, v27
	v_cndmask_b32_e64 v22, 0, v25, s[2:3]
	v_cndmask_b32_e64 v28, 0, v25, s[10:11]
	v_add_f32_e32 v2, v2, v20
	v_add_f32_e32 v6, v6, v24
	v_exp_f32_e32 v3, v3
	v_exp_f32_e32 v7, v7
	v_cndmask_b32_e64 v23, 0, v25, s[4:5]
	v_cndmask_b32_e64 v25, 0, v25, s[12:13]
	v_add_f32_e32 v4, v4, v22
	v_add_f32_e32 v8, v8, v28
	v_exp_f32_e32 v2, v2
	v_exp_f32_e32 v6, v6
	v_add_f32_e32 v5, v5, v23
	v_add_f32_e32 v9, v9, v25
	v_exp_f32_e32 v4, v4
	v_exp_f32_e32 v20, v8
	v_exp_f32_e32 v5, v5
	v_exp_f32_e32 v21, v9
	v_mul_f32_e32 v3, v11, v3
	v_mul_f32_e32 v7, v15, v7
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_waitcnt lgkmcnt(0)
	v_mul_f32_e32 v22, v10, v2
	v_fma_f32 v2, v10, v2, v3
	v_fma_f32 v8, v14, v6, v7
	v_fmac_f32_e32 v2, v12, v4
	v_fmac_f32_e32 v8, v18, v20
	v_mul_f32_e32 v11, v12, v4
	v_fmac_f32_e32 v2, v13, v5
	v_fmac_f32_e32 v8, v19, v21
	;;#ASMSTART
	ds_swizzle_b32 v4, v2, offset:4127
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	v_mul_f32_e32 v23, v13, v5
	;;#ASMSTART
	ds_swizzle_b32 v5, v8, offset:4127
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	v_add_f32_e32 v2, v4, v2
	v_add_f32_e32 v4, v5, v8
	;;#ASMSTART
	ds_swizzle_b32 v5, v2, offset:2079
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	;;#ASMSTART
	ds_swizzle_b32 v8, v4, offset:2079
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	v_add_f32_e32 v2, v5, v2
	v_add_f32_e32 v4, v8, v4
	;;#ASMSTART
	ds_swizzle_b32 v5, v2, offset:1055
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	;;#ASMSTART
	ds_swizzle_b32 v8, v4, offset:1055
	s_waitcnt lgkmcnt(0) 
	;;#ASMEND
	v_add_f32_e32 v2, v5, v2
	v_add_f32_e32 v4, v8, v4
	ds_write2_b32 v26, v2, v4 offset1:16
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_waitcnt lgkmcnt(0)
	ds_read2_b32 v[8:9], v26 offset1:16
	v_mul_f32_e32 v6, v14, v6
	v_mul_f32_e32 v10, v18, v20
	v_mul_f32_e32 v12, v19, v21
	s_waitcnt lgkmcnt(0)
	v_div_scale_f32 v2, s[0:1], v8, v8, v22
	v_rcp_f32_e32 v4, v2
	v_div_scale_f32 v5, vcc, v22, v8, v22
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 3
	v_fma_f32 v13, -v2, v4, 1.0
	v_fmac_f32_e32 v4, v13, v4
	v_mul_f32_e32 v13, v5, v4
	v_fma_f32 v14, -v2, v13, v5
	v_fmac_f32_e32 v13, v14, v4
	v_fma_f32 v2, -v2, v13, v5
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 0
	v_div_fmas_f32 v2, v2, v4, v13
	v_div_scale_f32 v4, s[0:1], v8, v8, v3
	v_rcp_f32_e32 v5, v4
	v_div_fixup_f32 v2, v2, v8, v22
	v_div_scale_f32 v13, vcc, v3, v8, v3
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 3
	v_fma_f32 v14, -v4, v5, 1.0
	v_fmac_f32_e32 v5, v14, v5
	v_mul_f32_e32 v14, v13, v5
	v_fma_f32 v15, -v4, v14, v13
	v_fmac_f32_e32 v14, v15, v5
	v_fma_f32 v4, -v4, v14, v13
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 0
	v_div_fmas_f32 v4, v4, v5, v14
	v_div_fixup_f32 v3, v4, v8, v3
	v_div_scale_f32 v4, s[0:1], v8, v8, v11
	v_rcp_f32_e32 v5, v4
	v_div_scale_f32 v13, vcc, v11, v8, v11
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 3
	v_fma_f32 v14, -v4, v5, 1.0
	v_fmac_f32_e32 v5, v14, v5
	v_mul_f32_e32 v14, v13, v5
	v_fma_f32 v15, -v4, v14, v13
	v_fmac_f32_e32 v14, v15, v5
	v_fma_f32 v4, -v4, v14, v13
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 0
	v_div_fmas_f32 v4, v4, v5, v14
	v_div_scale_f32 v5, s[0:1], v8, v8, v23
	v_div_fixup_f32 v4, v4, v8, v11
	v_rcp_f32_e32 v11, v5
	v_div_scale_f32 v13, vcc, v23, v8, v23
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 3
	v_fma_f32 v14, -v5, v11, 1.0
	v_fmac_f32_e32 v11, v14, v11
	v_mul_f32_e32 v14, v13, v11
	v_fma_f32 v15, -v5, v14, v13
	v_fmac_f32_e32 v14, v15, v11
	v_fma_f32 v5, -v5, v14, v13
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 0
	v_div_fmas_f32 v5, v5, v11, v14
	v_div_fixup_f32 v5, v5, v8, v23
	v_div_scale_f32 v8, s[0:1], v9, v9, v6
	v_rcp_f32_e32 v11, v8
	v_div_scale_f32 v13, vcc, v6, v9, v6
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 3
	v_fma_f32 v14, -v8, v11, 1.0
	v_fmac_f32_e32 v11, v14, v11
	v_mul_f32_e32 v14, v13, v11
	v_fma_f32 v15, -v8, v14, v13
	v_fmac_f32_e32 v14, v15, v11
	v_fma_f32 v8, -v8, v14, v13
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 0
	v_div_fmas_f32 v8, v8, v11, v14
	v_div_fixup_f32 v6, v8, v9, v6
	v_div_scale_f32 v8, s[0:1], v9, v9, v7
	v_rcp_f32_e32 v11, v8
	v_div_scale_f32 v13, vcc, v7, v9, v7
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 3
	v_fma_f32 v14, -v8, v11, 1.0
	v_fmac_f32_e32 v11, v14, v11
	v_mul_f32_e32 v14, v13, v11
	v_fma_f32 v15, -v8, v14, v13
	v_fmac_f32_e32 v14, v15, v11
	v_fma_f32 v8, -v8, v14, v13
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 0
	v_div_fmas_f32 v8, v8, v11, v14
	v_div_fixup_f32 v7, v8, v9, v7
	v_div_scale_f32 v8, s[0:1], v9, v9, v10
	v_rcp_f32_e32 v11, v8
	v_div_scale_f32 v13, vcc, v10, v9, v10
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 3
	v_fma_f32 v14, -v8, v11, 1.0
	v_fmac_f32_e32 v11, v14, v11
	v_mul_f32_e32 v14, v13, v11
	v_fma_f32 v15, -v8, v14, v13
	v_fmac_f32_e32 v14, v15, v11
	v_fma_f32 v8, -v8, v14, v13
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 0
	v_div_fmas_f32 v8, v8, v11, v14
	v_div_fixup_f32 v8, v8, v9, v10
	v_div_scale_f32 v10, s[0:1], v9, v9, v12
	v_rcp_f32_e32 v11, v10
	v_div_scale_f32 v13, vcc, v12, v9, v12
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 3
	v_fma_f32 v14, -v10, v11, 1.0
	v_fmac_f32_e32 v11, v14, v11
	v_mul_f32_e32 v14, v13, v11
	v_fma_f32 v15, -v10, v14, v13
	v_fmac_f32_e32 v14, v15, v11
	v_fma_f32 v10, -v10, v14, v13
	s_setreg_imm32_b32 hwreg(HW_REG_MODE, 4, 2), 0
	v_div_fmas_f32 v10, v10, v11, v14
	v_div_fixup_f32 v9, v10, v9, v12
	global_store_dwordx4 v[16:17], v[2:5], off
	global_store_dwordx4 v[0:1], v[6:9], off
	s_endpgm
	.section	.rodata,#alloc
	.p2align	6, 0x0
	.amdhsa_kernel kernel_0d1d2c3d4d5c6d7d8c9d10d11c
		.amdhsa_group_segment_fixed_size 0
		.amdhsa_private_segment_fixed_size 0
		.amdhsa_kernarg_size 60
		.amdhsa_user_sgpr_count 6
		.amdhsa_user_sgpr_private_segment_buffer 1
		.amdhsa_user_sgpr_dispatch_ptr 0
		.amdhsa_user_sgpr_queue_ptr 0
		.amdhsa_user_sgpr_kernarg_segment_ptr 1
		.amdhsa_user_sgpr_dispatch_id 0
		.amdhsa_user_sgpr_flat_scratch_init 0
		.amdhsa_user_sgpr_private_segment_size 0
		.amdhsa_system_sgpr_private_segment_wavefront_offset 0
		.amdhsa_system_sgpr_workgroup_id_x 1
		.amdhsa_system_sgpr_workgroup_id_y 0
		.amdhsa_system_sgpr_workgroup_id_z 0
		.amdhsa_system_sgpr_workgroup_info 0
		.amdhsa_system_vgpr_workitem_id 0
		.amdhsa_next_free_vgpr 49
		.amdhsa_next_free_sgpr 14
		.amdhsa_accum_offset 52
		.amdhsa_reserve_flat_scratch 0
		.amdhsa_reserve_xnack_mask 0
		.amdhsa_float_round_mode_32 0
		.amdhsa_float_round_mode_16_64 0
		.amdhsa_float_denorm_mode_32 0
		.amdhsa_float_denorm_mode_16_64 3
		.amdhsa_dx10_clamp 1
		.amdhsa_ieee_mode 1
		.amdhsa_fp16_overflow 0
		.amdhsa_tg_split 0
		.amdhsa_exception_fp_ieee_invalid_op 0
		.amdhsa_exception_fp_denorm_src 0
		.amdhsa_exception_fp_ieee_div_zero 0
		.amdhsa_exception_fp_ieee_overflow 0
		.amdhsa_exception_fp_ieee_underflow 0
		.amdhsa_exception_fp_ieee_inexact 0
		.amdhsa_exception_int_div_zero 0
	.end_amdhsa_kernel
	.text
.Lfunc_end0:
	.size	kernel_0d1d2c3d4d5c6d7d8c9d10d11c, .Lfunc_end0-kernel_0d1d2c3d4d5c6d7d8c9d10d11c

	.p2alignl 6, 3212836864
	.fill 256, 4, 3212836864
	.ident	"clang version 3.8.0 (tags/RELEASE_380/final)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.section	".note.GNU-stack"
	.amdgpu_metadata
---
amdhsa.kernels:
  - .agpr_count:     0
    .args:
      - .address_space:  global
        .offset:         0
        .size:           8
        .value_kind:     global_buffer
      - .offset:         8
        .size:           4
        .value_kind:     by_value
      - .address_space:  global
        .offset:         16
        .size:           8
        .value_kind:     global_buffer
      - .offset:         24
        .size:           4
        .value_kind:     by_value
      - .address_space:  global
        .offset:         32
        .size:           8
        .value_kind:     global_buffer
      - .offset:         40
        .size:           4
        .value_kind:     by_value
      - .address_space:  global
        .offset:         48
        .size:           8
        .value_kind:     global_buffer
      - .offset:         56
        .size:           4
        .value_kind:     by_value
    .group_segment_fixed_size: 0
    .kernarg_segment_align: 8
    .kernarg_segment_size: 60
    .language:       OpenCL C
    .language_version:
      - 2
      - 0
    .max_flat_workgroup_size: 1024
    .name:           kernel_0d1d2c3d4d5c6d7d8c9d10d11c
    .private_segment_fixed_size: 0
    .sgpr_count:     16
    .sgpr_spill_count: 0
    .symbol:         kernel_0d1d2c3d4d5c6d7d8c9d10d11c.kd
    .vgpr_count:     49
    .vgpr_spill_count: 0
    .wavefront_size: 64
amdhsa.target:   'amdgcn-amd-amdhsa--gfx90a:sramecc+:xnack-'
amdhsa.version:
  - 1
  - 1
...

	.end_amdgpu_metadata

PASSED [100%]

============================== 1 passed in 4.06s ===============================
