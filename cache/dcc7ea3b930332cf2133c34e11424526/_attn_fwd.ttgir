#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [4, 16], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#mfma = #triton_gpu.mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared2 = #triton_gpu.shared<{vec = 4, perPhase = 2, maxPhase = 8, order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg12: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg14: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg15: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg16: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg17: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg18: i32, %arg19: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg20: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %cst_0 = arith.constant dense<0xFF800000> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mfma>
    %c128_i64 = arith.constant 128 : i64
    %c0_i64 = arith.constant 0 : i64
    %c128_i32 = arith.constant 128 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_2 = arith.constant 1.44269502 : f32
    %0 = arith.mulf %arg3, %cst_2 : f32
    %1 = tt.splat %0 : (f32) -> tensor<128x128xf32, #blocked>
    %2 = triton_gpu.view_slice %1[0, 96] [128, 32] [1, 1] : tensor<128x128xf32, #blocked> to tensor<128x32xf32, #blocked>
    %3 = triton_gpu.view_slice %1[0, 64] [128, 32] [1, 1] : tensor<128x128xf32, #blocked> to tensor<128x32xf32, #blocked>
    %4 = triton_gpu.view_slice %1[0, 32] [128, 32] [1, 1] : tensor<128x128xf32, #blocked> to tensor<128x32xf32, #blocked>
    %5 = triton_gpu.view_slice %1[0, 0] [128, 32] [1, 1] : tensor<128x128xf32, #blocked> to tensor<128x32xf32, #blocked>
    %6 = tt.get_program_id x : i32
    %7 = arith.muli %6, %c128_i32 : i32
    %8 = arith.extsi %7 : i32 to i64
    %9 = tt.splat %8 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %10 = tt.get_program_id y : i32
    %11 = arith.muli %10, %arg7 : i32
    %12 = tt.addptr %arg0, %11 : !tt.ptr<f16, 1>, i32
    %13 = tt.splat %12 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #blocked>
    %14 = arith.extsi %arg8 : i32 to i64
    %15 = tt.splat %14 : (i64) -> tensor<128x1xi64, #blocked>
    %16 = tt.addptr %arg1, %11 : !tt.ptr<f16, 1>, i32
    %17 = arith.extsi %arg11 : i32 to i64
    %18 = tt.addptr %arg2, %11 : !tt.ptr<f16, 1>, i32
    %19 = arith.extsi %arg14 : i32 to i64
    %20 = tt.splat %8 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %21 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %22 = arith.extsi %21 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %23 = arith.addi %9, %22 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %24 = tt.expand_dims %23 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<128x1xi64, #blocked>
    %25 = arith.muli %24, %15 : tensor<128x1xi64, #blocked>
    %26 = tt.addptr %13, %25 : tensor<128x1x!tt.ptr<f16, 1>, #blocked>, tensor<128x1xi64, #blocked>
    %27 = tt.broadcast %26 : (tensor<128x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<128x128x!tt.ptr<f16, 1>, #blocked>
    %28 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %29 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %30 = arith.extsi %29 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %31 = tt.expand_dims %30 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x128xi64, #blocked>
    %32 = tt.broadcast %31 : (tensor<1x128xi64, #blocked>) -> tensor<128x128xi64, #blocked>
    %33 = tt.addptr %27, %32 : tensor<128x128x!tt.ptr<f16, 1>, #blocked>, tensor<128x128xi64, #blocked>
    %34 = triton_gpu.view_slice %33[0, 96] [128, 32] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked> to tensor<128x32x!tt.ptr<f16, 1>, #blocked>
    %35 = triton_gpu.view_slice %33[0, 64] [128, 32] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked> to tensor<128x32x!tt.ptr<f16, 1>, #blocked>
    %36 = triton_gpu.view_slice %33[0, 32] [128, 32] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked> to tensor<128x32x!tt.ptr<f16, 1>, #blocked>
    %37 = triton_gpu.view_slice %33[0, 0] [128, 32] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked> to tensor<128x32x!tt.ptr<f16, 1>, #blocked>
    %38 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>>
    %39 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %40 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %41 = arith.extsi %28 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %42 = arith.extsi %38 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #mfma}>>
    %43 = arith.extsi %39 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %44 = arith.extsi %40 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %45 = arith.addi %20, %41 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %46 = tt.expand_dims %45 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xi64, #mfma>
    %47 = tt.expand_dims %42 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #mfma}>>) -> tensor<1x128xi64, #mfma>
    %48 = tt.expand_dims %43 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x128xi64, #blocked1>
    %49 = tt.broadcast %47 : (tensor<1x128xi64, #mfma>) -> tensor<128x128xi64, #mfma>
    %50 = tt.expand_dims %44 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi64, #blocked1>
    %51 = tt.splat %16 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #blocked1>
    %52 = tt.addptr %51, %50 : tensor<128x1x!tt.ptr<f16, 1>, #blocked1>, tensor<128x1xi64, #blocked1>
    %53 = tt.broadcast %52 : (tensor<128x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<128x128x!tt.ptr<f16, 1>, #blocked1>
    %54 = tt.splat %17 : (i64) -> tensor<1x128xi64, #blocked1>
    %55 = arith.muli %48, %54 : tensor<1x128xi64, #blocked1>
    %56 = tt.broadcast %55 : (tensor<1x128xi64, #blocked1>) -> tensor<128x128xi64, #blocked1>
    %57 = tt.addptr %53, %56 : tensor<128x128x!tt.ptr<f16, 1>, #blocked1>, tensor<128x128xi64, #blocked1>
    %58 = triton_gpu.view_slice %57[0, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
    %59 = tt.load %58 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
    %60 = tt.load %37 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf16, #blocked>
    %61 = arith.extf %60 : tensor<128x32xf16, #blocked> to tensor<128x32xf32, #blocked>
    %62 = arith.mulf %61, %5 : tensor<128x32xf32, #blocked>
    %63 = arith.truncf %62 : tensor<128x32xf32, #blocked> to tensor<128x32xf16, #blocked>
    %64 = triton_gpu.view_slice %57[32, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
    %65 = tt.load %64 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
    %66 = tt.load %36 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf16, #blocked>
    %67 = arith.extf %66 : tensor<128x32xf16, #blocked> to tensor<128x32xf32, #blocked>
    %68 = arith.mulf %67, %4 : tensor<128x32xf32, #blocked>
    %69 = arith.truncf %68 : tensor<128x32xf32, #blocked> to tensor<128x32xf16, #blocked>
    %70 = triton_gpu.convert_layout %59 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared>
    %71 = triton_gpu.convert_layout %63 : (tensor<128x32xf16, #blocked>) -> tensor<128x32xf16, #shared1>
    %72 = triton_gpu.convert_layout %70 : (tensor<32x128xf16, #shared>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>>
    %73 = triton_gpu.convert_layout %71 : (tensor<128x32xf16, #shared1>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>>
    %74 = tt.dot %73, %72, %cst_1 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>> -> tensor<128x128xf32, #mfma>
    %75 = triton_gpu.convert_layout %65 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared>
    %76 = triton_gpu.convert_layout %69 : (tensor<128x32xf16, #blocked>) -> tensor<128x32xf16, #shared1>
    %77 = triton_gpu.view_slice %57[64, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
    %78 = tt.load %77 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
    %79 = tt.load %35 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf16, #blocked>
    %80 = arith.extf %79 : tensor<128x32xf16, #blocked> to tensor<128x32xf32, #blocked>
    %81 = arith.mulf %80, %3 : tensor<128x32xf32, #blocked>
    %82 = arith.truncf %81 : tensor<128x32xf32, #blocked> to tensor<128x32xf16, #blocked>
    %83 = triton_gpu.convert_layout %75 : (tensor<32x128xf16, #shared>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>>
    %84 = triton_gpu.convert_layout %76 : (tensor<128x32xf16, #shared1>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>>
    %85 = tt.dot %84, %83, %74 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>> -> tensor<128x128xf32, #mfma>
    %86 = triton_gpu.convert_layout %78 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared>
    %87 = triton_gpu.convert_layout %82 : (tensor<128x32xf16, #blocked>) -> tensor<128x32xf16, #shared1>
    %88 = triton_gpu.view_slice %57[96, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
    %89 = tt.load %88 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
    %90 = tt.load %34 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf16, #blocked>
    %91 = arith.extf %90 : tensor<128x32xf16, #blocked> to tensor<128x32xf32, #blocked>
    %92 = arith.mulf %91, %2 : tensor<128x32xf32, #blocked>
    %93 = arith.truncf %92 : tensor<128x32xf32, #blocked> to tensor<128x32xf16, #blocked>
    %94 = triton_gpu.convert_layout %86 : (tensor<32x128xf16, #shared>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>>
    %95 = triton_gpu.convert_layout %87 : (tensor<128x32xf16, #shared1>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>>
    %96 = tt.dot %95, %94, %85 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>> -> tensor<128x128xf32, #mfma>
    %97 = triton_gpu.convert_layout %89 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared>
    %98 = triton_gpu.convert_layout %93 : (tensor<128x32xf16, #blocked>) -> tensor<128x32xf16, #shared1>
    %99 = triton_gpu.convert_layout %97 : (tensor<32x128xf16, #shared>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>>
    %100 = triton_gpu.convert_layout %98 : (tensor<128x32xf16, #shared1>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>>
    %101 = tt.dot %100, %99, %96 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>> -> tensor<128x128xf32, #mfma>
    %102 = tt.splat %18 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #blocked1>
    %103 = tt.splat %19 : (i64) -> tensor<1x128xi64, #blocked1>
    %104 = arith.muli %48, %103 : tensor<1x128xi64, #blocked1>
    %105 = tt.broadcast %104 : (tensor<1x128xi64, #blocked1>) -> tensor<128x128xi64, #blocked1>
    %106:6 = scf.for %arg21 = %c0_i32 to %arg20 step %c128_i32 iter_args(%arg22 = %101, %arg23 = %cst_1, %arg24 = %cst, %arg25 = %cst_0, %arg26 = %c0_i64, %arg27 = %c0_i64) -> (tensor<128x128xf32, #mfma>, tensor<128x128xf32, #mfma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, i64, i64)  : i32 {
      %119 = arith.cmpi ne, %arg21, %c0_i32 : i32
      %120 = scf.if %119 -> (tensor<128x128xf32, #mfma>) {
        %172 = tt.splat %arg27 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
        %173 = arith.addi %172, %43 : tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
        %174 = tt.expand_dims %173 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x128xi64, #blocked1>
        %175 = arith.muli %174, %54 : tensor<1x128xi64, #blocked1>
        %176 = tt.broadcast %175 : (tensor<1x128xi64, #blocked1>) -> tensor<128x128xi64, #blocked1>
        %177 = tt.addptr %53, %176 : tensor<128x128x!tt.ptr<f16, 1>, #blocked1>, tensor<128x128xi64, #blocked1>
        %178 = triton_gpu.view_slice %177[0, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
        %179 = tt.load %178 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
        %180 = triton_gpu.view_slice %177[32, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
        %181 = tt.load %180 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
        %182 = triton_gpu.convert_layout %179 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared>
        %183 = triton_gpu.convert_layout %182 : (tensor<32x128xf16, #shared>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>>
        %184 = tt.dot %73, %183, %cst_1 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>> -> tensor<128x128xf32, #mfma>
        %185 = triton_gpu.convert_layout %181 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared>
        %186 = triton_gpu.view_slice %177[64, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
        %187 = tt.load %186 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
        %188 = triton_gpu.convert_layout %185 : (tensor<32x128xf16, #shared>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>>
        %189 = tt.dot %84, %188, %184 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>> -> tensor<128x128xf32, #mfma>
        %190 = triton_gpu.convert_layout %187 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared>
        %191 = triton_gpu.view_slice %177[96, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
        %192 = tt.load %191 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
        %193 = triton_gpu.convert_layout %190 : (tensor<32x128xf16, #shared>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>>
        %194 = tt.dot %95, %193, %189 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>> -> tensor<128x128xf32, #mfma>
        %195 = triton_gpu.convert_layout %192 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared>
        %196 = triton_gpu.convert_layout %195 : (tensor<32x128xf16, #shared>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>>
        %197 = tt.dot %100, %196, %194 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 8}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 8}>> -> tensor<128x128xf32, #mfma>
        scf.yield %197 : tensor<128x128xf32, #mfma>
      } else {
        scf.yield %arg22 : tensor<128x128xf32, #mfma>
      }
      %121 = tt.splat %arg26 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
      %122 = arith.addi %121, %44 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
      %123 = tt.expand_dims %122 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi64, #blocked1>
      %124 = tt.addptr %102, %123 : tensor<128x1x!tt.ptr<f16, 1>, #blocked1>, tensor<128x1xi64, #blocked1>
      %125 = tt.broadcast %124 : (tensor<128x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<128x128x!tt.ptr<f16, 1>, #blocked1>
      %126 = tt.addptr %125, %105 : tensor<128x128x!tt.ptr<f16, 1>, #blocked1>, tensor<128x128xi64, #blocked1>
      %127 = "tt.reduce"(%120) <{axis = 1 : i32}> ({
      ^bb0(%arg28: f32, %arg29: f32):
        %172 = arith.maximumf %arg28, %arg29 : f32
        tt.reduce.return %172 : f32
      }) : (tensor<128x128xf32, #mfma>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %128 = arith.maximumf %arg25, %127 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %129 = tt.expand_dims %128 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xf32, #mfma>
      %130 = tt.broadcast %129 : (tensor<128x1xf32, #mfma>) -> tensor<128x128xf32, #mfma>
      %131 = arith.subf %120, %130 : tensor<128x128xf32, #mfma>
      %132 = tt.extern_elementwise %131 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<128x128xf32, #mfma>) -> tensor<128x128xf32, #mfma>
      %133 = arith.subf %arg25, %128 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %134 = tt.extern_elementwise %133 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %135 = tt.expand_dims %134 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xf32, #mfma>
      %136 = tt.broadcast %135 : (tensor<128x1xf32, #mfma>) -> tensor<128x128xf32, #mfma>
      %137 = arith.mulf %arg23, %136 : tensor<128x128xf32, #mfma>
      %138 = arith.truncf %132 : tensor<128x128xf32, #mfma> to tensor<128x128xf16, #mfma>
      %139 = triton_gpu.view_slice %138[0, 0] [128, 32] [1, 1] : tensor<128x128xf16, #mfma> to tensor<128x32xf16, #mfma>
      %140 = triton_gpu.convert_layout %139 : (tensor<128x32xf16, #mfma>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
      %141 = triton_gpu.view_slice %126[0, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %142 = tt.load %141 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %143 = triton_gpu.view_slice %126[32, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %144 = tt.load %143 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %145 = triton_gpu.convert_layout %142 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared2>
      %146 = triton_gpu.convert_layout %145 : (tensor<32x128xf16, #shared2>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %147 = tt.dot %140, %146, %137 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %148 = triton_gpu.convert_layout %144 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared2>
      %149 = triton_gpu.view_slice %126[64, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %150 = tt.load %149 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %151 = triton_gpu.convert_layout %148 : (tensor<32x128xf16, #shared2>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %152 = triton_gpu.view_slice %138[0, 32] [128, 32] [1, 1] : tensor<128x128xf16, #mfma> to tensor<128x32xf16, #mfma>
      %153 = triton_gpu.convert_layout %152 : (tensor<128x32xf16, #mfma>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
      %154 = tt.dot %153, %151, %147 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %155 = triton_gpu.convert_layout %150 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared2>
      %156 = triton_gpu.view_slice %126[96, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %157 = tt.load %156 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %158 = triton_gpu.convert_layout %155 : (tensor<32x128xf16, #shared2>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %159 = triton_gpu.view_slice %138[0, 64] [128, 32] [1, 1] : tensor<128x128xf16, #mfma> to tensor<128x32xf16, #mfma>
      %160 = triton_gpu.convert_layout %159 : (tensor<128x32xf16, #mfma>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
      %161 = tt.dot %160, %158, %154 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %162 = triton_gpu.convert_layout %157 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared2>
      %163 = triton_gpu.convert_layout %162 : (tensor<32x128xf16, #shared2>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %164 = triton_gpu.view_slice %138[0, 96] [128, 32] [1, 1] : tensor<128x128xf16, #mfma> to tensor<128x32xf16, #mfma>
      %165 = triton_gpu.convert_layout %164 : (tensor<128x32xf16, #mfma>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
      %166 = tt.dot %165, %163, %161 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %167 = "tt.reduce"(%132) <{axis = 1 : i32}> ({
      ^bb0(%arg28: f32, %arg29: f32):
        %172 = arith.addf %arg28, %arg29 : f32
        tt.reduce.return %172 : f32
      }) : (tensor<128x128xf32, #mfma>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %168 = arith.mulf %arg24, %134 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %169 = arith.addf %168, %167 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %170 = arith.addi %arg26, %c128_i64 : i64
      %171 = arith.addi %arg27, %c128_i64 : i64
      scf.yield %131, %166, %169, %128, %170, %171 : tensor<128x128xf32, #mfma>, tensor<128x128xf32, #mfma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, i64, i64
    }
    %107 = tt.expand_dims %106#2 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xf32, #mfma>
    %108 = tt.broadcast %107 : (tensor<128x1xf32, #mfma>) -> tensor<128x128xf32, #mfma>
    %109 = arith.divf %106#1, %108 : tensor<128x128xf32, #mfma>
    %110 = tt.addptr %arg5, %11 : !tt.ptr<f16, 1>, i32
    %111 = arith.extsi %arg17 : i32 to i64
    %112 = arith.truncf %109 : tensor<128x128xf32, #mfma> to tensor<128x128xf16, #mfma>
    %113 = tt.splat %111 : (i64) -> tensor<128x1xi64, #mfma>
    %114 = arith.muli %46, %113 : tensor<128x1xi64, #mfma>
    %115 = tt.splat %110 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #mfma>
    %116 = tt.addptr %115, %114 : tensor<128x1x!tt.ptr<f16, 1>, #mfma>, tensor<128x1xi64, #mfma>
    %117 = tt.broadcast %116 : (tensor<128x1x!tt.ptr<f16, 1>, #mfma>) -> tensor<128x128x!tt.ptr<f16, 1>, #mfma>
    %118 = tt.addptr %117, %49 : tensor<128x128x!tt.ptr<f16, 1>, #mfma>, tensor<128x128xi64, #mfma>
    tt.store %118, %112 {cache = 1 : i32, evict = 1 : i32} : tensor<128x128xf16, #mfma>
    tt.return
  }
}
