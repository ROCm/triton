; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

; Function Attrs: nofree nounwind
define amdgpu_kernel void @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de(ptr addrspace(1) inreg readonly %0, ptr addrspace(1) inreg readonly %1, ptr addrspace(1) inreg readonly %2, float inreg %3, ptr addrspace(1) inreg nocapture readnone %4, ptr addrspace(1) inreg nocapture writeonly %5, i32 inreg %6, i32 inreg %7, i32 inreg %8, i32 inreg %9, i32 inreg %10, i32 inreg %11, i32 inreg %12, i32 inreg %13, i32 inreg %14, i32 inreg %15, i32 inreg %16, i32 inreg %17, i32 inreg %18, i32 inreg %19, i32 inreg %20) local_unnamed_addr #0 !dbg !11 {
  %22 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %23 = and i32 %22, 63
  %24 = lshr i32 %22, 6
  %25 = and i32 %24, 3
  %26 = lshr i32 %23, 2
  %27 = shl nuw nsw i32 %25, 4
  %28 = or i32 %27, %26
  %29 = or i32 %28, 64
  %30 = shl nuw nsw i32 %25, 5
  %31 = and i32 %22, 31
  %32 = or i32 %30, %31
  %33 = shl i32 %22, 3
  %34 = and i32 %33, 24
  %35 = or i32 %34, 1
  %36 = or i32 %34, 2
  %37 = or i32 %34, 3
  %38 = or i32 %34, 4
  %39 = or i32 %34, 5
  %40 = or i32 %34, 6
  %41 = or i32 %34, 7
  %42 = or i32 %34, 32
  %43 = or i32 %34, 33
  %44 = or i32 %34, 34
  %45 = or i32 %34, 35
  %46 = or i32 %34, 36
  %47 = or i32 %34, 37
  %48 = or i32 %34, 38
  %49 = or i32 %34, 39
  %50 = or i32 %34, 64
  %51 = or i32 %34, 65
  %52 = or i32 %34, 66
  %53 = or i32 %34, 67
  %54 = or i32 %34, 68
  %55 = or i32 %34, 69
  %56 = or i32 %34, 70
  %57 = or i32 %34, 71
  %58 = or i32 %34, 96
  %59 = or i32 %34, 97
  %60 = or i32 %34, 98
  %61 = or i32 %34, 99
  %62 = or i32 %34, 100
  %63 = or i32 %34, 101
  %64 = or i32 %34, 102
  %65 = or i32 %34, 103
  %66 = fmul float %3, 0x3FF7154760000000
  %67 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %68 = shl i32 %67, 7
  %69 = sext i32 %68 to i64
  %70 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %71 = mul i32 %70, %7
  %72 = sext i32 %71 to i64
  %73 = getelementptr half, ptr addrspace(1) %0, i64 %72
  %74 = sext i32 %8 to i64
  %75 = getelementptr half, ptr addrspace(1) %1, i64 %72
  %76 = sext i32 %11 to i64
  %77 = getelementptr half, ptr addrspace(1) %2, i64 %72
  %78 = sext i32 %14 to i64
  %79 = zext i32 %28 to i64
  %80 = zext i32 %29 to i64
  %81 = or i64 %79, %69
  %82 = or i64 %80, %69
  %83 = mul nsw i64 %81, %74
  %84 = mul nsw i64 %82, %74
  %85 = getelementptr half, ptr addrspace(1) %73, i64 %83
  %86 = getelementptr half, ptr addrspace(1) %73, i64 %84
  %87 = zext i32 %34 to i64
  %88 = zext i32 %35 to i64
  %89 = zext i32 %36 to i64
  %90 = zext i32 %37 to i64
  %91 = zext i32 %38 to i64
  %92 = zext i32 %39 to i64
  %93 = zext i32 %40 to i64
  %94 = zext i32 %41 to i64
  %95 = zext i32 %42 to i64
  %96 = zext i32 %43 to i64
  %97 = zext i32 %44 to i64
  %98 = zext i32 %45 to i64
  %99 = zext i32 %46 to i64
  %100 = zext i32 %47 to i64
  %101 = zext i32 %48 to i64
  %102 = zext i32 %49 to i64
  %103 = zext i32 %50 to i64
  %104 = zext i32 %51 to i64
  %105 = zext i32 %52 to i64
  %106 = zext i32 %53 to i64
  %107 = zext i32 %54 to i64
  %108 = zext i32 %55 to i64
  %109 = zext i32 %56 to i64
  %110 = zext i32 %57 to i64
  %111 = zext i32 %58 to i64
  %112 = zext i32 %59 to i64
  %113 = zext i32 %60 to i64
  %114 = zext i32 %61 to i64
  %115 = zext i32 %62 to i64
  %116 = zext i32 %63 to i64
  %117 = zext i32 %64 to i64
  %118 = zext i32 %65 to i64
  %119 = getelementptr half, ptr addrspace(1) %85, i64 %87
  %120 = getelementptr half, ptr addrspace(1) %85, i64 %88
  %121 = getelementptr half, ptr addrspace(1) %85, i64 %89
  %122 = getelementptr half, ptr addrspace(1) %85, i64 %90
  %123 = getelementptr half, ptr addrspace(1) %85, i64 %91
  %124 = getelementptr half, ptr addrspace(1) %85, i64 %92
  %125 = getelementptr half, ptr addrspace(1) %85, i64 %93
  %126 = getelementptr half, ptr addrspace(1) %85, i64 %94
  %127 = getelementptr half, ptr addrspace(1) %85, i64 %95
  %128 = getelementptr half, ptr addrspace(1) %85, i64 %96
  %129 = getelementptr half, ptr addrspace(1) %85, i64 %97
  %130 = getelementptr half, ptr addrspace(1) %85, i64 %98
  %131 = getelementptr half, ptr addrspace(1) %85, i64 %99
  %132 = getelementptr half, ptr addrspace(1) %85, i64 %100
  %133 = getelementptr half, ptr addrspace(1) %85, i64 %101
  %134 = getelementptr half, ptr addrspace(1) %85, i64 %102
  %135 = getelementptr half, ptr addrspace(1) %85, i64 %103
  %136 = getelementptr half, ptr addrspace(1) %85, i64 %104
  %137 = getelementptr half, ptr addrspace(1) %85, i64 %105
  %138 = getelementptr half, ptr addrspace(1) %85, i64 %106
  %139 = getelementptr half, ptr addrspace(1) %85, i64 %107
  %140 = getelementptr half, ptr addrspace(1) %85, i64 %108
  %141 = getelementptr half, ptr addrspace(1) %85, i64 %109
  %142 = getelementptr half, ptr addrspace(1) %85, i64 %110
  %143 = getelementptr half, ptr addrspace(1) %85, i64 %111
  %144 = getelementptr half, ptr addrspace(1) %85, i64 %112
  %145 = getelementptr half, ptr addrspace(1) %85, i64 %113
  %146 = getelementptr half, ptr addrspace(1) %85, i64 %114
  %147 = getelementptr half, ptr addrspace(1) %85, i64 %115
  %148 = getelementptr half, ptr addrspace(1) %85, i64 %116
  %149 = getelementptr half, ptr addrspace(1) %85, i64 %117
  %150 = getelementptr half, ptr addrspace(1) %85, i64 %118
  %151 = getelementptr half, ptr addrspace(1) %86, i64 %87
  %152 = getelementptr half, ptr addrspace(1) %86, i64 %88
  %153 = getelementptr half, ptr addrspace(1) %86, i64 %89
  %154 = getelementptr half, ptr addrspace(1) %86, i64 %90
  %155 = getelementptr half, ptr addrspace(1) %86, i64 %91
  %156 = getelementptr half, ptr addrspace(1) %86, i64 %92
  %157 = getelementptr half, ptr addrspace(1) %86, i64 %93
  %158 = getelementptr half, ptr addrspace(1) %86, i64 %94
  %159 = getelementptr half, ptr addrspace(1) %86, i64 %95
  %160 = getelementptr half, ptr addrspace(1) %86, i64 %96
  %161 = getelementptr half, ptr addrspace(1) %86, i64 %97
  %162 = getelementptr half, ptr addrspace(1) %86, i64 %98
  %163 = getelementptr half, ptr addrspace(1) %86, i64 %99
  %164 = getelementptr half, ptr addrspace(1) %86, i64 %100
  %165 = getelementptr half, ptr addrspace(1) %86, i64 %101
  %166 = getelementptr half, ptr addrspace(1) %86, i64 %102
  %167 = getelementptr half, ptr addrspace(1) %86, i64 %103
  %168 = getelementptr half, ptr addrspace(1) %86, i64 %104
  %169 = getelementptr half, ptr addrspace(1) %86, i64 %105
  %170 = getelementptr half, ptr addrspace(1) %86, i64 %106
  %171 = getelementptr half, ptr addrspace(1) %86, i64 %107
  %172 = getelementptr half, ptr addrspace(1) %86, i64 %108
  %173 = getelementptr half, ptr addrspace(1) %86, i64 %109
  %174 = getelementptr half, ptr addrspace(1) %86, i64 %110
  %175 = getelementptr half, ptr addrspace(1) %86, i64 %111
  %176 = getelementptr half, ptr addrspace(1) %86, i64 %112
  %177 = getelementptr half, ptr addrspace(1) %86, i64 %113
  %178 = getelementptr half, ptr addrspace(1) %86, i64 %114
  %179 = getelementptr half, ptr addrspace(1) %86, i64 %115
  %180 = getelementptr half, ptr addrspace(1) %86, i64 %116
  %181 = getelementptr half, ptr addrspace(1) %86, i64 %117
  %182 = getelementptr half, ptr addrspace(1) %86, i64 %118
  %183 = addrspacecast ptr addrspace(1) %143 to ptr
  %184 = load half, ptr %183, align 2
  %185 = addrspacecast ptr addrspace(1) %144 to ptr
  %186 = load half, ptr %185, align 2
  %187 = addrspacecast ptr addrspace(1) %145 to ptr
  %188 = load half, ptr %187, align 2
  %189 = addrspacecast ptr addrspace(1) %146 to ptr
  %190 = load half, ptr %189, align 2
  %191 = addrspacecast ptr addrspace(1) %147 to ptr
  %192 = load half, ptr %191, align 2
  %193 = addrspacecast ptr addrspace(1) %148 to ptr
  %194 = load half, ptr %193, align 2
  %195 = addrspacecast ptr addrspace(1) %149 to ptr
  %196 = load half, ptr %195, align 2
  %197 = addrspacecast ptr addrspace(1) %150 to ptr
  %198 = load half, ptr %197, align 2
  %199 = addrspacecast ptr addrspace(1) %175 to ptr
  %200 = load half, ptr %199, align 2
  %201 = addrspacecast ptr addrspace(1) %176 to ptr
  %202 = load half, ptr %201, align 2
  %203 = addrspacecast ptr addrspace(1) %177 to ptr
  %204 = load half, ptr %203, align 2
  %205 = addrspacecast ptr addrspace(1) %178 to ptr
  %206 = load half, ptr %205, align 2
  %207 = addrspacecast ptr addrspace(1) %179 to ptr
  %208 = load half, ptr %207, align 2
  %209 = addrspacecast ptr addrspace(1) %180 to ptr
  %210 = load half, ptr %209, align 2
  %211 = addrspacecast ptr addrspace(1) %181 to ptr
  %212 = load half, ptr %211, align 2
  %213 = addrspacecast ptr addrspace(1) %182 to ptr
  %214 = load half, ptr %213, align 2
  %215 = addrspacecast ptr addrspace(1) %135 to ptr
  %216 = load half, ptr %215, align 2
  %217 = addrspacecast ptr addrspace(1) %136 to ptr
  %218 = load half, ptr %217, align 2
  %219 = addrspacecast ptr addrspace(1) %137 to ptr
  %220 = load half, ptr %219, align 2
  %221 = addrspacecast ptr addrspace(1) %138 to ptr
  %222 = load half, ptr %221, align 2
  %223 = addrspacecast ptr addrspace(1) %139 to ptr
  %224 = load half, ptr %223, align 2
  %225 = addrspacecast ptr addrspace(1) %140 to ptr
  %226 = load half, ptr %225, align 2
  %227 = addrspacecast ptr addrspace(1) %141 to ptr
  %228 = load half, ptr %227, align 2
  %229 = addrspacecast ptr addrspace(1) %142 to ptr
  %230 = load half, ptr %229, align 2
  %231 = addrspacecast ptr addrspace(1) %167 to ptr
  %232 = load half, ptr %231, align 2
  %233 = addrspacecast ptr addrspace(1) %168 to ptr
  %234 = load half, ptr %233, align 2
  %235 = addrspacecast ptr addrspace(1) %169 to ptr
  %236 = load half, ptr %235, align 2
  %237 = addrspacecast ptr addrspace(1) %170 to ptr
  %238 = load half, ptr %237, align 2
  %239 = addrspacecast ptr addrspace(1) %171 to ptr
  %240 = load half, ptr %239, align 2
  %241 = addrspacecast ptr addrspace(1) %172 to ptr
  %242 = load half, ptr %241, align 2
  %243 = addrspacecast ptr addrspace(1) %173 to ptr
  %244 = load half, ptr %243, align 2
  %245 = addrspacecast ptr addrspace(1) %174 to ptr
  %246 = load half, ptr %245, align 2
  %247 = addrspacecast ptr addrspace(1) %127 to ptr
  %248 = load half, ptr %247, align 2
  %249 = addrspacecast ptr addrspace(1) %128 to ptr
  %250 = load half, ptr %249, align 2
  %251 = addrspacecast ptr addrspace(1) %129 to ptr
  %252 = load half, ptr %251, align 2
  %253 = addrspacecast ptr addrspace(1) %130 to ptr
  %254 = load half, ptr %253, align 2
  %255 = addrspacecast ptr addrspace(1) %131 to ptr
  %256 = load half, ptr %255, align 2
  %257 = addrspacecast ptr addrspace(1) %132 to ptr
  %258 = load half, ptr %257, align 2
  %259 = addrspacecast ptr addrspace(1) %133 to ptr
  %260 = load half, ptr %259, align 2
  %261 = addrspacecast ptr addrspace(1) %134 to ptr
  %262 = load half, ptr %261, align 2
  %263 = addrspacecast ptr addrspace(1) %159 to ptr
  %264 = load half, ptr %263, align 2
  %265 = addrspacecast ptr addrspace(1) %160 to ptr
  %266 = load half, ptr %265, align 2
  %267 = addrspacecast ptr addrspace(1) %161 to ptr
  %268 = load half, ptr %267, align 2
  %269 = addrspacecast ptr addrspace(1) %162 to ptr
  %270 = load half, ptr %269, align 2
  %271 = addrspacecast ptr addrspace(1) %163 to ptr
  %272 = load half, ptr %271, align 2
  %273 = addrspacecast ptr addrspace(1) %164 to ptr
  %274 = load half, ptr %273, align 2
  %275 = addrspacecast ptr addrspace(1) %165 to ptr
  %276 = load half, ptr %275, align 2
  %277 = addrspacecast ptr addrspace(1) %166 to ptr
  %278 = load half, ptr %277, align 2
  %279 = addrspacecast ptr addrspace(1) %119 to ptr
  %280 = load half, ptr %279, align 2
  %281 = addrspacecast ptr addrspace(1) %120 to ptr
  %282 = load half, ptr %281, align 2
  %283 = addrspacecast ptr addrspace(1) %121 to ptr
  %284 = load half, ptr %283, align 2
  %285 = addrspacecast ptr addrspace(1) %122 to ptr
  %286 = load half, ptr %285, align 2
  %287 = addrspacecast ptr addrspace(1) %123 to ptr
  %288 = load half, ptr %287, align 2
  %289 = addrspacecast ptr addrspace(1) %124 to ptr
  %290 = load half, ptr %289, align 2
  %291 = addrspacecast ptr addrspace(1) %125 to ptr
  %292 = load half, ptr %291, align 2
  %293 = addrspacecast ptr addrspace(1) %126 to ptr
  %294 = load half, ptr %293, align 2
  %295 = addrspacecast ptr addrspace(1) %151 to ptr
  %296 = load half, ptr %295, align 2
  %297 = addrspacecast ptr addrspace(1) %152 to ptr
  %298 = load half, ptr %297, align 2
  %299 = addrspacecast ptr addrspace(1) %153 to ptr
  %300 = load half, ptr %299, align 2
  %301 = addrspacecast ptr addrspace(1) %154 to ptr
  %302 = load half, ptr %301, align 2
  %303 = addrspacecast ptr addrspace(1) %155 to ptr
  %304 = load half, ptr %303, align 2
  %305 = addrspacecast ptr addrspace(1) %156 to ptr
  %306 = load half, ptr %305, align 2
  %307 = addrspacecast ptr addrspace(1) %157 to ptr
  %308 = load half, ptr %307, align 2
  %309 = addrspacecast ptr addrspace(1) %158 to ptr
  %310 = load half, ptr %309, align 2
  %311 = insertelement <8 x half> poison, half %184, i64 0
  %312 = insertelement <8 x half> %311, half %186, i64 1
  %313 = insertelement <8 x half> %312, half %188, i64 2
  %314 = insertelement <8 x half> %313, half %190, i64 3
  %315 = insertelement <8 x half> %314, half %192, i64 4
  %316 = insertelement <8 x half> %315, half %194, i64 5
  %317 = insertelement <8 x half> %316, half %196, i64 6
  %318 = insertelement <8 x half> %317, half %198, i64 7
  %319 = fpext <8 x half> %318 to <8 x float>
  %320 = insertelement <8 x float> poison, float %66, i64 0
  %321 = shufflevector <8 x float> %320, <8 x float> poison, <8 x i32> zeroinitializer
  %322 = fmul <8 x float> %321, %319
  %323 = fptrunc <8 x float> %322 to <8 x half>
  %324 = insertelement <8 x half> poison, half %200, i64 0
  %325 = insertelement <8 x half> %324, half %202, i64 1
  %326 = insertelement <8 x half> %325, half %204, i64 2
  %327 = insertelement <8 x half> %326, half %206, i64 3
  %328 = insertelement <8 x half> %327, half %208, i64 4
  %329 = insertelement <8 x half> %328, half %210, i64 5
  %330 = insertelement <8 x half> %329, half %212, i64 6
  %331 = insertelement <8 x half> %330, half %214, i64 7
  %332 = fpext <8 x half> %331 to <8 x float>
  %333 = fmul <8 x float> %321, %332
  %334 = fptrunc <8 x float> %333 to <8 x half>
  %335 = insertelement <8 x half> poison, half %216, i64 0
  %336 = insertelement <8 x half> %335, half %218, i64 1
  %337 = insertelement <8 x half> %336, half %220, i64 2
  %338 = insertelement <8 x half> %337, half %222, i64 3
  %339 = insertelement <8 x half> %338, half %224, i64 4
  %340 = insertelement <8 x half> %339, half %226, i64 5
  %341 = insertelement <8 x half> %340, half %228, i64 6
  %342 = insertelement <8 x half> %341, half %230, i64 7
  %343 = fpext <8 x half> %342 to <8 x float>
  %344 = fmul <8 x float> %321, %343
  %345 = fptrunc <8 x float> %344 to <8 x half>
  %346 = insertelement <8 x half> poison, half %232, i64 0
  %347 = insertelement <8 x half> %346, half %234, i64 1
  %348 = insertelement <8 x half> %347, half %236, i64 2
  %349 = insertelement <8 x half> %348, half %238, i64 3
  %350 = insertelement <8 x half> %349, half %240, i64 4
  %351 = insertelement <8 x half> %350, half %242, i64 5
  %352 = insertelement <8 x half> %351, half %244, i64 6
  %353 = insertelement <8 x half> %352, half %246, i64 7
  %354 = fpext <8 x half> %353 to <8 x float>
  %355 = fmul <8 x float> %321, %354
  %356 = fptrunc <8 x float> %355 to <8 x half>
  %357 = insertelement <8 x half> poison, half %248, i64 0
  %358 = insertelement <8 x half> %357, half %250, i64 1
  %359 = insertelement <8 x half> %358, half %252, i64 2
  %360 = insertelement <8 x half> %359, half %254, i64 3
  %361 = insertelement <8 x half> %360, half %256, i64 4
  %362 = insertelement <8 x half> %361, half %258, i64 5
  %363 = insertelement <8 x half> %362, half %260, i64 6
  %364 = insertelement <8 x half> %363, half %262, i64 7
  %365 = fpext <8 x half> %364 to <8 x float>
  %366 = fmul <8 x float> %321, %365
  %367 = fptrunc <8 x float> %366 to <8 x half>
  %368 = insertelement <8 x half> poison, half %264, i64 0
  %369 = insertelement <8 x half> %368, half %266, i64 1
  %370 = insertelement <8 x half> %369, half %268, i64 2
  %371 = insertelement <8 x half> %370, half %270, i64 3
  %372 = insertelement <8 x half> %371, half %272, i64 4
  %373 = insertelement <8 x half> %372, half %274, i64 5
  %374 = insertelement <8 x half> %373, half %276, i64 6
  %375 = insertelement <8 x half> %374, half %278, i64 7
  %376 = fpext <8 x half> %375 to <8 x float>
  %377 = fmul <8 x float> %321, %376
  %378 = fptrunc <8 x float> %377 to <8 x half>
  %379 = insertelement <8 x half> poison, half %280, i64 0
  %380 = insertelement <8 x half> %379, half %282, i64 1
  %381 = insertelement <8 x half> %380, half %284, i64 2
  %382 = insertelement <8 x half> %381, half %286, i64 3
  %383 = insertelement <8 x half> %382, half %288, i64 4
  %384 = insertelement <8 x half> %383, half %290, i64 5
  %385 = insertelement <8 x half> %384, half %292, i64 6
  %386 = insertelement <8 x half> %385, half %294, i64 7
  %387 = fpext <8 x half> %386 to <8 x float>
  %388 = fmul <8 x float> %321, %387
  %389 = fptrunc <8 x float> %388 to <8 x half>
  %390 = insertelement <8 x half> poison, half %296, i64 0
  %391 = insertelement <8 x half> %390, half %298, i64 1
  %392 = insertelement <8 x half> %391, half %300, i64 2
  %393 = insertelement <8 x half> %392, half %302, i64 3
  %394 = insertelement <8 x half> %393, half %304, i64 4
  %395 = insertelement <8 x half> %394, half %306, i64 5
  %396 = insertelement <8 x half> %395, half %308, i64 6
  %397 = insertelement <8 x half> %396, half %310, i64 7
  %398 = fpext <8 x half> %397 to <8 x float>
  %399 = fmul <8 x float> %321, %398
  %400 = fptrunc <8 x float> %399 to <8 x half>
  %401 = lshr i32 %28, 1
  %402 = and i32 %401, 3
  %403 = shl nuw nsw i32 %28, 5
  %404 = lshr exact i32 %34, 3
  %405 = xor i32 %402, %404
  %406 = shl nuw nsw i32 %405, 3
  %407 = or i32 %406, %403
  %408 = zext i32 %407 to i64
  %409 = getelementptr half, ptr addrspace(3) @global_smem, i64 %408
  %410 = lshr i32 %29, 1
  %411 = and i32 %410, 3
  %412 = xor i32 %411, %404
  %413 = shl nuw nsw i32 %412, 3
  %414 = or i32 %413, %403
  %415 = zext i32 %414 to i64
  %416 = getelementptr half, ptr addrspace(3) @global_smem, i64 %415
  %417 = getelementptr half, ptr addrspace(3) %416, i64 2048
  store <8 x half> %323, ptr addrspace(3) %409, align 16
  store <8 x half> %334, ptr addrspace(3) %417, align 16
  %418 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %408
  %419 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %415
  %420 = getelementptr half, ptr addrspace(3) %419, i64 2048
  store <8 x half> %345, ptr addrspace(3) %418, align 16
  store <8 x half> %356, ptr addrspace(3) %420, align 16
  %421 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 16384), i64 %408
  %422 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 16384), i64 %415
  %423 = getelementptr half, ptr addrspace(3) %422, i64 2048
  store <8 x half> %367, ptr addrspace(3) %421, align 16
  store <8 x half> %378, ptr addrspace(3) %423, align 16
  %424 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 24576), i64 %408
  %425 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 24576), i64 %415
  %426 = getelementptr half, ptr addrspace(3) %425, i64 2048
  store <8 x half> %389, ptr addrspace(3) %424, align 16
  store <8 x half> %400, ptr addrspace(3) %426, align 16
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %427 = getelementptr half, ptr addrspace(1) %75, i64 %87
  %428 = getelementptr half, ptr addrspace(1) %75, i64 %88
  %429 = getelementptr half, ptr addrspace(1) %75, i64 %89
  %430 = getelementptr half, ptr addrspace(1) %75, i64 %90
  %431 = getelementptr half, ptr addrspace(1) %75, i64 %91
  %432 = getelementptr half, ptr addrspace(1) %75, i64 %92
  %433 = getelementptr half, ptr addrspace(1) %75, i64 %93
  %434 = getelementptr half, ptr addrspace(1) %75, i64 %94
  %435 = getelementptr half, ptr addrspace(1) %75, i64 %95
  %436 = getelementptr half, ptr addrspace(1) %75, i64 %96
  %437 = getelementptr half, ptr addrspace(1) %75, i64 %97
  %438 = getelementptr half, ptr addrspace(1) %75, i64 %98
  %439 = getelementptr half, ptr addrspace(1) %75, i64 %99
  %440 = getelementptr half, ptr addrspace(1) %75, i64 %100
  %441 = getelementptr half, ptr addrspace(1) %75, i64 %101
  %442 = getelementptr half, ptr addrspace(1) %75, i64 %102
  %443 = getelementptr half, ptr addrspace(1) %75, i64 %103
  %444 = getelementptr half, ptr addrspace(1) %75, i64 %104
  %445 = getelementptr half, ptr addrspace(1) %75, i64 %105
  %446 = getelementptr half, ptr addrspace(1) %75, i64 %106
  %447 = getelementptr half, ptr addrspace(1) %75, i64 %107
  %448 = getelementptr half, ptr addrspace(1) %75, i64 %108
  %449 = getelementptr half, ptr addrspace(1) %75, i64 %109
  %450 = getelementptr half, ptr addrspace(1) %75, i64 %110
  %451 = getelementptr half, ptr addrspace(1) %75, i64 %111
  %452 = getelementptr half, ptr addrspace(1) %75, i64 %112
  %453 = getelementptr half, ptr addrspace(1) %75, i64 %113
  %454 = getelementptr half, ptr addrspace(1) %75, i64 %114
  %455 = getelementptr half, ptr addrspace(1) %75, i64 %115
  %456 = getelementptr half, ptr addrspace(1) %75, i64 %116
  %457 = getelementptr half, ptr addrspace(1) %75, i64 %117
  %458 = getelementptr half, ptr addrspace(1) %75, i64 %118
  %459 = mul nsw i64 %78, %79
  %460 = mul nsw i64 %78, %80
  %461 = icmp sgt i32 %20, 0
  br i1 %461, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %21
  %462 = icmp ugt i32 %23, 31
  %463 = zext i1 %462 to i32
  %464 = or i32 %463, 2
  %465 = lshr i32 %22, 1
  %466 = and i32 %465, 3
  %467 = xor i32 %464, %466
  %468 = shl nuw nsw i32 %467, 3
  %469 = shl nuw nsw i32 %32, 5
  %470 = or i32 %468, %469
  %471 = zext i32 %470 to i64
  %472 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 24576), i64 %471
  %473 = load <8 x half>, ptr addrspace(3) %472, align 16
  %474 = xor i32 %466, %463
  %475 = shl nuw nsw i32 %474, 3
  %476 = or i32 %469, %475
  %477 = zext i32 %476 to i64
  %478 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 24576), i64 %477
  %479 = load <8 x half>, ptr addrspace(3) %478, align 16
  %480 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 16384), i64 %471
  %481 = load <8 x half>, ptr addrspace(3) %480, align 16
  %482 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 16384), i64 %477
  %483 = load <8 x half>, ptr addrspace(3) %482, align 16
  %484 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %471
  %485 = load <8 x half>, ptr addrspace(3) %484, align 16
  %486 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %477
  %487 = load <8 x half>, ptr addrspace(3) %486, align 16
  %488 = getelementptr half, ptr addrspace(3) @global_smem, i64 %471
  %489 = load <8 x half>, ptr addrspace(3) %488, align 16
  %490 = getelementptr half, ptr addrspace(3) @global_smem, i64 %477
  %491 = load <8 x half>, ptr addrspace(3) %490, align 16
  %492 = lshr i32 %31, 1
  %493 = and i32 %492, 3
  %494 = xor i32 %493, %463
  %495 = shl nuw nsw i32 %494, 3
  %496 = shl nuw nsw i32 %31, 5
  %497 = or i32 %495, %496
  %498 = xor i32 %464, %493
  %499 = shl nuw nsw i32 %498, 3
  %500 = or i32 %499, %496
  %501 = or i32 %497, 1024
  %502 = or i32 %500, 1024
  %503 = or i32 %497, 2048
  %504 = or i32 %500, 2048
  %505 = or i32 %497, 3072
  %506 = or i32 %500, 3072
  %507 = zext i32 %497 to i64
  %508 = getelementptr half, ptr addrspace(3) @global_smem, i64 %507
  %509 = zext i32 %500 to i64
  %510 = getelementptr half, ptr addrspace(3) @global_smem, i64 %509
  %511 = zext i32 %501 to i64
  %512 = getelementptr half, ptr addrspace(3) @global_smem, i64 %511
  %513 = zext i32 %502 to i64
  %514 = getelementptr half, ptr addrspace(3) @global_smem, i64 %513
  %515 = zext i32 %503 to i64
  %516 = getelementptr half, ptr addrspace(3) @global_smem, i64 %515
  %517 = zext i32 %504 to i64
  %518 = getelementptr half, ptr addrspace(3) @global_smem, i64 %517
  %519 = zext i32 %505 to i64
  %520 = getelementptr half, ptr addrspace(3) @global_smem, i64 %519
  %521 = zext i32 %506 to i64
  %522 = getelementptr half, ptr addrspace(3) @global_smem, i64 %521
  %523 = shufflevector <8 x half> %479, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %524 = shufflevector <8 x half> %479, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %525 = shufflevector <8 x half> %473, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %526 = shufflevector <8 x half> %473, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %527 = shufflevector <8 x half> %483, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %528 = shufflevector <8 x half> %483, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %529 = shufflevector <8 x half> %481, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %530 = shufflevector <8 x half> %481, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %531 = shufflevector <8 x half> %487, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %532 = shufflevector <8 x half> %487, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %533 = shufflevector <8 x half> %485, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %534 = shufflevector <8 x half> %485, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %535 = shufflevector <8 x half> %491, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %536 = shufflevector <8 x half> %491, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %537 = shufflevector <8 x half> %489, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %538 = shufflevector <8 x half> %489, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %539 = shl i32 %22, 2
  %540 = xor i32 %539, 128
  %541 = and i32 %401, 7
  %542 = lshr exact i32 %34, 2
  %543 = xor i32 %541, %542
  %544 = shl nuw nsw i32 %543, 2
  %545 = or i32 %544, %403
  %546 = zext i32 %545 to i64
  %547 = getelementptr half, ptr addrspace(3) @global_smem, i64 %546
  %548 = lshr exact i32 %38, 2
  %549 = xor i32 %541, %548
  %550 = shl nuw nsw i32 %549, 2
  %551 = or i32 %550, %403
  %552 = zext i32 %551 to i64
  %553 = getelementptr half, ptr addrspace(3) @global_smem, i64 %552
  %554 = and i32 %410, 7
  %555 = xor i32 %554, %542
  %556 = shl nuw nsw i32 %555, 2
  %557 = or i32 %556, %403
  %558 = zext i32 %557 to i64
  %gep = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %558
  %559 = xor i32 %554, %548
  %560 = shl nuw nsw i32 %559, 2
  %561 = or i32 %560, %403
  %562 = zext i32 %561 to i64
  %gep2 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %562
  %563 = select i1 %462, i32 4, i32 0
  %564 = or i32 %563, 8
  %565 = or i32 %563, 16
  %566 = or i32 %563, 24
  %567 = shl nuw nsw i32 %492, 2
  %568 = and i32 %567, 28
  %569 = xor i32 %568, %563
  %570 = or i32 %569, %496
  %571 = xor i32 %564, %568
  %572 = or i32 %571, %496
  %573 = xor i32 %565, %568
  %574 = or i32 %573, %496
  %575 = xor i32 %566, %568
  %576 = or i32 %575, %496
  %577 = or i32 %570, 1024
  %578 = or i32 %572, 1024
  %579 = or i32 %574, 1024
  %580 = or i32 %576, 1024
  %581 = or i32 %570, 2048
  %582 = or i32 %572, 2048
  %583 = or i32 %574, 2048
  %584 = or i32 %576, 2048
  %585 = or i32 %570, 3072
  %586 = or i32 %572, 3072
  %587 = or i32 %574, 3072
  %588 = or i32 %576, 3072
  %589 = zext i32 %570 to i64
  %590 = getelementptr half, ptr addrspace(3) @global_smem, i64 %589
  %591 = zext i32 %572 to i64
  %592 = getelementptr half, ptr addrspace(3) @global_smem, i64 %591
  %593 = zext i32 %574 to i64
  %594 = getelementptr half, ptr addrspace(3) @global_smem, i64 %593
  %595 = zext i32 %576 to i64
  %596 = getelementptr half, ptr addrspace(3) @global_smem, i64 %595
  %597 = zext i32 %577 to i64
  %598 = getelementptr half, ptr addrspace(3) @global_smem, i64 %597
  %599 = zext i32 %578 to i64
  %600 = getelementptr half, ptr addrspace(3) @global_smem, i64 %599
  %601 = zext i32 %579 to i64
  %602 = getelementptr half, ptr addrspace(3) @global_smem, i64 %601
  %603 = zext i32 %580 to i64
  %604 = getelementptr half, ptr addrspace(3) @global_smem, i64 %603
  %605 = zext i32 %581 to i64
  %606 = getelementptr half, ptr addrspace(3) @global_smem, i64 %605
  %607 = zext i32 %582 to i64
  %608 = getelementptr half, ptr addrspace(3) @global_smem, i64 %607
  %609 = zext i32 %583 to i64
  %610 = getelementptr half, ptr addrspace(3) @global_smem, i64 %609
  %611 = zext i32 %584 to i64
  %612 = getelementptr half, ptr addrspace(3) @global_smem, i64 %611
  %613 = zext i32 %585 to i64
  %614 = getelementptr half, ptr addrspace(3) @global_smem, i64 %613
  %615 = zext i32 %586 to i64
  %616 = getelementptr half, ptr addrspace(3) @global_smem, i64 %615
  %617 = zext i32 %587 to i64
  %618 = getelementptr half, ptr addrspace(3) @global_smem, i64 %617
  %619 = zext i32 %588 to i64
  %620 = getelementptr half, ptr addrspace(3) @global_smem, i64 %619
  br label %621

621:                                              ; preds = %.lr.ph, %621
  %622 = phi i64 [ 0, %.lr.ph ], [ %1830, %621 ]
  %623 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %1389, %621 ]
  %624 = phi float [ 1.000000e+00, %.lr.ph ], [ %1829, %621 ]
  %625 = phi i32 [ 0, %.lr.ph ], [ %1831, %621 ]
  %626 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %1759, %621 ]
  %627 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %1755, %621 ]
  %628 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %1751, %621 ]
  %629 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %1747, %621 ]
  %630 = or i64 %622, %79
  %631 = or i64 %622, %80
  %632 = mul i64 %630, %76
  %633 = mul i64 %631, %76
  %634 = getelementptr half, ptr addrspace(1) %427, i64 %632
  %635 = getelementptr half, ptr addrspace(1) %428, i64 %632
  %636 = getelementptr half, ptr addrspace(1) %429, i64 %632
  %637 = getelementptr half, ptr addrspace(1) %430, i64 %632
  %638 = getelementptr half, ptr addrspace(1) %431, i64 %632
  %639 = getelementptr half, ptr addrspace(1) %432, i64 %632
  %640 = getelementptr half, ptr addrspace(1) %433, i64 %632
  %641 = getelementptr half, ptr addrspace(1) %434, i64 %632
  %642 = getelementptr half, ptr addrspace(1) %435, i64 %632
  %643 = getelementptr half, ptr addrspace(1) %436, i64 %632
  %644 = getelementptr half, ptr addrspace(1) %437, i64 %632
  %645 = getelementptr half, ptr addrspace(1) %438, i64 %632
  %646 = getelementptr half, ptr addrspace(1) %439, i64 %632
  %647 = getelementptr half, ptr addrspace(1) %440, i64 %632
  %648 = getelementptr half, ptr addrspace(1) %441, i64 %632
  %649 = getelementptr half, ptr addrspace(1) %442, i64 %632
  %650 = getelementptr half, ptr addrspace(1) %443, i64 %632
  %651 = getelementptr half, ptr addrspace(1) %444, i64 %632
  %652 = getelementptr half, ptr addrspace(1) %445, i64 %632
  %653 = getelementptr half, ptr addrspace(1) %446, i64 %632
  %654 = getelementptr half, ptr addrspace(1) %447, i64 %632
  %655 = getelementptr half, ptr addrspace(1) %448, i64 %632
  %656 = getelementptr half, ptr addrspace(1) %449, i64 %632
  %657 = getelementptr half, ptr addrspace(1) %450, i64 %632
  %658 = getelementptr half, ptr addrspace(1) %451, i64 %632
  %659 = getelementptr half, ptr addrspace(1) %452, i64 %632
  %660 = getelementptr half, ptr addrspace(1) %453, i64 %632
  %661 = getelementptr half, ptr addrspace(1) %454, i64 %632
  %662 = getelementptr half, ptr addrspace(1) %455, i64 %632
  %663 = getelementptr half, ptr addrspace(1) %456, i64 %632
  %664 = getelementptr half, ptr addrspace(1) %457, i64 %632
  %665 = getelementptr half, ptr addrspace(1) %458, i64 %632
  %666 = getelementptr half, ptr addrspace(1) %427, i64 %633
  %667 = getelementptr half, ptr addrspace(1) %428, i64 %633
  %668 = getelementptr half, ptr addrspace(1) %429, i64 %633
  %669 = getelementptr half, ptr addrspace(1) %430, i64 %633
  %670 = getelementptr half, ptr addrspace(1) %431, i64 %633
  %671 = getelementptr half, ptr addrspace(1) %432, i64 %633
  %672 = getelementptr half, ptr addrspace(1) %433, i64 %633
  %673 = getelementptr half, ptr addrspace(1) %434, i64 %633
  %674 = getelementptr half, ptr addrspace(1) %435, i64 %633
  %675 = getelementptr half, ptr addrspace(1) %436, i64 %633
  %676 = getelementptr half, ptr addrspace(1) %437, i64 %633
  %677 = getelementptr half, ptr addrspace(1) %438, i64 %633
  %678 = getelementptr half, ptr addrspace(1) %439, i64 %633
  %679 = getelementptr half, ptr addrspace(1) %440, i64 %633
  %680 = getelementptr half, ptr addrspace(1) %441, i64 %633
  %681 = getelementptr half, ptr addrspace(1) %442, i64 %633
  %682 = getelementptr half, ptr addrspace(1) %443, i64 %633
  %683 = getelementptr half, ptr addrspace(1) %444, i64 %633
  %684 = getelementptr half, ptr addrspace(1) %445, i64 %633
  %685 = getelementptr half, ptr addrspace(1) %446, i64 %633
  %686 = getelementptr half, ptr addrspace(1) %447, i64 %633
  %687 = getelementptr half, ptr addrspace(1) %448, i64 %633
  %688 = getelementptr half, ptr addrspace(1) %449, i64 %633
  %689 = getelementptr half, ptr addrspace(1) %450, i64 %633
  %690 = getelementptr half, ptr addrspace(1) %451, i64 %633
  %691 = getelementptr half, ptr addrspace(1) %452, i64 %633
  %692 = getelementptr half, ptr addrspace(1) %453, i64 %633
  %693 = getelementptr half, ptr addrspace(1) %454, i64 %633
  %694 = getelementptr half, ptr addrspace(1) %455, i64 %633
  %695 = getelementptr half, ptr addrspace(1) %456, i64 %633
  %696 = getelementptr half, ptr addrspace(1) %457, i64 %633
  %697 = getelementptr half, ptr addrspace(1) %458, i64 %633
  %698 = or i64 %622, %87
  %699 = or i64 %622, %88
  %700 = or i64 %622, %89
  %701 = or i64 %622, %90
  %702 = or i64 %622, %91
  %703 = or i64 %622, %92
  %704 = or i64 %622, %93
  %705 = or i64 %622, %94
  %706 = or i64 %622, %95
  %707 = or i64 %622, %96
  %708 = or i64 %622, %97
  %709 = or i64 %622, %98
  %710 = or i64 %622, %99
  %711 = or i64 %622, %100
  %712 = or i64 %622, %101
  %713 = or i64 %622, %102
  %714 = or i64 %622, %103
  %715 = or i64 %622, %104
  %716 = or i64 %622, %105
  %717 = or i64 %622, %106
  %718 = or i64 %622, %107
  %719 = or i64 %622, %108
  %720 = or i64 %622, %109
  %721 = or i64 %622, %110
  %722 = or i64 %622, %111
  %723 = or i64 %622, %112
  %724 = or i64 %622, %113
  %725 = or i64 %622, %114
  %726 = or i64 %622, %115
  %727 = or i64 %622, %116
  %728 = or i64 %622, %117
  %729 = or i64 %622, %118
  %730 = getelementptr half, ptr addrspace(1) %77, i64 %698
  %731 = getelementptr half, ptr addrspace(1) %77, i64 %699
  %732 = getelementptr half, ptr addrspace(1) %77, i64 %700
  %733 = getelementptr half, ptr addrspace(1) %77, i64 %701
  %734 = getelementptr half, ptr addrspace(1) %77, i64 %702
  %735 = getelementptr half, ptr addrspace(1) %77, i64 %703
  %736 = getelementptr half, ptr addrspace(1) %77, i64 %704
  %737 = getelementptr half, ptr addrspace(1) %77, i64 %705
  %738 = getelementptr half, ptr addrspace(1) %77, i64 %706
  %739 = getelementptr half, ptr addrspace(1) %77, i64 %707
  %740 = getelementptr half, ptr addrspace(1) %77, i64 %708
  %741 = getelementptr half, ptr addrspace(1) %77, i64 %709
  %742 = getelementptr half, ptr addrspace(1) %77, i64 %710
  %743 = getelementptr half, ptr addrspace(1) %77, i64 %711
  %744 = getelementptr half, ptr addrspace(1) %77, i64 %712
  %745 = getelementptr half, ptr addrspace(1) %77, i64 %713
  %746 = getelementptr half, ptr addrspace(1) %77, i64 %714
  %747 = getelementptr half, ptr addrspace(1) %77, i64 %715
  %748 = getelementptr half, ptr addrspace(1) %77, i64 %716
  %749 = getelementptr half, ptr addrspace(1) %77, i64 %717
  %750 = getelementptr half, ptr addrspace(1) %77, i64 %718
  %751 = getelementptr half, ptr addrspace(1) %77, i64 %719
  %752 = getelementptr half, ptr addrspace(1) %77, i64 %720
  %753 = getelementptr half, ptr addrspace(1) %77, i64 %721
  %754 = getelementptr half, ptr addrspace(1) %77, i64 %722
  %755 = getelementptr half, ptr addrspace(1) %77, i64 %723
  %756 = getelementptr half, ptr addrspace(1) %77, i64 %724
  %757 = getelementptr half, ptr addrspace(1) %77, i64 %725
  %758 = getelementptr half, ptr addrspace(1) %77, i64 %726
  %759 = getelementptr half, ptr addrspace(1) %77, i64 %727
  %760 = getelementptr half, ptr addrspace(1) %77, i64 %728
  %761 = getelementptr half, ptr addrspace(1) %77, i64 %729
  %762 = getelementptr half, ptr addrspace(1) %730, i64 %459
  %763 = getelementptr half, ptr addrspace(1) %731, i64 %459
  %764 = getelementptr half, ptr addrspace(1) %732, i64 %459
  %765 = getelementptr half, ptr addrspace(1) %733, i64 %459
  %766 = getelementptr half, ptr addrspace(1) %734, i64 %459
  %767 = getelementptr half, ptr addrspace(1) %735, i64 %459
  %768 = getelementptr half, ptr addrspace(1) %736, i64 %459
  %769 = getelementptr half, ptr addrspace(1) %737, i64 %459
  %770 = getelementptr half, ptr addrspace(1) %738, i64 %459
  %771 = getelementptr half, ptr addrspace(1) %739, i64 %459
  %772 = getelementptr half, ptr addrspace(1) %740, i64 %459
  %773 = getelementptr half, ptr addrspace(1) %741, i64 %459
  %774 = getelementptr half, ptr addrspace(1) %742, i64 %459
  %775 = getelementptr half, ptr addrspace(1) %743, i64 %459
  %776 = getelementptr half, ptr addrspace(1) %744, i64 %459
  %777 = getelementptr half, ptr addrspace(1) %745, i64 %459
  %778 = getelementptr half, ptr addrspace(1) %746, i64 %459
  %779 = getelementptr half, ptr addrspace(1) %747, i64 %459
  %780 = getelementptr half, ptr addrspace(1) %748, i64 %459
  %781 = getelementptr half, ptr addrspace(1) %749, i64 %459
  %782 = getelementptr half, ptr addrspace(1) %750, i64 %459
  %783 = getelementptr half, ptr addrspace(1) %751, i64 %459
  %784 = getelementptr half, ptr addrspace(1) %752, i64 %459
  %785 = getelementptr half, ptr addrspace(1) %753, i64 %459
  %786 = getelementptr half, ptr addrspace(1) %754, i64 %459
  %787 = getelementptr half, ptr addrspace(1) %755, i64 %459
  %788 = getelementptr half, ptr addrspace(1) %756, i64 %459
  %789 = getelementptr half, ptr addrspace(1) %757, i64 %459
  %790 = getelementptr half, ptr addrspace(1) %758, i64 %459
  %791 = getelementptr half, ptr addrspace(1) %759, i64 %459
  %792 = getelementptr half, ptr addrspace(1) %760, i64 %459
  %793 = getelementptr half, ptr addrspace(1) %761, i64 %459
  %794 = getelementptr half, ptr addrspace(1) %730, i64 %460
  %795 = getelementptr half, ptr addrspace(1) %731, i64 %460
  %796 = getelementptr half, ptr addrspace(1) %732, i64 %460
  %797 = getelementptr half, ptr addrspace(1) %733, i64 %460
  %798 = getelementptr half, ptr addrspace(1) %734, i64 %460
  %799 = getelementptr half, ptr addrspace(1) %735, i64 %460
  %800 = getelementptr half, ptr addrspace(1) %736, i64 %460
  %801 = getelementptr half, ptr addrspace(1) %737, i64 %460
  %802 = getelementptr half, ptr addrspace(1) %738, i64 %460
  %803 = getelementptr half, ptr addrspace(1) %739, i64 %460
  %804 = getelementptr half, ptr addrspace(1) %740, i64 %460
  %805 = getelementptr half, ptr addrspace(1) %741, i64 %460
  %806 = getelementptr half, ptr addrspace(1) %742, i64 %460
  %807 = getelementptr half, ptr addrspace(1) %743, i64 %460
  %808 = getelementptr half, ptr addrspace(1) %744, i64 %460
  %809 = getelementptr half, ptr addrspace(1) %745, i64 %460
  %810 = getelementptr half, ptr addrspace(1) %746, i64 %460
  %811 = getelementptr half, ptr addrspace(1) %747, i64 %460
  %812 = getelementptr half, ptr addrspace(1) %748, i64 %460
  %813 = getelementptr half, ptr addrspace(1) %749, i64 %460
  %814 = getelementptr half, ptr addrspace(1) %750, i64 %460
  %815 = getelementptr half, ptr addrspace(1) %751, i64 %460
  %816 = getelementptr half, ptr addrspace(1) %752, i64 %460
  %817 = getelementptr half, ptr addrspace(1) %753, i64 %460
  %818 = getelementptr half, ptr addrspace(1) %754, i64 %460
  %819 = getelementptr half, ptr addrspace(1) %755, i64 %460
  %820 = getelementptr half, ptr addrspace(1) %756, i64 %460
  %821 = getelementptr half, ptr addrspace(1) %757, i64 %460
  %822 = getelementptr half, ptr addrspace(1) %758, i64 %460
  %823 = getelementptr half, ptr addrspace(1) %759, i64 %460
  %824 = getelementptr half, ptr addrspace(1) %760, i64 %460
  %825 = getelementptr half, ptr addrspace(1) %761, i64 %460
  %826 = addrspacecast ptr addrspace(1) %634 to ptr
  %827 = load <1 x half>, ptr %826, align 2
  %828 = addrspacecast ptr addrspace(1) %635 to ptr
  %829 = load <1 x half>, ptr %828, align 2
  %830 = addrspacecast ptr addrspace(1) %636 to ptr
  %831 = load <1 x half>, ptr %830, align 2
  %832 = shufflevector <1 x half> %831, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %833 = addrspacecast ptr addrspace(1) %637 to ptr
  %834 = load <1 x half>, ptr %833, align 2
  %835 = shufflevector <1 x half> %834, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %836 = addrspacecast ptr addrspace(1) %638 to ptr
  %837 = load <1 x half>, ptr %836, align 2
  %838 = shufflevector <1 x half> %837, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %839 = addrspacecast ptr addrspace(1) %639 to ptr
  %840 = load <1 x half>, ptr %839, align 2
  %841 = shufflevector <1 x half> %840, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %842 = addrspacecast ptr addrspace(1) %640 to ptr
  %843 = load <1 x half>, ptr %842, align 2
  %844 = shufflevector <1 x half> %843, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %845 = addrspacecast ptr addrspace(1) %641 to ptr
  %846 = load <1 x half>, ptr %845, align 2
  %847 = shufflevector <1 x half> %846, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %848 = addrspacecast ptr addrspace(1) %666 to ptr
  %849 = load <1 x half>, ptr %848, align 2
  %850 = addrspacecast ptr addrspace(1) %667 to ptr
  %851 = load <1 x half>, ptr %850, align 2
  %852 = addrspacecast ptr addrspace(1) %668 to ptr
  %853 = load <1 x half>, ptr %852, align 2
  %854 = shufflevector <1 x half> %853, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %855 = addrspacecast ptr addrspace(1) %669 to ptr
  %856 = load <1 x half>, ptr %855, align 2
  %857 = shufflevector <1 x half> %856, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %858 = addrspacecast ptr addrspace(1) %670 to ptr
  %859 = load <1 x half>, ptr %858, align 2
  %860 = shufflevector <1 x half> %859, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %861 = addrspacecast ptr addrspace(1) %671 to ptr
  %862 = load <1 x half>, ptr %861, align 2
  %863 = shufflevector <1 x half> %862, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %864 = addrspacecast ptr addrspace(1) %672 to ptr
  %865 = load <1 x half>, ptr %864, align 2
  %866 = shufflevector <1 x half> %865, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %867 = addrspacecast ptr addrspace(1) %673 to ptr
  %868 = load <1 x half>, ptr %867, align 2
  %869 = shufflevector <1 x half> %868, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %870 = shufflevector <1 x half> %827, <1 x half> %829, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %871 = shufflevector <8 x half> %870, <8 x half> %832, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %872 = shufflevector <8 x half> %871, <8 x half> %835, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>
  %873 = shufflevector <8 x half> %872, <8 x half> %838, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>
  %874 = shufflevector <8 x half> %873, <8 x half> %841, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>
  %875 = shufflevector <8 x half> %874, <8 x half> %844, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>
  %876 = shufflevector <8 x half> %875, <8 x half> %847, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  store <8 x half> %876, ptr addrspace(3) %409, align 16
  %877 = shufflevector <1 x half> %849, <1 x half> %851, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %878 = shufflevector <8 x half> %877, <8 x half> %854, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %879 = shufflevector <8 x half> %878, <8 x half> %857, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>
  %880 = shufflevector <8 x half> %879, <8 x half> %860, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>
  %881 = shufflevector <8 x half> %880, <8 x half> %863, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>
  %882 = shufflevector <8 x half> %881, <8 x half> %866, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>
  %883 = shufflevector <8 x half> %882, <8 x half> %869, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  store <8 x half> %883, ptr addrspace(3) %417, align 16
  %884 = addrspacecast ptr addrspace(1) %642 to ptr
  %885 = load <1 x half>, ptr %884, align 2
  %886 = addrspacecast ptr addrspace(1) %643 to ptr
  %887 = load <1 x half>, ptr %886, align 2
  %888 = addrspacecast ptr addrspace(1) %644 to ptr
  %889 = load <1 x half>, ptr %888, align 2
  %890 = shufflevector <1 x half> %889, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %891 = addrspacecast ptr addrspace(1) %645 to ptr
  %892 = load <1 x half>, ptr %891, align 2
  %893 = shufflevector <1 x half> %892, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %894 = addrspacecast ptr addrspace(1) %646 to ptr
  %895 = load <1 x half>, ptr %894, align 2
  %896 = shufflevector <1 x half> %895, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %897 = addrspacecast ptr addrspace(1) %647 to ptr
  %898 = load <1 x half>, ptr %897, align 2
  %899 = shufflevector <1 x half> %898, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %900 = addrspacecast ptr addrspace(1) %648 to ptr
  %901 = load <1 x half>, ptr %900, align 2
  %902 = shufflevector <1 x half> %901, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %903 = addrspacecast ptr addrspace(1) %649 to ptr
  %904 = load <1 x half>, ptr %903, align 2
  %905 = shufflevector <1 x half> %904, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %906 = addrspacecast ptr addrspace(1) %674 to ptr
  %907 = load <1 x half>, ptr %906, align 2
  %908 = addrspacecast ptr addrspace(1) %675 to ptr
  %909 = load <1 x half>, ptr %908, align 2
  %910 = addrspacecast ptr addrspace(1) %676 to ptr
  %911 = load <1 x half>, ptr %910, align 2
  %912 = shufflevector <1 x half> %911, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %913 = addrspacecast ptr addrspace(1) %677 to ptr
  %914 = load <1 x half>, ptr %913, align 2
  %915 = shufflevector <1 x half> %914, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %916 = addrspacecast ptr addrspace(1) %678 to ptr
  %917 = load <1 x half>, ptr %916, align 2
  %918 = shufflevector <1 x half> %917, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %919 = addrspacecast ptr addrspace(1) %679 to ptr
  %920 = load <1 x half>, ptr %919, align 2
  %921 = shufflevector <1 x half> %920, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %922 = addrspacecast ptr addrspace(1) %680 to ptr
  %923 = load <1 x half>, ptr %922, align 2
  %924 = shufflevector <1 x half> %923, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %925 = addrspacecast ptr addrspace(1) %681 to ptr
  %926 = load <1 x half>, ptr %925, align 2
  %927 = shufflevector <1 x half> %926, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %928 = load <8 x half>, ptr addrspace(3) %508, align 16
  %929 = load <8 x half>, ptr addrspace(3) %510, align 16
  %930 = load <8 x half>, ptr addrspace(3) %512, align 16
  %931 = load <8 x half>, ptr addrspace(3) %514, align 16
  %932 = load <8 x half>, ptr addrspace(3) %516, align 16
  %933 = load <8 x half>, ptr addrspace(3) %518, align 16
  %934 = load <8 x half>, ptr addrspace(3) %520, align 16
  %935 = load <8 x half>, ptr addrspace(3) %522, align 16
  %936 = shufflevector <8 x half> %928, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %937 = shufflevector <8 x half> %928, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %938 = shufflevector <8 x half> %929, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %939 = shufflevector <8 x half> %929, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %940 = shufflevector <8 x half> %930, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %941 = shufflevector <8 x half> %930, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %942 = shufflevector <8 x half> %931, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %943 = shufflevector <8 x half> %931, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %944 = shufflevector <8 x half> %932, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %945 = shufflevector <8 x half> %932, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %946 = shufflevector <8 x half> %933, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %947 = shufflevector <8 x half> %933, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %948 = shufflevector <8 x half> %934, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %949 = shufflevector <8 x half> %934, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %950 = shufflevector <8 x half> %935, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %951 = shufflevector <8 x half> %935, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %952 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %936, <4 x half> %523, <16 x float> zeroinitializer, i32 0, i32 0, i32 0)
  %953 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %937, <4 x half> %524, <16 x float> %952, i32 0, i32 0, i32 0)
  %954 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %938, <4 x half> %525, <16 x float> %953, i32 0, i32 0, i32 0)
  %955 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %939, <4 x half> %526, <16 x float> %954, i32 0, i32 0, i32 0)
  %956 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %940, <4 x half> %523, <16 x float> zeroinitializer, i32 0, i32 0, i32 0)
  %957 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %941, <4 x half> %524, <16 x float> %956, i32 0, i32 0, i32 0)
  %958 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %942, <4 x half> %525, <16 x float> %957, i32 0, i32 0, i32 0)
  %959 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %943, <4 x half> %526, <16 x float> %958, i32 0, i32 0, i32 0)
  %960 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %944, <4 x half> %523, <16 x float> zeroinitializer, i32 0, i32 0, i32 0)
  %961 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %945, <4 x half> %524, <16 x float> %960, i32 0, i32 0, i32 0)
  %962 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %946, <4 x half> %525, <16 x float> %961, i32 0, i32 0, i32 0)
  %963 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %947, <4 x half> %526, <16 x float> %962, i32 0, i32 0, i32 0)
  %964 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %948, <4 x half> %523, <16 x float> zeroinitializer, i32 0, i32 0, i32 0)
  %965 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %949, <4 x half> %524, <16 x float> %964, i32 0, i32 0, i32 0)
  %966 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %950, <4 x half> %525, <16 x float> %965, i32 0, i32 0, i32 0)
  %967 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %951, <4 x half> %526, <16 x float> %966, i32 0, i32 0, i32 0)
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %968 = shufflevector <1 x half> %885, <1 x half> %887, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %969 = shufflevector <8 x half> %968, <8 x half> %890, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %970 = shufflevector <8 x half> %969, <8 x half> %893, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>
  %971 = shufflevector <8 x half> %970, <8 x half> %896, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>
  %972 = shufflevector <8 x half> %971, <8 x half> %899, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>
  %973 = shufflevector <8 x half> %972, <8 x half> %902, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>
  %974 = shufflevector <8 x half> %973, <8 x half> %905, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  store <8 x half> %974, ptr addrspace(3) %409, align 16
  %975 = shufflevector <1 x half> %907, <1 x half> %909, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %976 = shufflevector <8 x half> %975, <8 x half> %912, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %977 = shufflevector <8 x half> %976, <8 x half> %915, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>
  %978 = shufflevector <8 x half> %977, <8 x half> %918, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>
  %979 = shufflevector <8 x half> %978, <8 x half> %921, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>
  %980 = shufflevector <8 x half> %979, <8 x half> %924, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>
  %981 = shufflevector <8 x half> %980, <8 x half> %927, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  store <8 x half> %981, ptr addrspace(3) %417, align 16
  %982 = addrspacecast ptr addrspace(1) %650 to ptr
  %983 = load <1 x half>, ptr %982, align 2
  %984 = addrspacecast ptr addrspace(1) %651 to ptr
  %985 = load <1 x half>, ptr %984, align 2
  %986 = addrspacecast ptr addrspace(1) %652 to ptr
  %987 = load <1 x half>, ptr %986, align 2
  %988 = shufflevector <1 x half> %987, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %989 = addrspacecast ptr addrspace(1) %653 to ptr
  %990 = load <1 x half>, ptr %989, align 2
  %991 = shufflevector <1 x half> %990, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %992 = addrspacecast ptr addrspace(1) %654 to ptr
  %993 = load <1 x half>, ptr %992, align 2
  %994 = shufflevector <1 x half> %993, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %995 = addrspacecast ptr addrspace(1) %655 to ptr
  %996 = load <1 x half>, ptr %995, align 2
  %997 = shufflevector <1 x half> %996, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %998 = addrspacecast ptr addrspace(1) %656 to ptr
  %999 = load <1 x half>, ptr %998, align 2
  %1000 = shufflevector <1 x half> %999, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1001 = addrspacecast ptr addrspace(1) %657 to ptr
  %1002 = load <1 x half>, ptr %1001, align 2
  %1003 = shufflevector <1 x half> %1002, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1004 = addrspacecast ptr addrspace(1) %682 to ptr
  %1005 = load <1 x half>, ptr %1004, align 2
  %1006 = addrspacecast ptr addrspace(1) %683 to ptr
  %1007 = load <1 x half>, ptr %1006, align 2
  %1008 = addrspacecast ptr addrspace(1) %684 to ptr
  %1009 = load <1 x half>, ptr %1008, align 2
  %1010 = shufflevector <1 x half> %1009, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1011 = addrspacecast ptr addrspace(1) %685 to ptr
  %1012 = load <1 x half>, ptr %1011, align 2
  %1013 = shufflevector <1 x half> %1012, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1014 = addrspacecast ptr addrspace(1) %686 to ptr
  %1015 = load <1 x half>, ptr %1014, align 2
  %1016 = shufflevector <1 x half> %1015, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1017 = addrspacecast ptr addrspace(1) %687 to ptr
  %1018 = load <1 x half>, ptr %1017, align 2
  %1019 = shufflevector <1 x half> %1018, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1020 = addrspacecast ptr addrspace(1) %688 to ptr
  %1021 = load <1 x half>, ptr %1020, align 2
  %1022 = shufflevector <1 x half> %1021, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1023 = addrspacecast ptr addrspace(1) %689 to ptr
  %1024 = load <1 x half>, ptr %1023, align 2
  %1025 = shufflevector <1 x half> %1024, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1026 = load <8 x half>, ptr addrspace(3) %508, align 16
  %1027 = load <8 x half>, ptr addrspace(3) %510, align 16
  %1028 = load <8 x half>, ptr addrspace(3) %512, align 16
  %1029 = load <8 x half>, ptr addrspace(3) %514, align 16
  %1030 = load <8 x half>, ptr addrspace(3) %516, align 16
  %1031 = load <8 x half>, ptr addrspace(3) %518, align 16
  %1032 = load <8 x half>, ptr addrspace(3) %520, align 16
  %1033 = load <8 x half>, ptr addrspace(3) %522, align 16
  %1034 = shufflevector <8 x half> %1026, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1035 = shufflevector <8 x half> %1026, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1036 = shufflevector <8 x half> %1027, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1037 = shufflevector <8 x half> %1027, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1038 = shufflevector <8 x half> %1028, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1039 = shufflevector <8 x half> %1028, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1040 = shufflevector <8 x half> %1029, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1041 = shufflevector <8 x half> %1029, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1042 = shufflevector <8 x half> %1030, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1043 = shufflevector <8 x half> %1030, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1044 = shufflevector <8 x half> %1031, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1045 = shufflevector <8 x half> %1031, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1046 = shufflevector <8 x half> %1032, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1047 = shufflevector <8 x half> %1032, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1048 = shufflevector <8 x half> %1033, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1049 = shufflevector <8 x half> %1033, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1050 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1034, <4 x half> %527, <16 x float> %955, i32 0, i32 0, i32 0)
  %1051 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1035, <4 x half> %528, <16 x float> %1050, i32 0, i32 0, i32 0)
  %1052 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1036, <4 x half> %529, <16 x float> %1051, i32 0, i32 0, i32 0)
  %1053 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1037, <4 x half> %530, <16 x float> %1052, i32 0, i32 0, i32 0)
  %1054 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1038, <4 x half> %527, <16 x float> %959, i32 0, i32 0, i32 0)
  %1055 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1039, <4 x half> %528, <16 x float> %1054, i32 0, i32 0, i32 0)
  %1056 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1040, <4 x half> %529, <16 x float> %1055, i32 0, i32 0, i32 0)
  %1057 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1041, <4 x half> %530, <16 x float> %1056, i32 0, i32 0, i32 0)
  %1058 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1042, <4 x half> %527, <16 x float> %963, i32 0, i32 0, i32 0)
  %1059 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1043, <4 x half> %528, <16 x float> %1058, i32 0, i32 0, i32 0)
  %1060 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1044, <4 x half> %529, <16 x float> %1059, i32 0, i32 0, i32 0)
  %1061 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1045, <4 x half> %530, <16 x float> %1060, i32 0, i32 0, i32 0)
  %1062 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1046, <4 x half> %527, <16 x float> %967, i32 0, i32 0, i32 0)
  %1063 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1047, <4 x half> %528, <16 x float> %1062, i32 0, i32 0, i32 0)
  %1064 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1048, <4 x half> %529, <16 x float> %1063, i32 0, i32 0, i32 0)
  %1065 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1049, <4 x half> %530, <16 x float> %1064, i32 0, i32 0, i32 0)
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1066 = shufflevector <1 x half> %983, <1 x half> %985, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1067 = shufflevector <8 x half> %1066, <8 x half> %988, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1068 = shufflevector <8 x half> %1067, <8 x half> %991, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>
  %1069 = shufflevector <8 x half> %1068, <8 x half> %994, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>
  %1070 = shufflevector <8 x half> %1069, <8 x half> %997, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>
  %1071 = shufflevector <8 x half> %1070, <8 x half> %1000, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>
  %1072 = shufflevector <8 x half> %1071, <8 x half> %1003, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  store <8 x half> %1072, ptr addrspace(3) %409, align 16
  %1073 = shufflevector <1 x half> %1005, <1 x half> %1007, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1074 = shufflevector <8 x half> %1073, <8 x half> %1010, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1075 = shufflevector <8 x half> %1074, <8 x half> %1013, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>
  %1076 = shufflevector <8 x half> %1075, <8 x half> %1016, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>
  %1077 = shufflevector <8 x half> %1076, <8 x half> %1019, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>
  %1078 = shufflevector <8 x half> %1077, <8 x half> %1022, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>
  %1079 = shufflevector <8 x half> %1078, <8 x half> %1025, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  store <8 x half> %1079, ptr addrspace(3) %417, align 16
  %1080 = addrspacecast ptr addrspace(1) %658 to ptr
  %1081 = load <1 x half>, ptr %1080, align 2
  %1082 = addrspacecast ptr addrspace(1) %659 to ptr
  %1083 = load <1 x half>, ptr %1082, align 2
  %1084 = addrspacecast ptr addrspace(1) %660 to ptr
  %1085 = load <1 x half>, ptr %1084, align 2
  %1086 = shufflevector <1 x half> %1085, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1087 = addrspacecast ptr addrspace(1) %661 to ptr
  %1088 = load <1 x half>, ptr %1087, align 2
  %1089 = shufflevector <1 x half> %1088, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1090 = addrspacecast ptr addrspace(1) %662 to ptr
  %1091 = load <1 x half>, ptr %1090, align 2
  %1092 = shufflevector <1 x half> %1091, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1093 = addrspacecast ptr addrspace(1) %663 to ptr
  %1094 = load <1 x half>, ptr %1093, align 2
  %1095 = shufflevector <1 x half> %1094, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1096 = addrspacecast ptr addrspace(1) %664 to ptr
  %1097 = load <1 x half>, ptr %1096, align 2
  %1098 = shufflevector <1 x half> %1097, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1099 = addrspacecast ptr addrspace(1) %665 to ptr
  %1100 = load <1 x half>, ptr %1099, align 2
  %1101 = shufflevector <1 x half> %1100, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1102 = addrspacecast ptr addrspace(1) %690 to ptr
  %1103 = load <1 x half>, ptr %1102, align 2
  %1104 = addrspacecast ptr addrspace(1) %691 to ptr
  %1105 = load <1 x half>, ptr %1104, align 2
  %1106 = addrspacecast ptr addrspace(1) %692 to ptr
  %1107 = load <1 x half>, ptr %1106, align 2
  %1108 = shufflevector <1 x half> %1107, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1109 = addrspacecast ptr addrspace(1) %693 to ptr
  %1110 = load <1 x half>, ptr %1109, align 2
  %1111 = shufflevector <1 x half> %1110, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1112 = addrspacecast ptr addrspace(1) %694 to ptr
  %1113 = load <1 x half>, ptr %1112, align 2
  %1114 = shufflevector <1 x half> %1113, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1115 = addrspacecast ptr addrspace(1) %695 to ptr
  %1116 = load <1 x half>, ptr %1115, align 2
  %1117 = shufflevector <1 x half> %1116, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1118 = addrspacecast ptr addrspace(1) %696 to ptr
  %1119 = load <1 x half>, ptr %1118, align 2
  %1120 = shufflevector <1 x half> %1119, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1121 = addrspacecast ptr addrspace(1) %697 to ptr
  %1122 = load <1 x half>, ptr %1121, align 2
  %1123 = shufflevector <1 x half> %1122, <1 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1124 = load <8 x half>, ptr addrspace(3) %508, align 16
  %1125 = load <8 x half>, ptr addrspace(3) %510, align 16
  %1126 = load <8 x half>, ptr addrspace(3) %512, align 16
  %1127 = load <8 x half>, ptr addrspace(3) %514, align 16
  %1128 = load <8 x half>, ptr addrspace(3) %516, align 16
  %1129 = load <8 x half>, ptr addrspace(3) %518, align 16
  %1130 = load <8 x half>, ptr addrspace(3) %520, align 16
  %1131 = load <8 x half>, ptr addrspace(3) %522, align 16
  %1132 = shufflevector <8 x half> %1124, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1133 = shufflevector <8 x half> %1124, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1134 = shufflevector <8 x half> %1125, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1135 = shufflevector <8 x half> %1125, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1136 = shufflevector <8 x half> %1126, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1137 = shufflevector <8 x half> %1126, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1138 = shufflevector <8 x half> %1127, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1139 = shufflevector <8 x half> %1127, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1140 = shufflevector <8 x half> %1128, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1141 = shufflevector <8 x half> %1128, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1142 = shufflevector <8 x half> %1129, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1143 = shufflevector <8 x half> %1129, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1144 = shufflevector <8 x half> %1130, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1145 = shufflevector <8 x half> %1130, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1146 = shufflevector <8 x half> %1131, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1147 = shufflevector <8 x half> %1131, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1148 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1132, <4 x half> %531, <16 x float> %1053, i32 0, i32 0, i32 0)
  %1149 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1133, <4 x half> %532, <16 x float> %1148, i32 0, i32 0, i32 0)
  %1150 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1134, <4 x half> %533, <16 x float> %1149, i32 0, i32 0, i32 0)
  %1151 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1135, <4 x half> %534, <16 x float> %1150, i32 0, i32 0, i32 0)
  %1152 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1136, <4 x half> %531, <16 x float> %1057, i32 0, i32 0, i32 0)
  %1153 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1137, <4 x half> %532, <16 x float> %1152, i32 0, i32 0, i32 0)
  %1154 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1138, <4 x half> %533, <16 x float> %1153, i32 0, i32 0, i32 0)
  %1155 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1139, <4 x half> %534, <16 x float> %1154, i32 0, i32 0, i32 0)
  %1156 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1140, <4 x half> %531, <16 x float> %1061, i32 0, i32 0, i32 0)
  %1157 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1141, <4 x half> %532, <16 x float> %1156, i32 0, i32 0, i32 0)
  %1158 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1142, <4 x half> %533, <16 x float> %1157, i32 0, i32 0, i32 0)
  %1159 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1143, <4 x half> %534, <16 x float> %1158, i32 0, i32 0, i32 0)
  %1160 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1144, <4 x half> %531, <16 x float> %1065, i32 0, i32 0, i32 0)
  %1161 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1145, <4 x half> %532, <16 x float> %1160, i32 0, i32 0, i32 0)
  %1162 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1146, <4 x half> %533, <16 x float> %1161, i32 0, i32 0, i32 0)
  %1163 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1147, <4 x half> %534, <16 x float> %1162, i32 0, i32 0, i32 0)
  %1164 = addrspacecast ptr addrspace(1) %762 to ptr
  %1165 = load <1 x half>, ptr %1164, align 2
  %1166 = addrspacecast ptr addrspace(1) %763 to ptr
  %1167 = load <1 x half>, ptr %1166, align 2
  %1168 = addrspacecast ptr addrspace(1) %764 to ptr
  %1169 = load <1 x half>, ptr %1168, align 2
  %1170 = shufflevector <1 x half> %1169, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1171 = addrspacecast ptr addrspace(1) %765 to ptr
  %1172 = load <1 x half>, ptr %1171, align 2
  %1173 = shufflevector <1 x half> %1172, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1174 = addrspacecast ptr addrspace(1) %766 to ptr
  %1175 = load <1 x half>, ptr %1174, align 2
  %1176 = addrspacecast ptr addrspace(1) %767 to ptr
  %1177 = load <1 x half>, ptr %1176, align 2
  %1178 = addrspacecast ptr addrspace(1) %768 to ptr
  %1179 = load <1 x half>, ptr %1178, align 2
  %1180 = shufflevector <1 x half> %1179, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1181 = addrspacecast ptr addrspace(1) %769 to ptr
  %1182 = load <1 x half>, ptr %1181, align 2
  %1183 = shufflevector <1 x half> %1182, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1184 = addrspacecast ptr addrspace(1) %794 to ptr
  %1185 = load <1 x half>, ptr %1184, align 2
  %1186 = addrspacecast ptr addrspace(1) %795 to ptr
  %1187 = load <1 x half>, ptr %1186, align 2
  %1188 = addrspacecast ptr addrspace(1) %796 to ptr
  %1189 = load <1 x half>, ptr %1188, align 2
  %1190 = shufflevector <1 x half> %1189, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1191 = addrspacecast ptr addrspace(1) %797 to ptr
  %1192 = load <1 x half>, ptr %1191, align 2
  %1193 = shufflevector <1 x half> %1192, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1194 = addrspacecast ptr addrspace(1) %798 to ptr
  %1195 = load <1 x half>, ptr %1194, align 2
  %1196 = addrspacecast ptr addrspace(1) %799 to ptr
  %1197 = load <1 x half>, ptr %1196, align 2
  %1198 = addrspacecast ptr addrspace(1) %800 to ptr
  %1199 = load <1 x half>, ptr %1198, align 2
  %1200 = shufflevector <1 x half> %1199, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1201 = addrspacecast ptr addrspace(1) %801 to ptr
  %1202 = load <1 x half>, ptr %1201, align 2
  %1203 = shufflevector <1 x half> %1202, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  tail call void @llvm.amdgcn.sched.barrier(i32 0)
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1204 = shufflevector <1 x half> %1081, <1 x half> %1083, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1205 = shufflevector <8 x half> %1204, <8 x half> %1086, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1206 = shufflevector <8 x half> %1205, <8 x half> %1089, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>
  %1207 = shufflevector <8 x half> %1206, <8 x half> %1092, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>
  %1208 = shufflevector <8 x half> %1207, <8 x half> %1095, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>
  %1209 = shufflevector <8 x half> %1208, <8 x half> %1098, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>
  %1210 = shufflevector <8 x half> %1209, <8 x half> %1101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  store <8 x half> %1210, ptr addrspace(3) %409, align 16
  %1211 = shufflevector <1 x half> %1103, <1 x half> %1105, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1212 = shufflevector <8 x half> %1211, <8 x half> %1108, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1213 = shufflevector <8 x half> %1212, <8 x half> %1111, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>
  %1214 = shufflevector <8 x half> %1213, <8 x half> %1114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>
  %1215 = shufflevector <8 x half> %1214, <8 x half> %1117, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>
  %1216 = shufflevector <8 x half> %1215, <8 x half> %1120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>
  %1217 = shufflevector <8 x half> %1216, <8 x half> %1123, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  store <8 x half> %1217, ptr addrspace(3) %417, align 16
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1218 = load <8 x half>, ptr addrspace(3) %508, align 16
  %1219 = load <8 x half>, ptr addrspace(3) %510, align 16
  %1220 = load <8 x half>, ptr addrspace(3) %512, align 16
  %1221 = load <8 x half>, ptr addrspace(3) %514, align 16
  %1222 = load <8 x half>, ptr addrspace(3) %516, align 16
  %1223 = load <8 x half>, ptr addrspace(3) %518, align 16
  %1224 = load <8 x half>, ptr addrspace(3) %520, align 16
  %1225 = load <8 x half>, ptr addrspace(3) %522, align 16
  %1226 = shufflevector <8 x half> %1218, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1227 = shufflevector <8 x half> %1218, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1228 = shufflevector <8 x half> %1219, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1229 = shufflevector <8 x half> %1219, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1230 = shufflevector <8 x half> %1220, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1231 = shufflevector <8 x half> %1220, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1232 = shufflevector <8 x half> %1221, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1233 = shufflevector <8 x half> %1221, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1234 = shufflevector <8 x half> %1222, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1235 = shufflevector <8 x half> %1222, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1236 = shufflevector <8 x half> %1223, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1237 = shufflevector <8 x half> %1223, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1238 = shufflevector <8 x half> %1224, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1239 = shufflevector <8 x half> %1224, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1240 = shufflevector <8 x half> %1225, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1241 = shufflevector <8 x half> %1225, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1242 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1226, <4 x half> %535, <16 x float> %1151, i32 0, i32 0, i32 0)
  %1243 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1227, <4 x half> %536, <16 x float> %1242, i32 0, i32 0, i32 0)
  %1244 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1228, <4 x half> %537, <16 x float> %1243, i32 0, i32 0, i32 0)
  %1245 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1229, <4 x half> %538, <16 x float> %1244, i32 0, i32 0, i32 0)
  %1246 = extractelement <16 x float> %1245, i64 0
  %1247 = extractelement <16 x float> %1245, i64 1
  %1248 = extractelement <16 x float> %1245, i64 2
  %1249 = extractelement <16 x float> %1245, i64 3
  %1250 = extractelement <16 x float> %1245, i64 4
  %1251 = extractelement <16 x float> %1245, i64 5
  %1252 = extractelement <16 x float> %1245, i64 6
  %1253 = extractelement <16 x float> %1245, i64 7
  %1254 = extractelement <16 x float> %1245, i64 8
  %1255 = extractelement <16 x float> %1245, i64 9
  %1256 = extractelement <16 x float> %1245, i64 10
  %1257 = extractelement <16 x float> %1245, i64 11
  %1258 = extractelement <16 x float> %1245, i64 12
  %1259 = extractelement <16 x float> %1245, i64 13
  %1260 = extractelement <16 x float> %1245, i64 14
  %1261 = extractelement <16 x float> %1245, i64 15
  %1262 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1230, <4 x half> %535, <16 x float> %1155, i32 0, i32 0, i32 0)
  %1263 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1231, <4 x half> %536, <16 x float> %1262, i32 0, i32 0, i32 0)
  %1264 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1232, <4 x half> %537, <16 x float> %1263, i32 0, i32 0, i32 0)
  %1265 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1233, <4 x half> %538, <16 x float> %1264, i32 0, i32 0, i32 0)
  %1266 = extractelement <16 x float> %1265, i64 0
  %1267 = extractelement <16 x float> %1265, i64 1
  %1268 = extractelement <16 x float> %1265, i64 2
  %1269 = extractelement <16 x float> %1265, i64 3
  %1270 = extractelement <16 x float> %1265, i64 4
  %1271 = extractelement <16 x float> %1265, i64 5
  %1272 = extractelement <16 x float> %1265, i64 6
  %1273 = extractelement <16 x float> %1265, i64 7
  %1274 = extractelement <16 x float> %1265, i64 8
  %1275 = extractelement <16 x float> %1265, i64 9
  %1276 = extractelement <16 x float> %1265, i64 10
  %1277 = extractelement <16 x float> %1265, i64 11
  %1278 = extractelement <16 x float> %1265, i64 12
  %1279 = extractelement <16 x float> %1265, i64 13
  %1280 = extractelement <16 x float> %1265, i64 14
  %1281 = extractelement <16 x float> %1265, i64 15
  %1282 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1234, <4 x half> %535, <16 x float> %1159, i32 0, i32 0, i32 0)
  %1283 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1235, <4 x half> %536, <16 x float> %1282, i32 0, i32 0, i32 0)
  %1284 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1236, <4 x half> %537, <16 x float> %1283, i32 0, i32 0, i32 0)
  %1285 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1237, <4 x half> %538, <16 x float> %1284, i32 0, i32 0, i32 0)
  %1286 = extractelement <16 x float> %1285, i64 0
  %1287 = extractelement <16 x float> %1285, i64 1
  %1288 = extractelement <16 x float> %1285, i64 2
  %1289 = extractelement <16 x float> %1285, i64 3
  %1290 = extractelement <16 x float> %1285, i64 4
  %1291 = extractelement <16 x float> %1285, i64 5
  %1292 = extractelement <16 x float> %1285, i64 6
  %1293 = extractelement <16 x float> %1285, i64 7
  %1294 = extractelement <16 x float> %1285, i64 8
  %1295 = extractelement <16 x float> %1285, i64 9
  %1296 = extractelement <16 x float> %1285, i64 10
  %1297 = extractelement <16 x float> %1285, i64 11
  %1298 = extractelement <16 x float> %1285, i64 12
  %1299 = extractelement <16 x float> %1285, i64 13
  %1300 = extractelement <16 x float> %1285, i64 14
  %1301 = extractelement <16 x float> %1285, i64 15
  %1302 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1238, <4 x half> %535, <16 x float> %1163, i32 0, i32 0, i32 0)
  %1303 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1239, <4 x half> %536, <16 x float> %1302, i32 0, i32 0, i32 0)
  %1304 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1240, <4 x half> %537, <16 x float> %1303, i32 0, i32 0, i32 0)
  %1305 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1241, <4 x half> %538, <16 x float> %1304, i32 0, i32 0, i32 0)
  %1306 = extractelement <16 x float> %1305, i64 0
  %1307 = extractelement <16 x float> %1305, i64 1
  %1308 = extractelement <16 x float> %1305, i64 2
  %1309 = extractelement <16 x float> %1305, i64 3
  %1310 = extractelement <16 x float> %1305, i64 4
  %1311 = extractelement <16 x float> %1305, i64 5
  %1312 = extractelement <16 x float> %1305, i64 6
  %1313 = extractelement <16 x float> %1305, i64 7
  %1314 = extractelement <16 x float> %1305, i64 8
  %1315 = extractelement <16 x float> %1305, i64 9
  %1316 = extractelement <16 x float> %1305, i64 10
  %1317 = extractelement <16 x float> %1305, i64 11
  %1318 = extractelement <16 x float> %1305, i64 12
  %1319 = extractelement <16 x float> %1305, i64 13
  %1320 = extractelement <16 x float> %1305, i64 14
  %1321 = extractelement <16 x float> %1305, i64 15
  %1322 = tail call float @llvm.maxnum.f32(float %1246, float %1247)
  %1323 = tail call float @llvm.maxnum.f32(float %1322, float %1248)
  %1324 = tail call float @llvm.maxnum.f32(float %1323, float %1249)
  %1325 = tail call float @llvm.maxnum.f32(float %1324, float %1250)
  %1326 = tail call float @llvm.maxnum.f32(float %1325, float %1251)
  %1327 = tail call float @llvm.maxnum.f32(float %1326, float %1252)
  %1328 = tail call float @llvm.maxnum.f32(float %1327, float %1253)
  %1329 = tail call float @llvm.maxnum.f32(float %1328, float %1254)
  %1330 = tail call float @llvm.maxnum.f32(float %1329, float %1255)
  %1331 = tail call float @llvm.maxnum.f32(float %1330, float %1256)
  %1332 = tail call float @llvm.maxnum.f32(float %1331, float %1257)
  %1333 = tail call float @llvm.maxnum.f32(float %1332, float %1258)
  %1334 = tail call float @llvm.maxnum.f32(float %1333, float %1259)
  %1335 = tail call float @llvm.maxnum.f32(float %1334, float %1260)
  %1336 = tail call float @llvm.maxnum.f32(float %1335, float %1261)
  %1337 = tail call float @llvm.maxnum.f32(float %1336, float %1266)
  %1338 = tail call float @llvm.maxnum.f32(float %1337, float %1267)
  %1339 = tail call float @llvm.maxnum.f32(float %1338, float %1268)
  %1340 = tail call float @llvm.maxnum.f32(float %1339, float %1269)
  %1341 = tail call float @llvm.maxnum.f32(float %1340, float %1270)
  %1342 = tail call float @llvm.maxnum.f32(float %1341, float %1271)
  %1343 = tail call float @llvm.maxnum.f32(float %1342, float %1272)
  %1344 = tail call float @llvm.maxnum.f32(float %1343, float %1273)
  %1345 = tail call float @llvm.maxnum.f32(float %1344, float %1274)
  %1346 = tail call float @llvm.maxnum.f32(float %1345, float %1275)
  %1347 = tail call float @llvm.maxnum.f32(float %1346, float %1276)
  %1348 = tail call float @llvm.maxnum.f32(float %1347, float %1277)
  %1349 = tail call float @llvm.maxnum.f32(float %1348, float %1278)
  %1350 = tail call float @llvm.maxnum.f32(float %1349, float %1279)
  %1351 = tail call float @llvm.maxnum.f32(float %1350, float %1280)
  %1352 = tail call float @llvm.maxnum.f32(float %1351, float %1281)
  %1353 = tail call float @llvm.maxnum.f32(float %1352, float %1286)
  %1354 = tail call float @llvm.maxnum.f32(float %1353, float %1287)
  %1355 = tail call float @llvm.maxnum.f32(float %1354, float %1288)
  %1356 = tail call float @llvm.maxnum.f32(float %1355, float %1289)
  %1357 = tail call float @llvm.maxnum.f32(float %1356, float %1290)
  %1358 = tail call float @llvm.maxnum.f32(float %1357, float %1291)
  %1359 = tail call float @llvm.maxnum.f32(float %1358, float %1292)
  %1360 = tail call float @llvm.maxnum.f32(float %1359, float %1293)
  %1361 = tail call float @llvm.maxnum.f32(float %1360, float %1294)
  %1362 = tail call float @llvm.maxnum.f32(float %1361, float %1295)
  %1363 = tail call float @llvm.maxnum.f32(float %1362, float %1296)
  %1364 = tail call float @llvm.maxnum.f32(float %1363, float %1297)
  %1365 = tail call float @llvm.maxnum.f32(float %1364, float %1298)
  %1366 = tail call float @llvm.maxnum.f32(float %1365, float %1299)
  %1367 = tail call float @llvm.maxnum.f32(float %1366, float %1300)
  %1368 = tail call float @llvm.maxnum.f32(float %1367, float %1301)
  %1369 = tail call float @llvm.maxnum.f32(float %1368, float %1306)
  %1370 = tail call float @llvm.maxnum.f32(float %1369, float %1307)
  %1371 = tail call float @llvm.maxnum.f32(float %1370, float %1308)
  %1372 = tail call float @llvm.maxnum.f32(float %1371, float %1309)
  %1373 = tail call float @llvm.maxnum.f32(float %1372, float %1310)
  %1374 = tail call float @llvm.maxnum.f32(float %1373, float %1311)
  %1375 = tail call float @llvm.maxnum.f32(float %1374, float %1312)
  %1376 = tail call float @llvm.maxnum.f32(float %1375, float %1313)
  %1377 = tail call float @llvm.maxnum.f32(float %1376, float %1314)
  %1378 = tail call float @llvm.maxnum.f32(float %1377, float %1315)
  %1379 = tail call float @llvm.maxnum.f32(float %1378, float %1316)
  %1380 = tail call float @llvm.maxnum.f32(float %1379, float %1317)
  %1381 = tail call float @llvm.maxnum.f32(float %1380, float %1318)
  %1382 = tail call float @llvm.maxnum.f32(float %1381, float %1319)
  %1383 = tail call float @llvm.maxnum.f32(float %1382, float %1320)
  %1384 = tail call float @llvm.maxnum.f32(float %1383, float %1321)
  %1385 = bitcast float %1384 to i32
  %1386 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %540, i32 %1385)
  %1387 = bitcast i32 %1386 to float
  %1388 = tail call float @llvm.maxnum.f32(float %1384, float %1387)
  %1389 = tail call float @llvm.maxnum.f32(float %623, float %1388)
  %1390 = fsub float %623, %1389
  %1391 = tail call float @llvm.exp2.f32(float %1390)
  %1392 = insertelement <16 x float> poison, float %1391, i64 0
  %1393 = shufflevector <16 x float> %1392, <16 x float> poison, <16 x i32> zeroinitializer
  %1394 = fmul <16 x float> %629, %1393
  %1395 = fmul <16 x float> %628, %1393
  %1396 = fmul <16 x float> %627, %1393
  %1397 = fmul <16 x float> %626, %1393
  %1398 = shufflevector <16 x float> %1245, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1399 = insertelement <4 x float> poison, float %1389, i64 0
  %1400 = shufflevector <4 x float> %1399, <4 x float> poison, <4 x i32> zeroinitializer
  %1401 = fsub <4 x float> %1398, %1400
  %1402 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1401)
  %1403 = fptrunc <4 x float> %1402 to <4 x half>
  %1404 = shufflevector <16 x float> %1245, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1405 = fsub <4 x float> %1404, %1400
  %1406 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1405)
  %1407 = fptrunc <4 x float> %1406 to <4 x half>
  %1408 = shufflevector <16 x float> %1245, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1409 = fsub <4 x float> %1408, %1400
  %1410 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1409)
  %1411 = fptrunc <4 x float> %1410 to <4 x half>
  %1412 = shufflevector <16 x float> %1245, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1413 = fsub <4 x float> %1412, %1400
  %1414 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1413)
  %1415 = fptrunc <4 x float> %1414 to <4 x half>
  %1416 = shufflevector <16 x float> %1265, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1417 = fsub <4 x float> %1416, %1400
  %1418 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1417)
  %1419 = fptrunc <4 x float> %1418 to <4 x half>
  %1420 = shufflevector <16 x float> %1265, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1421 = fsub <4 x float> %1420, %1400
  %1422 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1421)
  %1423 = fptrunc <4 x float> %1422 to <4 x half>
  %1424 = shufflevector <16 x float> %1265, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1425 = fsub <4 x float> %1424, %1400
  %1426 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1425)
  %1427 = fptrunc <4 x float> %1426 to <4 x half>
  %1428 = shufflevector <16 x float> %1265, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1429 = fsub <4 x float> %1428, %1400
  %1430 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1429)
  %1431 = fptrunc <4 x float> %1430 to <4 x half>
  %1432 = shufflevector <16 x float> %1285, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1433 = fsub <4 x float> %1432, %1400
  %1434 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1433)
  %1435 = fptrunc <4 x float> %1434 to <4 x half>
  %1436 = shufflevector <16 x float> %1285, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1437 = fsub <4 x float> %1436, %1400
  %1438 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1437)
  %1439 = fptrunc <4 x float> %1438 to <4 x half>
  %1440 = shufflevector <16 x float> %1285, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1441 = fsub <4 x float> %1440, %1400
  %1442 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1441)
  %1443 = fptrunc <4 x float> %1442 to <4 x half>
  %1444 = shufflevector <16 x float> %1285, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1445 = fsub <4 x float> %1444, %1400
  %1446 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1445)
  %1447 = fptrunc <4 x float> %1446 to <4 x half>
  %1448 = shufflevector <16 x float> %1305, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1449 = fsub <4 x float> %1448, %1400
  %1450 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1449)
  %1451 = fptrunc <4 x float> %1450 to <4 x half>
  %1452 = shufflevector <16 x float> %1305, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1453 = fsub <4 x float> %1452, %1400
  %1454 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1453)
  %1455 = fptrunc <4 x float> %1454 to <4 x half>
  %1456 = shufflevector <16 x float> %1305, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1457 = fsub <4 x float> %1456, %1400
  %1458 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1457)
  %1459 = fptrunc <4 x float> %1458 to <4 x half>
  %1460 = shufflevector <16 x float> %1305, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1461 = fsub <4 x float> %1460, %1400
  %1462 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1461)
  %1463 = fptrunc <4 x float> %1462 to <4 x half>
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1464 = shufflevector <1 x half> %1165, <1 x half> %1167, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1465 = shufflevector <4 x half> %1464, <4 x half> %1170, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1466 = shufflevector <4 x half> %1465, <4 x half> %1173, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1466, ptr addrspace(3) %547, align 8
  %1467 = shufflevector <1 x half> %1175, <1 x half> %1177, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1468 = shufflevector <4 x half> %1467, <4 x half> %1180, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1469 = shufflevector <4 x half> %1468, <4 x half> %1183, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1469, ptr addrspace(3) %553, align 8
  %1470 = shufflevector <1 x half> %1185, <1 x half> %1187, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1471 = shufflevector <4 x half> %1470, <4 x half> %1190, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1472 = shufflevector <4 x half> %1471, <4 x half> %1193, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1472, ptr addrspace(3) %gep, align 8
  %1473 = shufflevector <1 x half> %1195, <1 x half> %1197, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1474 = shufflevector <4 x half> %1473, <4 x half> %1200, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1475 = shufflevector <4 x half> %1474, <4 x half> %1203, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1475, ptr addrspace(3) %gep2, align 8
  %1476 = addrspacecast ptr addrspace(1) %770 to ptr
  %1477 = load <1 x half>, ptr %1476, align 2
  %1478 = addrspacecast ptr addrspace(1) %771 to ptr
  %1479 = load <1 x half>, ptr %1478, align 2
  %1480 = addrspacecast ptr addrspace(1) %772 to ptr
  %1481 = load <1 x half>, ptr %1480, align 2
  %1482 = shufflevector <1 x half> %1481, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1483 = addrspacecast ptr addrspace(1) %773 to ptr
  %1484 = load <1 x half>, ptr %1483, align 2
  %1485 = shufflevector <1 x half> %1484, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1486 = addrspacecast ptr addrspace(1) %774 to ptr
  %1487 = load <1 x half>, ptr %1486, align 2
  %1488 = addrspacecast ptr addrspace(1) %775 to ptr
  %1489 = load <1 x half>, ptr %1488, align 2
  %1490 = addrspacecast ptr addrspace(1) %776 to ptr
  %1491 = load <1 x half>, ptr %1490, align 2
  %1492 = shufflevector <1 x half> %1491, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1493 = addrspacecast ptr addrspace(1) %777 to ptr
  %1494 = load <1 x half>, ptr %1493, align 2
  %1495 = shufflevector <1 x half> %1494, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1496 = addrspacecast ptr addrspace(1) %802 to ptr
  %1497 = load <1 x half>, ptr %1496, align 2
  %1498 = addrspacecast ptr addrspace(1) %803 to ptr
  %1499 = load <1 x half>, ptr %1498, align 2
  %1500 = addrspacecast ptr addrspace(1) %804 to ptr
  %1501 = load <1 x half>, ptr %1500, align 2
  %1502 = shufflevector <1 x half> %1501, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1503 = addrspacecast ptr addrspace(1) %805 to ptr
  %1504 = load <1 x half>, ptr %1503, align 2
  %1505 = shufflevector <1 x half> %1504, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1506 = addrspacecast ptr addrspace(1) %806 to ptr
  %1507 = load <1 x half>, ptr %1506, align 2
  %1508 = addrspacecast ptr addrspace(1) %807 to ptr
  %1509 = load <1 x half>, ptr %1508, align 2
  %1510 = addrspacecast ptr addrspace(1) %808 to ptr
  %1511 = load <1 x half>, ptr %1510, align 2
  %1512 = shufflevector <1 x half> %1511, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1513 = addrspacecast ptr addrspace(1) %809 to ptr
  %1514 = load <1 x half>, ptr %1513, align 2
  %1515 = shufflevector <1 x half> %1514, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1516 = load <4 x half>, ptr addrspace(3) %590, align 8
  %1517 = load <4 x half>, ptr addrspace(3) %592, align 8
  %1518 = load <4 x half>, ptr addrspace(3) %594, align 8
  %1519 = load <4 x half>, ptr addrspace(3) %596, align 8
  %1520 = load <4 x half>, ptr addrspace(3) %598, align 8
  %1521 = load <4 x half>, ptr addrspace(3) %600, align 8
  %1522 = load <4 x half>, ptr addrspace(3) %602, align 8
  %1523 = load <4 x half>, ptr addrspace(3) %604, align 8
  %1524 = load <4 x half>, ptr addrspace(3) %606, align 8
  %1525 = load <4 x half>, ptr addrspace(3) %608, align 8
  %1526 = load <4 x half>, ptr addrspace(3) %610, align 8
  %1527 = load <4 x half>, ptr addrspace(3) %612, align 8
  %1528 = load <4 x half>, ptr addrspace(3) %614, align 8
  %1529 = load <4 x half>, ptr addrspace(3) %616, align 8
  %1530 = load <4 x half>, ptr addrspace(3) %618, align 8
  %1531 = load <4 x half>, ptr addrspace(3) %620, align 8
  %1532 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1516, <4 x half> %1403, <16 x float> %1394, i32 0, i32 0, i32 0)
  %1533 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1517, <4 x half> %1407, <16 x float> %1532, i32 0, i32 0, i32 0)
  %1534 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1518, <4 x half> %1411, <16 x float> %1533, i32 0, i32 0, i32 0)
  %1535 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1519, <4 x half> %1415, <16 x float> %1534, i32 0, i32 0, i32 0)
  %1536 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1520, <4 x half> %1403, <16 x float> %1395, i32 0, i32 0, i32 0)
  %1537 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1521, <4 x half> %1407, <16 x float> %1536, i32 0, i32 0, i32 0)
  %1538 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1522, <4 x half> %1411, <16 x float> %1537, i32 0, i32 0, i32 0)
  %1539 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1523, <4 x half> %1415, <16 x float> %1538, i32 0, i32 0, i32 0)
  %1540 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1524, <4 x half> %1403, <16 x float> %1396, i32 0, i32 0, i32 0)
  %1541 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1525, <4 x half> %1407, <16 x float> %1540, i32 0, i32 0, i32 0)
  %1542 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1526, <4 x half> %1411, <16 x float> %1541, i32 0, i32 0, i32 0)
  %1543 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1527, <4 x half> %1415, <16 x float> %1542, i32 0, i32 0, i32 0)
  %1544 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1528, <4 x half> %1403, <16 x float> %1397, i32 0, i32 0, i32 0)
  %1545 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1529, <4 x half> %1407, <16 x float> %1544, i32 0, i32 0, i32 0)
  %1546 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1530, <4 x half> %1411, <16 x float> %1545, i32 0, i32 0, i32 0)
  %1547 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1531, <4 x half> %1415, <16 x float> %1546, i32 0, i32 0, i32 0)
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1548 = shufflevector <1 x half> %1477, <1 x half> %1479, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1549 = shufflevector <4 x half> %1548, <4 x half> %1482, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1550 = shufflevector <4 x half> %1549, <4 x half> %1485, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1550, ptr addrspace(3) %547, align 8
  %1551 = shufflevector <1 x half> %1487, <1 x half> %1489, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1552 = shufflevector <4 x half> %1551, <4 x half> %1492, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1553 = shufflevector <4 x half> %1552, <4 x half> %1495, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1553, ptr addrspace(3) %553, align 8
  %1554 = shufflevector <1 x half> %1497, <1 x half> %1499, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1555 = shufflevector <4 x half> %1554, <4 x half> %1502, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1556 = shufflevector <4 x half> %1555, <4 x half> %1505, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1556, ptr addrspace(3) %gep, align 8
  %1557 = shufflevector <1 x half> %1507, <1 x half> %1509, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1558 = shufflevector <4 x half> %1557, <4 x half> %1512, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1559 = shufflevector <4 x half> %1558, <4 x half> %1515, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1559, ptr addrspace(3) %gep2, align 8
  %1560 = addrspacecast ptr addrspace(1) %778 to ptr
  %1561 = load <1 x half>, ptr %1560, align 2
  %1562 = addrspacecast ptr addrspace(1) %779 to ptr
  %1563 = load <1 x half>, ptr %1562, align 2
  %1564 = addrspacecast ptr addrspace(1) %780 to ptr
  %1565 = load <1 x half>, ptr %1564, align 2
  %1566 = shufflevector <1 x half> %1565, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1567 = addrspacecast ptr addrspace(1) %781 to ptr
  %1568 = load <1 x half>, ptr %1567, align 2
  %1569 = shufflevector <1 x half> %1568, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1570 = addrspacecast ptr addrspace(1) %782 to ptr
  %1571 = load <1 x half>, ptr %1570, align 2
  %1572 = addrspacecast ptr addrspace(1) %783 to ptr
  %1573 = load <1 x half>, ptr %1572, align 2
  %1574 = addrspacecast ptr addrspace(1) %784 to ptr
  %1575 = load <1 x half>, ptr %1574, align 2
  %1576 = shufflevector <1 x half> %1575, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1577 = addrspacecast ptr addrspace(1) %785 to ptr
  %1578 = load <1 x half>, ptr %1577, align 2
  %1579 = shufflevector <1 x half> %1578, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1580 = addrspacecast ptr addrspace(1) %810 to ptr
  %1581 = load <1 x half>, ptr %1580, align 2
  %1582 = addrspacecast ptr addrspace(1) %811 to ptr
  %1583 = load <1 x half>, ptr %1582, align 2
  %1584 = addrspacecast ptr addrspace(1) %812 to ptr
  %1585 = load <1 x half>, ptr %1584, align 2
  %1586 = shufflevector <1 x half> %1585, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1587 = addrspacecast ptr addrspace(1) %813 to ptr
  %1588 = load <1 x half>, ptr %1587, align 2
  %1589 = shufflevector <1 x half> %1588, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1590 = addrspacecast ptr addrspace(1) %814 to ptr
  %1591 = load <1 x half>, ptr %1590, align 2
  %1592 = addrspacecast ptr addrspace(1) %815 to ptr
  %1593 = load <1 x half>, ptr %1592, align 2
  %1594 = addrspacecast ptr addrspace(1) %816 to ptr
  %1595 = load <1 x half>, ptr %1594, align 2
  %1596 = shufflevector <1 x half> %1595, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1597 = addrspacecast ptr addrspace(1) %817 to ptr
  %1598 = load <1 x half>, ptr %1597, align 2
  %1599 = shufflevector <1 x half> %1598, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1600 = load <4 x half>, ptr addrspace(3) %590, align 8
  %1601 = load <4 x half>, ptr addrspace(3) %592, align 8
  %1602 = load <4 x half>, ptr addrspace(3) %594, align 8
  %1603 = load <4 x half>, ptr addrspace(3) %596, align 8
  %1604 = load <4 x half>, ptr addrspace(3) %598, align 8
  %1605 = load <4 x half>, ptr addrspace(3) %600, align 8
  %1606 = load <4 x half>, ptr addrspace(3) %602, align 8
  %1607 = load <4 x half>, ptr addrspace(3) %604, align 8
  %1608 = load <4 x half>, ptr addrspace(3) %606, align 8
  %1609 = load <4 x half>, ptr addrspace(3) %608, align 8
  %1610 = load <4 x half>, ptr addrspace(3) %610, align 8
  %1611 = load <4 x half>, ptr addrspace(3) %612, align 8
  %1612 = load <4 x half>, ptr addrspace(3) %614, align 8
  %1613 = load <4 x half>, ptr addrspace(3) %616, align 8
  %1614 = load <4 x half>, ptr addrspace(3) %618, align 8
  %1615 = load <4 x half>, ptr addrspace(3) %620, align 8
  %1616 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1600, <4 x half> %1419, <16 x float> %1535, i32 0, i32 0, i32 0)
  %1617 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1601, <4 x half> %1423, <16 x float> %1616, i32 0, i32 0, i32 0)
  %1618 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1602, <4 x half> %1427, <16 x float> %1617, i32 0, i32 0, i32 0)
  %1619 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1603, <4 x half> %1431, <16 x float> %1618, i32 0, i32 0, i32 0)
  %1620 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1604, <4 x half> %1419, <16 x float> %1539, i32 0, i32 0, i32 0)
  %1621 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1605, <4 x half> %1423, <16 x float> %1620, i32 0, i32 0, i32 0)
  %1622 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1606, <4 x half> %1427, <16 x float> %1621, i32 0, i32 0, i32 0)
  %1623 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1607, <4 x half> %1431, <16 x float> %1622, i32 0, i32 0, i32 0)
  %1624 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1608, <4 x half> %1419, <16 x float> %1543, i32 0, i32 0, i32 0)
  %1625 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1609, <4 x half> %1423, <16 x float> %1624, i32 0, i32 0, i32 0)
  %1626 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1610, <4 x half> %1427, <16 x float> %1625, i32 0, i32 0, i32 0)
  %1627 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1611, <4 x half> %1431, <16 x float> %1626, i32 0, i32 0, i32 0)
  %1628 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1612, <4 x half> %1419, <16 x float> %1547, i32 0, i32 0, i32 0)
  %1629 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1613, <4 x half> %1423, <16 x float> %1628, i32 0, i32 0, i32 0)
  %1630 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1614, <4 x half> %1427, <16 x float> %1629, i32 0, i32 0, i32 0)
  %1631 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1615, <4 x half> %1431, <16 x float> %1630, i32 0, i32 0, i32 0)
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1632 = shufflevector <1 x half> %1561, <1 x half> %1563, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1633 = shufflevector <4 x half> %1632, <4 x half> %1566, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1634 = shufflevector <4 x half> %1633, <4 x half> %1569, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1634, ptr addrspace(3) %547, align 8
  %1635 = shufflevector <1 x half> %1571, <1 x half> %1573, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1636 = shufflevector <4 x half> %1635, <4 x half> %1576, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1637 = shufflevector <4 x half> %1636, <4 x half> %1579, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1637, ptr addrspace(3) %553, align 8
  %1638 = shufflevector <1 x half> %1581, <1 x half> %1583, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1639 = shufflevector <4 x half> %1638, <4 x half> %1586, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1640 = shufflevector <4 x half> %1639, <4 x half> %1589, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1640, ptr addrspace(3) %gep, align 8
  %1641 = shufflevector <1 x half> %1591, <1 x half> %1593, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1642 = shufflevector <4 x half> %1641, <4 x half> %1596, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1643 = shufflevector <4 x half> %1642, <4 x half> %1599, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1643, ptr addrspace(3) %gep2, align 8
  %1644 = addrspacecast ptr addrspace(1) %786 to ptr
  %1645 = load <1 x half>, ptr %1644, align 2
  %1646 = addrspacecast ptr addrspace(1) %787 to ptr
  %1647 = load <1 x half>, ptr %1646, align 2
  %1648 = addrspacecast ptr addrspace(1) %788 to ptr
  %1649 = load <1 x half>, ptr %1648, align 2
  %1650 = shufflevector <1 x half> %1649, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1651 = addrspacecast ptr addrspace(1) %789 to ptr
  %1652 = load <1 x half>, ptr %1651, align 2
  %1653 = shufflevector <1 x half> %1652, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1654 = addrspacecast ptr addrspace(1) %790 to ptr
  %1655 = load <1 x half>, ptr %1654, align 2
  %1656 = addrspacecast ptr addrspace(1) %791 to ptr
  %1657 = load <1 x half>, ptr %1656, align 2
  %1658 = addrspacecast ptr addrspace(1) %792 to ptr
  %1659 = load <1 x half>, ptr %1658, align 2
  %1660 = shufflevector <1 x half> %1659, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1661 = addrspacecast ptr addrspace(1) %793 to ptr
  %1662 = load <1 x half>, ptr %1661, align 2
  %1663 = shufflevector <1 x half> %1662, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1664 = addrspacecast ptr addrspace(1) %818 to ptr
  %1665 = load <1 x half>, ptr %1664, align 2
  %1666 = addrspacecast ptr addrspace(1) %819 to ptr
  %1667 = load <1 x half>, ptr %1666, align 2
  %1668 = addrspacecast ptr addrspace(1) %820 to ptr
  %1669 = load <1 x half>, ptr %1668, align 2
  %1670 = shufflevector <1 x half> %1669, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1671 = addrspacecast ptr addrspace(1) %821 to ptr
  %1672 = load <1 x half>, ptr %1671, align 2
  %1673 = shufflevector <1 x half> %1672, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1674 = addrspacecast ptr addrspace(1) %822 to ptr
  %1675 = load <1 x half>, ptr %1674, align 2
  %1676 = addrspacecast ptr addrspace(1) %823 to ptr
  %1677 = load <1 x half>, ptr %1676, align 2
  %1678 = addrspacecast ptr addrspace(1) %824 to ptr
  %1679 = load <1 x half>, ptr %1678, align 2
  %1680 = shufflevector <1 x half> %1679, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1681 = addrspacecast ptr addrspace(1) %825 to ptr
  %1682 = load <1 x half>, ptr %1681, align 2
  %1683 = shufflevector <1 x half> %1682, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1684 = load <4 x half>, ptr addrspace(3) %590, align 8
  %1685 = load <4 x half>, ptr addrspace(3) %592, align 8
  %1686 = load <4 x half>, ptr addrspace(3) %594, align 8
  %1687 = load <4 x half>, ptr addrspace(3) %596, align 8
  %1688 = load <4 x half>, ptr addrspace(3) %598, align 8
  %1689 = load <4 x half>, ptr addrspace(3) %600, align 8
  %1690 = load <4 x half>, ptr addrspace(3) %602, align 8
  %1691 = load <4 x half>, ptr addrspace(3) %604, align 8
  %1692 = load <4 x half>, ptr addrspace(3) %606, align 8
  %1693 = load <4 x half>, ptr addrspace(3) %608, align 8
  %1694 = load <4 x half>, ptr addrspace(3) %610, align 8
  %1695 = load <4 x half>, ptr addrspace(3) %612, align 8
  %1696 = load <4 x half>, ptr addrspace(3) %614, align 8
  %1697 = load <4 x half>, ptr addrspace(3) %616, align 8
  %1698 = load <4 x half>, ptr addrspace(3) %618, align 8
  %1699 = load <4 x half>, ptr addrspace(3) %620, align 8
  %1700 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1684, <4 x half> %1435, <16 x float> %1619, i32 0, i32 0, i32 0)
  %1701 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1685, <4 x half> %1439, <16 x float> %1700, i32 0, i32 0, i32 0)
  %1702 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1686, <4 x half> %1443, <16 x float> %1701, i32 0, i32 0, i32 0)
  %1703 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1687, <4 x half> %1447, <16 x float> %1702, i32 0, i32 0, i32 0)
  %1704 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1688, <4 x half> %1435, <16 x float> %1623, i32 0, i32 0, i32 0)
  %1705 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1689, <4 x half> %1439, <16 x float> %1704, i32 0, i32 0, i32 0)
  %1706 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1690, <4 x half> %1443, <16 x float> %1705, i32 0, i32 0, i32 0)
  %1707 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1691, <4 x half> %1447, <16 x float> %1706, i32 0, i32 0, i32 0)
  %1708 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1692, <4 x half> %1435, <16 x float> %1627, i32 0, i32 0, i32 0)
  %1709 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1693, <4 x half> %1439, <16 x float> %1708, i32 0, i32 0, i32 0)
  %1710 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1694, <4 x half> %1443, <16 x float> %1709, i32 0, i32 0, i32 0)
  %1711 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1695, <4 x half> %1447, <16 x float> %1710, i32 0, i32 0, i32 0)
  %1712 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1696, <4 x half> %1435, <16 x float> %1631, i32 0, i32 0, i32 0)
  %1713 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1697, <4 x half> %1439, <16 x float> %1712, i32 0, i32 0, i32 0)
  %1714 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1698, <4 x half> %1443, <16 x float> %1713, i32 0, i32 0, i32 0)
  %1715 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1699, <4 x half> %1447, <16 x float> %1714, i32 0, i32 0, i32 0)
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1716 = shufflevector <1 x half> %1645, <1 x half> %1647, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1717 = shufflevector <4 x half> %1716, <4 x half> %1650, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1718 = shufflevector <4 x half> %1717, <4 x half> %1653, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1718, ptr addrspace(3) %547, align 8
  %1719 = shufflevector <1 x half> %1655, <1 x half> %1657, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1720 = shufflevector <4 x half> %1719, <4 x half> %1660, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1721 = shufflevector <4 x half> %1720, <4 x half> %1663, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1721, ptr addrspace(3) %553, align 8
  %1722 = shufflevector <1 x half> %1665, <1 x half> %1667, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1723 = shufflevector <4 x half> %1722, <4 x half> %1670, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1724 = shufflevector <4 x half> %1723, <4 x half> %1673, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1724, ptr addrspace(3) %gep, align 8
  %1725 = shufflevector <1 x half> %1675, <1 x half> %1677, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %1726 = shufflevector <4 x half> %1725, <4 x half> %1680, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>
  %1727 = shufflevector <4 x half> %1726, <4 x half> %1683, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  store <4 x half> %1727, ptr addrspace(3) %gep2, align 8
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %1728 = load <4 x half>, ptr addrspace(3) %590, align 8
  %1729 = load <4 x half>, ptr addrspace(3) %592, align 8
  %1730 = load <4 x half>, ptr addrspace(3) %594, align 8
  %1731 = load <4 x half>, ptr addrspace(3) %596, align 8
  %1732 = load <4 x half>, ptr addrspace(3) %598, align 8
  %1733 = load <4 x half>, ptr addrspace(3) %600, align 8
  %1734 = load <4 x half>, ptr addrspace(3) %602, align 8
  %1735 = load <4 x half>, ptr addrspace(3) %604, align 8
  %1736 = load <4 x half>, ptr addrspace(3) %606, align 8
  %1737 = load <4 x half>, ptr addrspace(3) %608, align 8
  %1738 = load <4 x half>, ptr addrspace(3) %610, align 8
  %1739 = load <4 x half>, ptr addrspace(3) %612, align 8
  %1740 = load <4 x half>, ptr addrspace(3) %614, align 8
  %1741 = load <4 x half>, ptr addrspace(3) %616, align 8
  %1742 = load <4 x half>, ptr addrspace(3) %618, align 8
  %1743 = load <4 x half>, ptr addrspace(3) %620, align 8
  %1744 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1728, <4 x half> %1451, <16 x float> %1703, i32 0, i32 0, i32 0)
  %1745 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1729, <4 x half> %1455, <16 x float> %1744, i32 0, i32 0, i32 0)
  %1746 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1730, <4 x half> %1459, <16 x float> %1745, i32 0, i32 0, i32 0)
  %1747 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1731, <4 x half> %1463, <16 x float> %1746, i32 0, i32 0, i32 0)
  %1748 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1732, <4 x half> %1451, <16 x float> %1707, i32 0, i32 0, i32 0)
  %1749 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1733, <4 x half> %1455, <16 x float> %1748, i32 0, i32 0, i32 0)
  %1750 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1734, <4 x half> %1459, <16 x float> %1749, i32 0, i32 0, i32 0)
  %1751 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1735, <4 x half> %1463, <16 x float> %1750, i32 0, i32 0, i32 0)
  %1752 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1736, <4 x half> %1451, <16 x float> %1711, i32 0, i32 0, i32 0)
  %1753 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1737, <4 x half> %1455, <16 x float> %1752, i32 0, i32 0, i32 0)
  %1754 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1738, <4 x half> %1459, <16 x float> %1753, i32 0, i32 0, i32 0)
  %1755 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1739, <4 x half> %1463, <16 x float> %1754, i32 0, i32 0, i32 0)
  %1756 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1740, <4 x half> %1451, <16 x float> %1715, i32 0, i32 0, i32 0)
  %1757 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1741, <4 x half> %1455, <16 x float> %1756, i32 0, i32 0, i32 0)
  %1758 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1742, <4 x half> %1459, <16 x float> %1757, i32 0, i32 0, i32 0)
  %1759 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1743, <4 x half> %1463, <16 x float> %1758, i32 0, i32 0, i32 0)
  %shift = shufflevector <4 x float> %1402, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1760 = fadd <4 x float> %1402, %shift
  %shift73 = shufflevector <4 x float> %1402, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1761 = fadd <4 x float> %shift73, %1760
  %shift74 = shufflevector <4 x float> %1402, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1762 = fadd <4 x float> %shift74, %1761
  %1763 = fadd <4 x float> %1406, %1762
  %shift75 = shufflevector <4 x float> %1406, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1764 = fadd <4 x float> %shift75, %1763
  %shift76 = shufflevector <4 x float> %1406, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1765 = fadd <4 x float> %shift76, %1764
  %shift77 = shufflevector <4 x float> %1406, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1766 = fadd <4 x float> %shift77, %1765
  %1767 = fadd <4 x float> %1410, %1766
  %shift78 = shufflevector <4 x float> %1410, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1768 = fadd <4 x float> %shift78, %1767
  %shift79 = shufflevector <4 x float> %1410, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1769 = fadd <4 x float> %shift79, %1768
  %shift80 = shufflevector <4 x float> %1410, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1770 = fadd <4 x float> %shift80, %1769
  %1771 = fadd <4 x float> %1414, %1770
  %shift81 = shufflevector <4 x float> %1414, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1772 = fadd <4 x float> %shift81, %1771
  %shift82 = shufflevector <4 x float> %1414, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1773 = fadd <4 x float> %shift82, %1772
  %shift83 = shufflevector <4 x float> %1414, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1774 = fadd <4 x float> %shift83, %1773
  %1775 = fadd <4 x float> %1418, %1774
  %shift84 = shufflevector <4 x float> %1418, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1776 = fadd <4 x float> %shift84, %1775
  %shift85 = shufflevector <4 x float> %1418, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1777 = fadd <4 x float> %shift85, %1776
  %shift86 = shufflevector <4 x float> %1418, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1778 = fadd <4 x float> %shift86, %1777
  %1779 = fadd <4 x float> %1422, %1778
  %shift87 = shufflevector <4 x float> %1422, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1780 = fadd <4 x float> %shift87, %1779
  %shift88 = shufflevector <4 x float> %1422, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1781 = fadd <4 x float> %shift88, %1780
  %shift89 = shufflevector <4 x float> %1422, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1782 = fadd <4 x float> %shift89, %1781
  %1783 = fadd <4 x float> %1426, %1782
  %shift90 = shufflevector <4 x float> %1426, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1784 = fadd <4 x float> %shift90, %1783
  %shift91 = shufflevector <4 x float> %1426, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1785 = fadd <4 x float> %shift91, %1784
  %shift92 = shufflevector <4 x float> %1426, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1786 = fadd <4 x float> %shift92, %1785
  %1787 = fadd <4 x float> %1430, %1786
  %shift93 = shufflevector <4 x float> %1430, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1788 = fadd <4 x float> %shift93, %1787
  %shift94 = shufflevector <4 x float> %1430, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1789 = fadd <4 x float> %shift94, %1788
  %shift95 = shufflevector <4 x float> %1430, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1790 = fadd <4 x float> %shift95, %1789
  %1791 = fadd <4 x float> %1434, %1790
  %shift96 = shufflevector <4 x float> %1434, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1792 = fadd <4 x float> %shift96, %1791
  %shift97 = shufflevector <4 x float> %1434, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1793 = fadd <4 x float> %shift97, %1792
  %shift98 = shufflevector <4 x float> %1434, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1794 = fadd <4 x float> %shift98, %1793
  %1795 = fadd <4 x float> %1438, %1794
  %shift99 = shufflevector <4 x float> %1438, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1796 = fadd <4 x float> %shift99, %1795
  %shift100 = shufflevector <4 x float> %1438, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1797 = fadd <4 x float> %shift100, %1796
  %shift101 = shufflevector <4 x float> %1438, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1798 = fadd <4 x float> %shift101, %1797
  %1799 = fadd <4 x float> %1442, %1798
  %shift102 = shufflevector <4 x float> %1442, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1800 = fadd <4 x float> %shift102, %1799
  %shift103 = shufflevector <4 x float> %1442, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1801 = fadd <4 x float> %shift103, %1800
  %shift104 = shufflevector <4 x float> %1442, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1802 = fadd <4 x float> %shift104, %1801
  %1803 = fadd <4 x float> %1446, %1802
  %shift105 = shufflevector <4 x float> %1446, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1804 = fadd <4 x float> %shift105, %1803
  %shift106 = shufflevector <4 x float> %1446, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1805 = fadd <4 x float> %shift106, %1804
  %shift107 = shufflevector <4 x float> %1446, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1806 = fadd <4 x float> %shift107, %1805
  %1807 = fadd <4 x float> %1450, %1806
  %shift108 = shufflevector <4 x float> %1450, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1808 = fadd <4 x float> %shift108, %1807
  %shift109 = shufflevector <4 x float> %1450, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1809 = fadd <4 x float> %shift109, %1808
  %shift110 = shufflevector <4 x float> %1450, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1810 = fadd <4 x float> %shift110, %1809
  %1811 = fadd <4 x float> %1454, %1810
  %shift111 = shufflevector <4 x float> %1454, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1812 = fadd <4 x float> %shift111, %1811
  %shift112 = shufflevector <4 x float> %1454, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1813 = fadd <4 x float> %shift112, %1812
  %shift113 = shufflevector <4 x float> %1454, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1814 = fadd <4 x float> %shift113, %1813
  %1815 = fadd <4 x float> %1458, %1814
  %shift114 = shufflevector <4 x float> %1458, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1816 = fadd <4 x float> %shift114, %1815
  %shift115 = shufflevector <4 x float> %1458, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1817 = fadd <4 x float> %shift115, %1816
  %shift116 = shufflevector <4 x float> %1458, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1818 = fadd <4 x float> %shift116, %1817
  %1819 = fadd <4 x float> %1462, %1818
  %shift117 = shufflevector <4 x float> %1462, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %1820 = fadd <4 x float> %shift117, %1819
  %shift118 = shufflevector <4 x float> %1462, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>
  %1821 = fadd <4 x float> %shift118, %1820
  %shift119 = shufflevector <4 x float> %1462, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>
  %1822 = fadd <4 x float> %shift119, %1821
  %1823 = extractelement <4 x float> %1822, i64 0
  %1824 = bitcast float %1823 to i32
  %1825 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %540, i32 %1824)
  %1826 = bitcast i32 %1825 to float
  %1827 = fadd float %1823, %1826
  %1828 = fmul float %624, %1391
  %1829 = fadd float %1828, %1827
  %1830 = add i64 %622, 128
  %1831 = add i32 %625, 128
  %1832 = icmp slt i32 %1831, %20
  br i1 %1832, label %621, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %621
  %1833 = shufflevector <16 x float> %1759, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1834 = shufflevector <16 x float> %1759, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1835 = shufflevector <16 x float> %1759, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1836 = shufflevector <16 x float> %1759, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1837 = shufflevector <16 x float> %1759, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1838 = shufflevector <16 x float> %1759, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1839 = shufflevector <16 x float> %1759, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1840 = shufflevector <16 x float> %1759, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1841 = shufflevector <16 x float> %1755, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1842 = shufflevector <16 x float> %1755, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1843 = shufflevector <16 x float> %1755, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1844 = shufflevector <16 x float> %1755, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1845 = shufflevector <16 x float> %1755, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1846 = shufflevector <16 x float> %1755, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1847 = shufflevector <16 x float> %1755, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1848 = shufflevector <16 x float> %1755, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1849 = shufflevector <16 x float> %1751, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1850 = shufflevector <16 x float> %1751, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1851 = shufflevector <16 x float> %1751, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1852 = shufflevector <16 x float> %1751, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1853 = shufflevector <16 x float> %1751, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1854 = shufflevector <16 x float> %1751, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1855 = shufflevector <16 x float> %1751, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1856 = shufflevector <16 x float> %1751, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1857 = shufflevector <16 x float> %1747, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1858 = shufflevector <16 x float> %1747, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1859 = shufflevector <16 x float> %1747, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1860 = shufflevector <16 x float> %1747, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1861 = shufflevector <16 x float> %1747, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1862 = shufflevector <16 x float> %1747, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1863 = shufflevector <16 x float> %1747, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1864 = shufflevector <16 x float> %1747, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %21
  %.lcssa = phi float [ 1.000000e+00, %21 ], [ %1829, %._crit_edge.loopexit ]
  %1865 = phi <2 x float> [ zeroinitializer, %21 ], [ %1864, %._crit_edge.loopexit ]
  %1866 = phi <2 x float> [ zeroinitializer, %21 ], [ %1863, %._crit_edge.loopexit ]
  %1867 = phi <2 x float> [ zeroinitializer, %21 ], [ %1862, %._crit_edge.loopexit ]
  %1868 = phi <2 x float> [ zeroinitializer, %21 ], [ %1861, %._crit_edge.loopexit ]
  %1869 = phi <2 x float> [ zeroinitializer, %21 ], [ %1860, %._crit_edge.loopexit ]
  %1870 = phi <2 x float> [ zeroinitializer, %21 ], [ %1859, %._crit_edge.loopexit ]
  %1871 = phi <2 x float> [ zeroinitializer, %21 ], [ %1858, %._crit_edge.loopexit ]
  %1872 = phi <2 x float> [ zeroinitializer, %21 ], [ %1857, %._crit_edge.loopexit ]
  %1873 = phi <2 x float> [ zeroinitializer, %21 ], [ %1856, %._crit_edge.loopexit ]
  %1874 = phi <2 x float> [ zeroinitializer, %21 ], [ %1855, %._crit_edge.loopexit ]
  %1875 = phi <2 x float> [ zeroinitializer, %21 ], [ %1854, %._crit_edge.loopexit ]
  %1876 = phi <2 x float> [ zeroinitializer, %21 ], [ %1853, %._crit_edge.loopexit ]
  %1877 = phi <2 x float> [ zeroinitializer, %21 ], [ %1852, %._crit_edge.loopexit ]
  %1878 = phi <2 x float> [ zeroinitializer, %21 ], [ %1851, %._crit_edge.loopexit ]
  %1879 = phi <2 x float> [ zeroinitializer, %21 ], [ %1850, %._crit_edge.loopexit ]
  %1880 = phi <2 x float> [ zeroinitializer, %21 ], [ %1849, %._crit_edge.loopexit ]
  %1881 = phi <2 x float> [ zeroinitializer, %21 ], [ %1848, %._crit_edge.loopexit ]
  %1882 = phi <2 x float> [ zeroinitializer, %21 ], [ %1847, %._crit_edge.loopexit ]
  %1883 = phi <2 x float> [ zeroinitializer, %21 ], [ %1846, %._crit_edge.loopexit ]
  %1884 = phi <2 x float> [ zeroinitializer, %21 ], [ %1845, %._crit_edge.loopexit ]
  %1885 = phi <2 x float> [ zeroinitializer, %21 ], [ %1844, %._crit_edge.loopexit ]
  %1886 = phi <2 x float> [ zeroinitializer, %21 ], [ %1843, %._crit_edge.loopexit ]
  %1887 = phi <2 x float> [ zeroinitializer, %21 ], [ %1842, %._crit_edge.loopexit ]
  %1888 = phi <2 x float> [ zeroinitializer, %21 ], [ %1841, %._crit_edge.loopexit ]
  %1889 = phi <2 x float> [ zeroinitializer, %21 ], [ %1840, %._crit_edge.loopexit ]
  %1890 = phi <2 x float> [ zeroinitializer, %21 ], [ %1839, %._crit_edge.loopexit ]
  %1891 = phi <2 x float> [ zeroinitializer, %21 ], [ %1838, %._crit_edge.loopexit ]
  %1892 = phi <2 x float> [ zeroinitializer, %21 ], [ %1837, %._crit_edge.loopexit ]
  %1893 = phi <2 x float> [ zeroinitializer, %21 ], [ %1836, %._crit_edge.loopexit ]
  %1894 = phi <2 x float> [ zeroinitializer, %21 ], [ %1835, %._crit_edge.loopexit ]
  %1895 = phi <2 x float> [ zeroinitializer, %21 ], [ %1834, %._crit_edge.loopexit ]
  %1896 = phi <2 x float> [ zeroinitializer, %21 ], [ %1833, %._crit_edge.loopexit ]
  %1897 = zext i32 %32 to i64
  %1898 = or i64 %1897, %69
  %1899 = lshr i32 %22, 3
  %1900 = and i32 %1899, 4
  %1901 = or i32 %1900, 122
  %1902 = zext i32 %1901 to i64
  %1903 = or i32 %1900, 120
  %1904 = zext i32 %1903 to i64
  %1905 = or i32 %1900, 114
  %1906 = zext i32 %1905 to i64
  %1907 = or i32 %1900, 112
  %1908 = zext i32 %1907 to i64
  %1909 = or i32 %1900, 106
  %1910 = zext i32 %1909 to i64
  %1911 = or i32 %1900, 104
  %1912 = zext i32 %1911 to i64
  %1913 = or i32 %1900, 98
  %1914 = zext i32 %1913 to i64
  %1915 = or i32 %1900, 96
  %1916 = zext i32 %1915 to i64
  %1917 = or i32 %1900, 90
  %1918 = zext i32 %1917 to i64
  %1919 = or i32 %1900, 88
  %1920 = zext i32 %1919 to i64
  %1921 = or i32 %1900, 82
  %1922 = zext i32 %1921 to i64
  %1923 = or i32 %1900, 80
  %1924 = zext i32 %1923 to i64
  %1925 = or i32 %1900, 74
  %1926 = zext i32 %1925 to i64
  %1927 = or i32 %1900, 72
  %1928 = zext i32 %1927 to i64
  %1929 = or i32 %1900, 66
  %1930 = zext i32 %1929 to i64
  %1931 = or i32 %1900, 64
  %1932 = zext i32 %1931 to i64
  %1933 = or i32 %1900, 58
  %1934 = zext i32 %1933 to i64
  %1935 = or i32 %1900, 56
  %1936 = zext i32 %1935 to i64
  %1937 = or i32 %1900, 50
  %1938 = zext i32 %1937 to i64
  %1939 = or i32 %1900, 48
  %1940 = zext i32 %1939 to i64
  %1941 = or i32 %1900, 42
  %1942 = zext i32 %1941 to i64
  %1943 = or i32 %1900, 40
  %1944 = zext i32 %1943 to i64
  %1945 = or i32 %1900, 34
  %1946 = zext i32 %1945 to i64
  %1947 = or i32 %1900, 32
  %1948 = zext i32 %1947 to i64
  %1949 = or i32 %1900, 26
  %1950 = zext i32 %1949 to i64
  %1951 = or i32 %1900, 24
  %1952 = zext i32 %1951 to i64
  %1953 = or i32 %1900, 18
  %1954 = zext i32 %1953 to i64
  %1955 = or i32 %1900, 16
  %1956 = zext i32 %1955 to i64
  %1957 = or i32 %1900, 10
  %1958 = zext i32 %1957 to i64
  %1959 = or i32 %1900, 8
  %1960 = zext i32 %1959 to i64
  %1961 = or i32 %1900, 2
  %1962 = zext i32 %1961 to i64
  %1963 = zext i32 %1900 to i64
  %1964 = insertelement <2 x float> poison, float %.lcssa, i64 0
  %1965 = shufflevector <2 x float> %1964, <2 x float> poison, <2 x i32> zeroinitializer
  %1966 = fdiv <2 x float> %1865, %1965
  %1967 = fdiv <2 x float> %1866, %1965
  %1968 = fdiv <2 x float> %1867, %1965
  %1969 = fdiv <2 x float> %1868, %1965
  %1970 = fdiv <2 x float> %1869, %1965
  %1971 = fdiv <2 x float> %1870, %1965
  %1972 = fdiv <2 x float> %1871, %1965
  %1973 = fdiv <2 x float> %1872, %1965
  %1974 = fdiv <2 x float> %1873, %1965
  %1975 = fdiv <2 x float> %1874, %1965
  %1976 = fdiv <2 x float> %1875, %1965
  %1977 = fdiv <2 x float> %1876, %1965
  %1978 = fdiv <2 x float> %1877, %1965
  %1979 = fdiv <2 x float> %1878, %1965
  %1980 = fdiv <2 x float> %1879, %1965
  %1981 = fdiv <2 x float> %1880, %1965
  %1982 = fdiv <2 x float> %1881, %1965
  %1983 = fdiv <2 x float> %1882, %1965
  %1984 = fdiv <2 x float> %1883, %1965
  %1985 = fdiv <2 x float> %1884, %1965
  %1986 = fdiv <2 x float> %1885, %1965
  %1987 = fdiv <2 x float> %1886, %1965
  %1988 = fdiv <2 x float> %1887, %1965
  %1989 = fdiv <2 x float> %1888, %1965
  %1990 = fdiv <2 x float> %1889, %1965
  %1991 = fdiv <2 x float> %1890, %1965
  %1992 = fdiv <2 x float> %1891, %1965
  %1993 = fdiv <2 x float> %1892, %1965
  %1994 = fdiv <2 x float> %1893, %1965
  %1995 = fdiv <2 x float> %1894, %1965
  %1996 = fdiv <2 x float> %1895, %1965
  %1997 = fdiv <2 x float> %1896, %1965
  %1998 = getelementptr half, ptr addrspace(1) %5, i64 %72
  %1999 = sext i32 %17 to i64
  %2000 = fptrunc <2 x float> %1966 to <2 x half>
  %2001 = fptrunc <2 x float> %1967 to <2 x half>
  %2002 = fptrunc <2 x float> %1968 to <2 x half>
  %2003 = fptrunc <2 x float> %1969 to <2 x half>
  %2004 = fptrunc <2 x float> %1970 to <2 x half>
  %2005 = fptrunc <2 x float> %1971 to <2 x half>
  %2006 = fptrunc <2 x float> %1972 to <2 x half>
  %2007 = fptrunc <2 x float> %1973 to <2 x half>
  %2008 = fptrunc <2 x float> %1974 to <2 x half>
  %2009 = fptrunc <2 x float> %1975 to <2 x half>
  %2010 = fptrunc <2 x float> %1976 to <2 x half>
  %2011 = fptrunc <2 x float> %1977 to <2 x half>
  %2012 = fptrunc <2 x float> %1978 to <2 x half>
  %2013 = fptrunc <2 x float> %1979 to <2 x half>
  %2014 = fptrunc <2 x float> %1980 to <2 x half>
  %2015 = fptrunc <2 x float> %1981 to <2 x half>
  %2016 = fptrunc <2 x float> %1982 to <2 x half>
  %2017 = fptrunc <2 x float> %1983 to <2 x half>
  %2018 = fptrunc <2 x float> %1984 to <2 x half>
  %2019 = fptrunc <2 x float> %1985 to <2 x half>
  %2020 = fptrunc <2 x float> %1986 to <2 x half>
  %2021 = fptrunc <2 x float> %1987 to <2 x half>
  %2022 = fptrunc <2 x float> %1988 to <2 x half>
  %2023 = fptrunc <2 x float> %1989 to <2 x half>
  %2024 = fptrunc <2 x float> %1990 to <2 x half>
  %2025 = fptrunc <2 x float> %1991 to <2 x half>
  %2026 = fptrunc <2 x float> %1992 to <2 x half>
  %2027 = fptrunc <2 x float> %1993 to <2 x half>
  %2028 = fptrunc <2 x float> %1994 to <2 x half>
  %2029 = fptrunc <2 x float> %1995 to <2 x half>
  %2030 = fptrunc <2 x float> %1996 to <2 x half>
  %2031 = fptrunc <2 x float> %1997 to <2 x half>
  %2032 = mul nsw i64 %1898, %1999
  %2033 = getelementptr half, ptr addrspace(1) %1998, i64 %2032
  %2034 = getelementptr half, ptr addrspace(1) %2033, i64 %1963
  %2035 = getelementptr half, ptr addrspace(1) %2033, i64 %1962
  %2036 = getelementptr half, ptr addrspace(1) %2033, i64 %1960
  %2037 = getelementptr half, ptr addrspace(1) %2033, i64 %1958
  %2038 = getelementptr half, ptr addrspace(1) %2033, i64 %1956
  %2039 = getelementptr half, ptr addrspace(1) %2033, i64 %1954
  %2040 = getelementptr half, ptr addrspace(1) %2033, i64 %1952
  %2041 = getelementptr half, ptr addrspace(1) %2033, i64 %1950
  %2042 = getelementptr half, ptr addrspace(1) %2033, i64 %1948
  %2043 = getelementptr half, ptr addrspace(1) %2033, i64 %1946
  %2044 = getelementptr half, ptr addrspace(1) %2033, i64 %1944
  %2045 = getelementptr half, ptr addrspace(1) %2033, i64 %1942
  %2046 = getelementptr half, ptr addrspace(1) %2033, i64 %1940
  %2047 = getelementptr half, ptr addrspace(1) %2033, i64 %1938
  %2048 = getelementptr half, ptr addrspace(1) %2033, i64 %1936
  %2049 = getelementptr half, ptr addrspace(1) %2033, i64 %1934
  %2050 = getelementptr half, ptr addrspace(1) %2033, i64 %1932
  %2051 = getelementptr half, ptr addrspace(1) %2033, i64 %1930
  %2052 = getelementptr half, ptr addrspace(1) %2033, i64 %1928
  %2053 = getelementptr half, ptr addrspace(1) %2033, i64 %1926
  %2054 = getelementptr half, ptr addrspace(1) %2033, i64 %1924
  %2055 = getelementptr half, ptr addrspace(1) %2033, i64 %1922
  %2056 = getelementptr half, ptr addrspace(1) %2033, i64 %1920
  %2057 = getelementptr half, ptr addrspace(1) %2033, i64 %1918
  %2058 = getelementptr half, ptr addrspace(1) %2033, i64 %1916
  %2059 = getelementptr half, ptr addrspace(1) %2033, i64 %1914
  %2060 = getelementptr half, ptr addrspace(1) %2033, i64 %1912
  %2061 = getelementptr half, ptr addrspace(1) %2033, i64 %1910
  %2062 = getelementptr half, ptr addrspace(1) %2033, i64 %1908
  %2063 = getelementptr half, ptr addrspace(1) %2033, i64 %1906
  %2064 = getelementptr half, ptr addrspace(1) %2033, i64 %1904
  %2065 = getelementptr half, ptr addrspace(1) %2033, i64 %1902
  store <2 x half> %2000, ptr addrspace(1) %2034, align 4
  store <2 x half> %2001, ptr addrspace(1) %2035, align 4
  store <2 x half> %2002, ptr addrspace(1) %2036, align 4
  store <2 x half> %2003, ptr addrspace(1) %2037, align 4
  store <2 x half> %2004, ptr addrspace(1) %2038, align 4
  store <2 x half> %2005, ptr addrspace(1) %2039, align 4
  store <2 x half> %2006, ptr addrspace(1) %2040, align 4
  store <2 x half> %2007, ptr addrspace(1) %2041, align 4
  store <2 x half> %2008, ptr addrspace(1) %2042, align 4
  store <2 x half> %2009, ptr addrspace(1) %2043, align 4
  store <2 x half> %2010, ptr addrspace(1) %2044, align 4
  store <2 x half> %2011, ptr addrspace(1) %2045, align 4
  store <2 x half> %2012, ptr addrspace(1) %2046, align 4
  store <2 x half> %2013, ptr addrspace(1) %2047, align 4
  store <2 x half> %2014, ptr addrspace(1) %2048, align 4
  store <2 x half> %2015, ptr addrspace(1) %2049, align 4
  store <2 x half> %2016, ptr addrspace(1) %2050, align 4
  store <2 x half> %2017, ptr addrspace(1) %2051, align 4
  store <2 x half> %2018, ptr addrspace(1) %2052, align 4
  store <2 x half> %2019, ptr addrspace(1) %2053, align 4
  store <2 x half> %2020, ptr addrspace(1) %2054, align 4
  store <2 x half> %2021, ptr addrspace(1) %2055, align 4
  store <2 x half> %2022, ptr addrspace(1) %2056, align 4
  store <2 x half> %2023, ptr addrspace(1) %2057, align 4
  store <2 x half> %2024, ptr addrspace(1) %2058, align 4
  store <2 x half> %2025, ptr addrspace(1) %2059, align 4
  store <2 x half> %2026, ptr addrspace(1) %2060, align 4
  store <2 x half> %2027, ptr addrspace(1) %2061, align 4
  store <2 x half> %2028, ptr addrspace(1) %2062, align 4
  store <2 x half> %2029, ptr addrspace(1) %2063, align 4
  store <2 x half> %2030, ptr addrspace(1) %2064, align 4
  store <2 x half> %2031, ptr addrspace(1) %2065, align 4
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.y() #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.sched.barrier(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.exp2.f32(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.exp2.v4f32(<4 x float>) #5

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1, 256" "amdgpu-unsafe-fp-atomics"="true" "amdgpu-waves-per-eu"="2" "denormal-fp-math-f32"="preserve-sign" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}
!nvvm.annotations = !{!6}
!opencl.ocl.version = !{}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !10}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 0}
!3 = !{i32 4, !"amdgpu_hostcall", i32 1}
!4 = distinct !DICompileUnit(language: DW_LANG_C, file: !5, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!5 = !DIFile(filename: "<unknown>", directory: "")
!6 = !{ptr @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de, !"kernel", i32 1}
!7 = !{i32 2, i32 0}
!8 = !{!"clang version 14.0.0"}
!9 = !{!"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"}
!10 = !{!"AMD clang version 17.0.0 (ssh://gerritgit/lightning/ec/llvm-project amd-mainline-open 23425 56ebc6a00586c4107105c18e3dc4cc0966d7e8e2)"}
!11 = distinct !DISubprogram(name: "_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de", linkageName: "_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de", scope: !5, file: !5, type: !12, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4)
!12 = !DISubroutineType(cc: DW_CC_normal, types: !13)
!13 = !{}
