#blocked = #triton_gpu.blocked<{sizePerThread = [1, 16], threadsPerWarp = [8, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0)
#mma = #triton_gpu.amd_mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [2, 4], instrShape = [16, 16], isTransposed = false}>
#shared = #triton_gpu.shared<{vec = 16, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 16, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "hip:gfx942", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @fused_moe_kernel(%arg0: !tt.ptr<f8E4M3FNUZ> {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg1: !tt.ptr<f8E4M3FNUZ> {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg6: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg7: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg8: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg11: i32 loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":20:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x256xf32, #mma> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<256x128xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<256x128xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<128x256xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg11, %c255_i32 : i32 loc(#loc70)
    %2 = arith.divsi %1, %c256_i32 : i32 loc(#loc71)
    %3 = arith.addi %arg9, %c255_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c256_i32 : i32 loc(#loc73)
    %5 = arith.muli %4, %c4_i32 : i32 loc(#loc7)
    %6 = arith.divsi %0, %5 : i32 loc(#loc8)
    %7 = arith.muli %6, %c4_i32 : i32 loc(#loc9)
    %8 = arith.subi %2, %7 : i32 loc(#loc10)
    %9 = arith.minsi %8, %c4_i32 : i32 loc(#loc11)
    %10 = arith.remsi %0, %5 : i32 loc(#loc12)
    %11 = arith.remsi %10, %9 : i32 loc(#loc13)
    %12 = arith.addi %7, %11 : i32 loc(#loc14)
    %13 = arith.divsi %10, %9 : i32 loc(#loc15)
    %14 = tt.load %arg8 : !tt.ptr<i32> loc(#loc16)
    %15 = arith.muli %12, %c256_i32 : i32 loc(#loc17)
    %16 = arith.cmpi sge, %15, %14 : i32 loc(#loc18)
    cf.cond_br %16, ^bb1, ^bb2 loc(#loc18)
  ^bb1:  // pred: ^bb0
    tt.return loc(#loc19)
  ^bb2:  // pred: ^bb0
    %17 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc20)
    %18 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc20)
    %19 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc20)
    %20 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc20)
    %21 = tt.splat %15 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
    %22 = tt.splat %15 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc21)
    %23 = arith.addi %21, %17 : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
    %24 = arith.addi %22, %18 : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc21)
    %25 = tt.splat %arg6 : !tt.ptr<i32> -> tensor<256x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc22)
    %26 = tt.splat %arg6 : !tt.ptr<i32> -> tensor<256x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc22)
    %27 = tt.addptr %25, %23 : tensor<256x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc22)
    %28 = tt.addptr %26, %24 : tensor<256x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc22)
    %29 = tt.load %27 : tensor<256x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc23)
    %30 = tt.load %28 : tensor<256x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc23)
    %31 = tt.splat %arg12 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc24)
    %32 = tt.splat %arg12 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc24)
    %33 = arith.cmpi slt, %29, %31 : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc24)
    %34 = arith.cmpi slt, %30, %32 : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc24)
    %35 = arith.muli %13, %c256_i32 : i32 loc(#loc25)
    %36 = tt.splat %35 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %37 = tt.splat %35 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc26)
    %38 = arith.addi %36, %19 : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %39 = arith.addi %37, %20 : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc26)
    %40 = tt.splat %arg9 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc27)
    %41 = arith.remsi %38, %40 : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc27)
    %42 = tt.expand_dims %29 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked> loc(#loc28)
    %43 = tt.expand_dims %30 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi32, #mma> loc(#loc28)
    %44 = tt.splat %arg13 : i32 -> tensor<256x1xi32, #blocked> loc(#loc29)
    %45 = arith.muli %42, %44 : tensor<256x1xi32, #blocked> loc(#loc29)
    %46 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc30)
    %47 = tt.expand_dims %46 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc30)
    %48 = tt.broadcast %45 : tensor<256x1xi32, #blocked> -> tensor<256x128xi32, #blocked> loc(#loc31)
    %49 = tt.broadcast %47 : tensor<1x128xi32, #blocked> -> tensor<256x128xi32, #blocked> loc(#loc31)
    %50 = arith.addi %48, %49 : tensor<256x128xi32, #blocked> loc(#loc31)
    %51 = tt.splat %arg0 : !tt.ptr<f8E4M3FNUZ> -> tensor<256x128x!tt.ptr<f8E4M3FNUZ>, #blocked> loc(#loc32)
    %52 = tt.addptr %51, %50 : tensor<256x128x!tt.ptr<f8E4M3FNUZ>, #blocked>, tensor<256x128xi32, #blocked> loc(#loc32)
    %53 = tt.addptr %arg7, %12 : !tt.ptr<i32>, i32 loc(#loc33)
    %54 = tt.load %53 : !tt.ptr<i32> loc(#loc34)
    %55 = arith.muli %54, %arg14 : i32 loc(#loc35)
    %56 = tt.addptr %arg1, %55 : !tt.ptr<f8E4M3FNUZ>, i32 loc(#loc36)
    %57 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc37)
    %58 = tt.expand_dims %57 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc37)
    %59 = tt.expand_dims %41 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc38)
    %60 = tt.splat %arg15 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc39)
    %61 = arith.muli %59, %60 : tensor<1x256xi32, #blocked1> loc(#loc39)
    %62 = tt.broadcast %58 : tensor<128x1xi32, #blocked1> -> tensor<128x256xi32, #blocked1> loc(#loc40)
    %63 = tt.broadcast %61 : tensor<1x256xi32, #blocked1> -> tensor<128x256xi32, #blocked1> loc(#loc40)
    %64 = arith.addi %62, %63 : tensor<128x256xi32, #blocked1> loc(#loc40)
    %65 = tt.splat %56 : !tt.ptr<f8E4M3FNUZ> -> tensor<128x256x!tt.ptr<f8E4M3FNUZ>, #blocked1> loc(#loc41)
    %66 = tt.addptr %65, %64 : tensor<128x256x!tt.ptr<f8E4M3FNUZ>, #blocked1>, tensor<128x256xi32, #blocked1> loc(#loc41)
    %67 = tt.load %arg3 : !tt.ptr<f32> loc(#loc42)
    %68 = tt.addptr %arg4, %54 : !tt.ptr<f32>, i32 loc(#loc43)
    %69 = tt.load %68 : !tt.ptr<f32> loc(#loc44)
    %70 = arith.addi %arg10, %c127_i32 : i32 loc(#loc74)
    %71 = arith.divsi %70, %c128_i32 : i32 loc(#loc75)
    %72 = tt.expand_dims %33 {axis = 1 : i32} : tensor<256xi1, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi1, #blocked> loc(#loc46)
    %73 = tt.broadcast %72 : tensor<256x1xi1, #blocked> -> tensor<256x128xi1, #blocked> loc(#loc47)
    %74 = tt.fp_to_fp %cst_0, rounding = rtne : tensor<256x128xf32, #blocked> -> tensor<256x128xf8E4M3FNUZ, #blocked> loc(#loc47)
    %75 = tt.load %52, %73, %74 : tensor<256x128x!tt.ptr<f8E4M3FNUZ>, #blocked> loc(#loc47)
    %76 = triton_gpu.local_alloc %75 : (tensor<256x128xf8E4M3FNUZ, #blocked>) -> !tt.memdesc<256x128xf8E4M3FNUZ, #shared, #triton_gpu.shared_memory> loc(#loc47)
    %77 = tt.load %66 : tensor<128x256x!tt.ptr<f8E4M3FNUZ>, #blocked1> loc(#loc48)
    %78 = triton_gpu.local_alloc %77 : (tensor<128x256xf8E4M3FNUZ, #blocked1>) -> !tt.memdesc<128x256xf8E4M3FNUZ, #shared1, #triton_gpu.shared_memory> loc(#loc48)
    %79 = tt.addptr %52, %cst_1 : tensor<256x128x!tt.ptr<f8E4M3FNUZ>, #blocked>, tensor<256x128xi32, #blocked> loc(#loc49)
    %80 = tt.addptr %66, %cst_2 : tensor<128x256x!tt.ptr<f8E4M3FNUZ>, #blocked1>, tensor<128x256xi32, #blocked1> loc(#loc50)
    %81 = arith.subi %71, %c1_i32 : i32 loc(#loc51)
    %82:3 = scf.for %arg17 = %c0_i32 to %81 step %c1_i32 iter_args(%arg18 = %cst, %arg19 = %79, %arg20 = %80) -> (tensor<256x256xf32, #mma>, tensor<256x128x!tt.ptr<f8E4M3FNUZ>, #blocked>, tensor<128x256x!tt.ptr<f8E4M3FNUZ>, #blocked1>)  : i32 {
      %111 = tt.load %arg19, %73, %74 : tensor<256x128x!tt.ptr<f8E4M3FNUZ>, #blocked> loc(#loc47)
      %112 = tt.load %arg20 : tensor<128x256x!tt.ptr<f8E4M3FNUZ>, #blocked1> loc(#loc48)
      %113 = triton_gpu.local_load %76 : !tt.memdesc<256x128xf8E4M3FNUZ, #shared, #triton_gpu.shared_memory> -> tensor<256x128xf8E4M3FNUZ, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc47)
      %114 = triton_gpu.local_load %78 : !tt.memdesc<128x256xf8E4M3FNUZ, #shared1, #triton_gpu.shared_memory> -> tensor<128x256xf8E4M3FNUZ, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc48)
      %115 = tt.dot %113, %114, %arg18 : tensor<256x128xf8E4M3FNUZ, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> * tensor<128x256xf8E4M3FNUZ, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> -> tensor<256x256xf32, #mma> loc(#loc52)
      %116 = tt.addptr %arg19, %cst_1 : tensor<256x128x!tt.ptr<f8E4M3FNUZ>, #blocked>, tensor<256x128xi32, #blocked> loc(#loc49)
      %117 = tt.addptr %arg20, %cst_2 : tensor<128x256x!tt.ptr<f8E4M3FNUZ>, #blocked1>, tensor<128x256xi32, #blocked1> loc(#loc50)
      triton_gpu.local_store %111, %76 : tensor<256x128xf8E4M3FNUZ, #blocked> -> !tt.memdesc<256x128xf8E4M3FNUZ, #shared, #triton_gpu.shared_memory> loc(#loc47)
      triton_gpu.local_store %112, %78 : tensor<128x256xf8E4M3FNUZ, #blocked1> -> !tt.memdesc<128x256xf8E4M3FNUZ, #shared1, #triton_gpu.shared_memory> loc(#loc48)
      scf.yield %115, %116, %117 : tensor<256x256xf32, #mma>, tensor<256x128x!tt.ptr<f8E4M3FNUZ>, #blocked>, tensor<128x256x!tt.ptr<f8E4M3FNUZ>, #blocked1> loc(#loc53)
    } loc(#loc51)
    %83 = triton_gpu.local_load %76 : !tt.memdesc<256x128xf8E4M3FNUZ, #shared, #triton_gpu.shared_memory> -> tensor<256x128xf8E4M3FNUZ, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc47)
    %84 = triton_gpu.local_load %78 : !tt.memdesc<128x256xf8E4M3FNUZ, #shared1, #triton_gpu.shared_memory> -> tensor<128x256xf8E4M3FNUZ, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc48)
    %85 = tt.dot %83, %84, %82#0 : tensor<256x128xf8E4M3FNUZ, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> * tensor<128x256xf8E4M3FNUZ, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> -> tensor<256x256xf32, #mma> loc(#loc52)
    %86 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc54)
    %87 = tt.addptr %86, %30 : tensor<256x!tt.ptr<f32>, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc54)
    %88 = tt.load %87, %34, %cst_3 : tensor<256x!tt.ptr<f32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc55)
    %89 = tt.expand_dims %88 {axis = 1 : i32} : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xf32, #mma> loc(#loc56)
    %90 = tt.broadcast %89 : tensor<256x1xf32, #mma> -> tensor<256x256xf32, #mma> loc(#loc57)
    %91 = arith.mulf %85, %90 : tensor<256x256xf32, #mma> loc(#loc57)
    %92 = tt.splat %67 : f32 -> tensor<256x256xf32, #mma> loc(#loc58)
    %93 = arith.mulf %91, %92 : tensor<256x256xf32, #mma> loc(#loc58)
    %94 = tt.splat %69 : f32 -> tensor<256x256xf32, #mma> loc(#loc59)
    %95 = arith.mulf %93, %94 : tensor<256x256xf32, #mma> loc(#loc59)
    %96 = arith.truncf %95 : tensor<256x256xf32, #mma> to tensor<256x256xf16, #mma> loc(#loc60)
    %97 = tt.splat %arg16 : i32 -> tensor<256x1xi32, #mma> loc(#loc61)
    %98 = arith.muli %97, %43 : tensor<256x1xi32, #mma> loc(#loc61)
    %99 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #mma> loc(#loc62)
    %100 = tt.addptr %99, %98 : tensor<256x1x!tt.ptr<f16>, #mma>, tensor<256x1xi32, #mma> loc(#loc62)
    %101 = tt.expand_dims %39 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x256xi32, #mma> loc(#loc63)
    %102 = tt.broadcast %100 : tensor<256x1x!tt.ptr<f16>, #mma> -> tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc64)
    %103 = tt.broadcast %101 : tensor<1x256xi32, #mma> -> tensor<256x256xi32, #mma> loc(#loc64)
    %104 = tt.addptr %102, %103 : tensor<256x256x!tt.ptr<f16>, #mma>, tensor<256x256xi32, #mma> loc(#loc64)
    %105 = tt.expand_dims %34 {axis = 1 : i32} : tensor<256xi1, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi1, #mma> loc(#loc65)
    %106 = tt.splat %arg9 : i32 -> tensor<1x256xi32, #mma> loc(#loc66)
    %107 = arith.cmpi slt, %101, %106 : tensor<1x256xi32, #mma> loc(#loc66)
    %108 = tt.broadcast %105 : tensor<256x1xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc67)
    %109 = tt.broadcast %107 : tensor<1x256xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc67)
    %110 = arith.andi %108, %109 : tensor<256x256xi1, #mma> loc(#loc67)
    tt.store %104, %96, %110 : tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc68)
    tt.return loc(#loc69)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":86:24)
#loc3 = loc("/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":87:28)
#loc5 = loc("/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":88:27)
#loc7 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":89:38)
#loc8 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":90:22)
#loc9 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":91:29)
#loc10 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":92:35)
#loc11 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":92:48)
#loc12 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":93:34)
#loc13 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":93:54)
#loc14 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":93:27)
#loc15 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":94:40)
#loc16 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":102:37)
#loc17 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":103:15)
#loc18 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":103:31)
#loc19 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":104:8)
#loc20 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":105:56)
#loc21 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":105:43)
#loc22 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":106:48)
#loc23 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":106:25)
#loc24 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":107:30)
#loc25 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":109:23)
#loc26 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":109:38)
#loc27 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":109:68)
#loc28 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":112:19)
#loc29 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":112:39)
#loc30 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":112:58)
#loc31 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":112:51)
#loc32 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":112:8)
#loc33 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":115:43)
#loc34 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":115:26)
#loc35 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":118:24)
#loc36 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":118:10)
#loc37 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":119:18)
#loc38 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":119:49)
#loc39 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":119:60)
#loc40 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":119:41)
#loc41 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":119:11)
#loc42 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":123:26)
#loc43 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":124:40)
#loc44 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":124:26)
#loc45 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":133:33)
#loc46 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":138:28)
#loc47 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":137:12)
#loc48 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":141:20)
#loc49 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":148:18)
#loc50 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":149:18)
#loc51 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":133:22)
#loc52 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":144:36)
#loc53 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":149:8)
#loc54 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":152:48)
#loc55 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":152:29)
#loc56 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":153:47)
#loc57 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":153:36)
#loc58 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":156:37)
#loc59 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":156:47)
#loc60 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":156:59)
#loc61 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":162:33)
#loc62 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":162:21)
#loc63 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":162:75)
#loc64 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":162:55)
#loc65 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":163:24)
#loc66 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":163:55)
#loc67 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":163:36)
#loc68 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":164:21)
#loc69 = loc("/sglang/python/sglang/srt/layers/fused_moe/fused_moe.py":164:4)
#loc70 = loc(callsite(#loc3 at #loc4))
#loc71 = loc(callsite(#loc5 at #loc4))
#loc72 = loc(callsite(#loc3 at #loc6))
#loc73 = loc(callsite(#loc5 at #loc6))
#loc74 = loc(callsite(#loc3 at #loc45))
#loc75 = loc(callsite(#loc5 at #loc45))
