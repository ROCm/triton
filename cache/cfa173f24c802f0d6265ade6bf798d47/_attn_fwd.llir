; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define amdgpu_kernel void @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture readonly %1, ptr addrspace(1) nocapture readonly %2, float %3, ptr addrspace(1) nocapture writeonly %4, ptr addrspace(1) nocapture writeonly %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19, i32 %20) local_unnamed_addr #0 !dbg !9 {
  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !12
  %23 = and i32 %22, 63, !dbg !12
  %24 = lshr i32 %22, 6, !dbg !12
  %25 = and i32 %24, 3, !dbg !12
  %26 = lshr i32 %23, 3, !dbg !12
  %27 = shl nuw nsw i32 %25, 3, !dbg !12
  %28 = or i32 %27, %26, !dbg !12
  %29 = or i32 %28, 32, !dbg !12
  %30 = or i32 %28, 64, !dbg !12
  %31 = or i32 %28, 96, !dbg !12
  %32 = and i32 %22, 127, !dbg !12
  %33 = shl i32 %22, 3, !dbg !13
  %34 = and i32 %33, 56, !dbg !13
  %35 = or i32 %34, 2, !dbg !13
  %36 = or i32 %34, 4, !dbg !13
  %37 = or i32 %34, 6, !dbg !13
  %38 = shl nuw nsw i32 %25, 5, !dbg !14
  %39 = and i32 %22, 31, !dbg !14
  %40 = or i32 %38, %39, !dbg !14
  %41 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !15
  %42 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !16
  %43 = mul i32 %42, %7, !dbg !17
  %44 = sext i32 %43 to i64, !dbg !18
  %45 = getelementptr half, ptr addrspace(1) %0, i64 %44, !dbg !18
  %46 = shl i32 %41, 7, !dbg !19
  %47 = sext i32 %8 to i64, !dbg !20
  %48 = sext i32 %46 to i64, !dbg !20
  %49 = getelementptr half, ptr addrspace(1) %2, i64 %44, !dbg !21
  %50 = sext i32 %14 to i64, !dbg !22
  %51 = getelementptr half, ptr addrspace(1) %1, i64 %44, !dbg !23
  %52 = sext i32 %11 to i64, !dbg !24
  %53 = or i32 %46, %32, !dbg !25
  %54 = fmul float %3, 0x3FF7154760000000, !dbg !26
  %55 = zext i32 %28 to i64
  %56 = zext i32 %29 to i64
  %57 = zext i32 %30 to i64
  %58 = zext i32 %31 to i64
  %59 = or i64 %55, %48, !dbg !13
  %60 = or i64 %56, %48, !dbg !13
  %61 = or i64 %57, %48, !dbg !13
  %62 = or i64 %58, %48, !dbg !13
  %63 = mul nsw i64 %59, %47, !dbg !13
  %64 = mul nsw i64 %60, %47, !dbg !13
  %65 = mul nsw i64 %61, %47, !dbg !13
  %66 = mul nsw i64 %62, %47, !dbg !13
  %67 = getelementptr half, ptr addrspace(1) %45, i64 %63, !dbg !13
  %68 = getelementptr half, ptr addrspace(1) %45, i64 %64, !dbg !13
  %69 = getelementptr half, ptr addrspace(1) %45, i64 %65, !dbg !13
  %70 = getelementptr half, ptr addrspace(1) %45, i64 %66, !dbg !13
  %71 = zext i32 %34 to i64
  %72 = zext i32 %35 to i64
  %73 = zext i32 %36 to i64
  %74 = zext i32 %37 to i64
  %75 = getelementptr half, ptr addrspace(1) %67, i64 %71, !dbg !13
  %76 = getelementptr half, ptr addrspace(1) %67, i64 %72, !dbg !13
  %77 = getelementptr half, ptr addrspace(1) %67, i64 %73, !dbg !13
  %78 = getelementptr half, ptr addrspace(1) %67, i64 %74, !dbg !13
  %79 = getelementptr half, ptr addrspace(1) %68, i64 %71, !dbg !13
  %80 = getelementptr half, ptr addrspace(1) %68, i64 %72, !dbg !13
  %81 = getelementptr half, ptr addrspace(1) %68, i64 %73, !dbg !13
  %82 = getelementptr half, ptr addrspace(1) %68, i64 %74, !dbg !13
  %83 = getelementptr half, ptr addrspace(1) %69, i64 %71, !dbg !13
  %84 = getelementptr half, ptr addrspace(1) %69, i64 %72, !dbg !13
  %85 = getelementptr half, ptr addrspace(1) %69, i64 %73, !dbg !13
  %86 = getelementptr half, ptr addrspace(1) %69, i64 %74, !dbg !13
  %87 = getelementptr half, ptr addrspace(1) %70, i64 %71, !dbg !13
  %88 = getelementptr half, ptr addrspace(1) %70, i64 %72, !dbg !13
  %89 = getelementptr half, ptr addrspace(1) %70, i64 %73, !dbg !13
  %90 = getelementptr half, ptr addrspace(1) %70, i64 %74, !dbg !13
  %91 = addrspacecast ptr addrspace(1) %75 to ptr, !dbg !13
  %92 = load <2 x half>, ptr %91, align 4, !dbg !13
  %93 = addrspacecast ptr addrspace(1) %76 to ptr, !dbg !13
  %94 = load half, ptr %93, align 4, !dbg !13
  %95 = getelementptr inbounds <2 x half>, ptr %93, i64 0, i64 1, !dbg !13
  %96 = load half, ptr %95, align 2, !dbg !13
  %97 = addrspacecast ptr addrspace(1) %77 to ptr, !dbg !13
  %98 = load <2 x half>, ptr %97, align 4, !dbg !13
  %99 = addrspacecast ptr addrspace(1) %78 to ptr, !dbg !13
  %100 = load half, ptr %99, align 4, !dbg !13
  %101 = getelementptr inbounds <2 x half>, ptr %99, i64 0, i64 1, !dbg !13
  %102 = load half, ptr %101, align 2, !dbg !13
  %103 = addrspacecast ptr addrspace(1) %79 to ptr, !dbg !13
  %104 = load <2 x half>, ptr %103, align 4, !dbg !13
  %105 = addrspacecast ptr addrspace(1) %80 to ptr, !dbg !13
  %106 = load half, ptr %105, align 4, !dbg !13
  %107 = getelementptr inbounds <2 x half>, ptr %105, i64 0, i64 1, !dbg !13
  %108 = load half, ptr %107, align 2, !dbg !13
  %109 = addrspacecast ptr addrspace(1) %81 to ptr, !dbg !13
  %110 = load <2 x half>, ptr %109, align 4, !dbg !13
  %111 = addrspacecast ptr addrspace(1) %82 to ptr, !dbg !13
  %112 = load half, ptr %111, align 4, !dbg !13
  %113 = getelementptr inbounds <2 x half>, ptr %111, i64 0, i64 1, !dbg !13
  %114 = load half, ptr %113, align 2, !dbg !13
  %115 = addrspacecast ptr addrspace(1) %83 to ptr, !dbg !13
  %116 = load <2 x half>, ptr %115, align 4, !dbg !13
  %117 = addrspacecast ptr addrspace(1) %84 to ptr, !dbg !13
  %118 = load half, ptr %117, align 4, !dbg !13
  %119 = getelementptr inbounds <2 x half>, ptr %117, i64 0, i64 1, !dbg !13
  %120 = load half, ptr %119, align 2, !dbg !13
  %121 = addrspacecast ptr addrspace(1) %85 to ptr, !dbg !13
  %122 = load <2 x half>, ptr %121, align 4, !dbg !13
  %123 = addrspacecast ptr addrspace(1) %86 to ptr, !dbg !13
  %124 = load half, ptr %123, align 4, !dbg !13
  %125 = getelementptr inbounds <2 x half>, ptr %123, i64 0, i64 1, !dbg !13
  %126 = load half, ptr %125, align 2, !dbg !13
  %127 = addrspacecast ptr addrspace(1) %87 to ptr, !dbg !13
  %128 = load <2 x half>, ptr %127, align 4, !dbg !13
  %129 = addrspacecast ptr addrspace(1) %88 to ptr, !dbg !13
  %130 = load half, ptr %129, align 4, !dbg !13
  %131 = getelementptr inbounds <2 x half>, ptr %129, i64 0, i64 1, !dbg !13
  %132 = load half, ptr %131, align 2, !dbg !13
  %133 = addrspacecast ptr addrspace(1) %89 to ptr, !dbg !13
  %134 = load <2 x half>, ptr %133, align 4, !dbg !13
  %135 = addrspacecast ptr addrspace(1) %90 to ptr, !dbg !13
  %136 = load half, ptr %135, align 4, !dbg !13
  %137 = getelementptr inbounds <2 x half>, ptr %135, i64 0, i64 1, !dbg !13
  %138 = load half, ptr %137, align 2, !dbg !13
  %139 = shufflevector <2 x half> %92, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !27
  %140 = insertelement <4 x half> %139, half %94, i64 2, !dbg !27
  %141 = insertelement <4 x half> %140, half %96, i64 3, !dbg !27
  %142 = fpext <4 x half> %141 to <4 x float>, !dbg !27
  %143 = insertelement <4 x float> poison, float %54, i64 0, !dbg !27
  %144 = shufflevector <4 x float> %143, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !27
  %145 = fmul <4 x float> %144, %142, !dbg !27
  %146 = fptrunc <4 x float> %145 to <4 x half>, !dbg !28
  %147 = shufflevector <2 x half> %98, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !27
  %148 = insertelement <4 x half> %147, half %100, i64 2, !dbg !27
  %149 = insertelement <4 x half> %148, half %102, i64 3, !dbg !27
  %150 = fpext <4 x half> %149 to <4 x float>, !dbg !27
  %151 = fmul <4 x float> %144, %150, !dbg !27
  %152 = fptrunc <4 x float> %151 to <4 x half>, !dbg !28
  %153 = shufflevector <2 x half> %104, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !27
  %154 = insertelement <4 x half> %153, half %106, i64 2, !dbg !27
  %155 = insertelement <4 x half> %154, half %108, i64 3, !dbg !27
  %156 = fpext <4 x half> %155 to <4 x float>, !dbg !27
  %157 = fmul <4 x float> %144, %156, !dbg !27
  %158 = fptrunc <4 x float> %157 to <4 x half>, !dbg !28
  %159 = shufflevector <2 x half> %110, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !27
  %160 = insertelement <4 x half> %159, half %112, i64 2, !dbg !27
  %161 = insertelement <4 x half> %160, half %114, i64 3, !dbg !27
  %162 = fpext <4 x half> %161 to <4 x float>, !dbg !27
  %163 = fmul <4 x float> %144, %162, !dbg !27
  %164 = fptrunc <4 x float> %163 to <4 x half>, !dbg !28
  %165 = shufflevector <2 x half> %116, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !27
  %166 = insertelement <4 x half> %165, half %118, i64 2, !dbg !27
  %167 = insertelement <4 x half> %166, half %120, i64 3, !dbg !27
  %168 = fpext <4 x half> %167 to <4 x float>, !dbg !27
  %169 = fmul <4 x float> %144, %168, !dbg !27
  %170 = fptrunc <4 x float> %169 to <4 x half>, !dbg !28
  %171 = shufflevector <2 x half> %122, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !27
  %172 = insertelement <4 x half> %171, half %124, i64 2, !dbg !27
  %173 = insertelement <4 x half> %172, half %126, i64 3, !dbg !27
  %174 = fpext <4 x half> %173 to <4 x float>, !dbg !27
  %175 = fmul <4 x float> %144, %174, !dbg !27
  %176 = fptrunc <4 x float> %175 to <4 x half>, !dbg !28
  %177 = shufflevector <2 x half> %128, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !27
  %178 = insertelement <4 x half> %177, half %130, i64 2, !dbg !27
  %179 = insertelement <4 x half> %178, half %132, i64 3, !dbg !27
  %180 = fpext <4 x half> %179 to <4 x float>, !dbg !27
  %181 = fmul <4 x float> %144, %180, !dbg !27
  %182 = fptrunc <4 x float> %181 to <4 x half>, !dbg !28
  %183 = shufflevector <2 x half> %134, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !27
  %184 = insertelement <4 x half> %183, half %136, i64 2, !dbg !27
  %185 = insertelement <4 x half> %184, half %138, i64 3, !dbg !27
  %186 = fpext <4 x half> %185 to <4 x float>, !dbg !27
  %187 = fmul <4 x float> %144, %186, !dbg !27
  %188 = fptrunc <4 x float> %187 to <4 x half>, !dbg !28
  %189 = shl nuw nsw i32 %28, 6, !dbg !28
  %190 = shl nuw nsw i32 %28, 2, !dbg !28
  %191 = and i32 %190, 60, !dbg !28
  %192 = xor i32 %191, %34, !dbg !28
  %193 = or i32 %192, %189, !dbg !28
  %194 = zext i32 %193 to i64, !dbg !28
  %195 = getelementptr half, ptr addrspace(3) @global_smem, i64 %194, !dbg !28
  %196 = xor i32 %191, %36, !dbg !28
  %197 = or i32 %196, %189, !dbg !28
  %198 = zext i32 %197 to i64, !dbg !28
  %199 = getelementptr half, ptr addrspace(3) @global_smem, i64 %198, !dbg !28
  %200 = getelementptr half, ptr addrspace(3) %195, i64 2048, !dbg !28
  %201 = getelementptr half, ptr addrspace(3) %199, i64 2048, !dbg !28
  %202 = getelementptr half, ptr addrspace(3) %195, i64 4096, !dbg !28
  %203 = getelementptr half, ptr addrspace(3) %199, i64 4096, !dbg !28
  %204 = getelementptr half, ptr addrspace(3) %195, i64 6144, !dbg !28
  %205 = getelementptr half, ptr addrspace(3) %199, i64 6144, !dbg !28
  store <4 x half> %146, ptr addrspace(3) %195, align 8, !dbg !28
  store <4 x half> %152, ptr addrspace(3) %199, align 8, !dbg !28
  store <4 x half> %158, ptr addrspace(3) %200, align 8, !dbg !28
  store <4 x half> %164, ptr addrspace(3) %201, align 8, !dbg !28
  store <4 x half> %170, ptr addrspace(3) %202, align 8, !dbg !28
  store <4 x half> %176, ptr addrspace(3) %203, align 8, !dbg !28
  store <4 x half> %182, ptr addrspace(3) %204, align 8, !dbg !28
  store <4 x half> %188, ptr addrspace(3) %205, align 8, !dbg !28
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %206 = icmp ugt i32 %23, 31, !dbg !28
  %207 = zext i1 %206 to i32, !dbg !28
  %208 = and i32 %22, 15, !dbg !28
  %209 = xor i32 %208, %207, !dbg !28
  %210 = shl nuw nsw i32 %209, 2, !dbg !28
  %211 = shl nuw nsw i32 %40, 6, !dbg !28
  %212 = or i32 %211, %210, !dbg !28
  %213 = or i32 %207, 2, !dbg !28
  %214 = xor i32 %213, %208, !dbg !28
  %215 = shl nuw nsw i32 %214, 2, !dbg !28
  %216 = or i32 %215, %211, !dbg !28
  %217 = or i32 %207, 4, !dbg !28
  %218 = xor i32 %217, %208, !dbg !28
  %219 = shl nuw nsw i32 %218, 2, !dbg !28
  %220 = or i32 %219, %211, !dbg !28
  %221 = or i32 %207, 6, !dbg !28
  %222 = xor i32 %221, %208, !dbg !28
  %223 = shl nuw nsw i32 %222, 2, !dbg !28
  %224 = or i32 %223, %211, !dbg !28
  %225 = or i32 %207, 8, !dbg !28
  %226 = xor i32 %225, %208, !dbg !28
  %227 = shl nuw nsw i32 %226, 2, !dbg !28
  %228 = or i32 %227, %211, !dbg !28
  %229 = or i32 %207, 10, !dbg !28
  %230 = xor i32 %229, %208, !dbg !28
  %231 = shl nuw nsw i32 %230, 2, !dbg !28
  %232 = or i32 %231, %211, !dbg !28
  %233 = or i32 %207, 12, !dbg !28
  %234 = xor i32 %233, %208, !dbg !28
  %235 = shl nuw nsw i32 %234, 2, !dbg !28
  %236 = or i32 %235, %211, !dbg !28
  %237 = or i32 %207, 14, !dbg !28
  %238 = xor i32 %237, %208, !dbg !28
  %239 = shl nuw nsw i32 %238, 2, !dbg !28
  %240 = or i32 %239, %211, !dbg !28
  %241 = zext i32 %212 to i64, !dbg !28
  %242 = getelementptr half, ptr addrspace(3) @global_smem, i64 %241, !dbg !28
  %243 = load <4 x half>, ptr addrspace(3) %242, align 8, !dbg !28
  %244 = zext i32 %216 to i64, !dbg !28
  %245 = getelementptr half, ptr addrspace(3) @global_smem, i64 %244, !dbg !28
  %246 = load <4 x half>, ptr addrspace(3) %245, align 8, !dbg !28
  %247 = zext i32 %220 to i64, !dbg !28
  %248 = getelementptr half, ptr addrspace(3) @global_smem, i64 %247, !dbg !28
  %249 = load <4 x half>, ptr addrspace(3) %248, align 8, !dbg !28
  %250 = zext i32 %224 to i64, !dbg !28
  %251 = getelementptr half, ptr addrspace(3) @global_smem, i64 %250, !dbg !28
  %252 = load <4 x half>, ptr addrspace(3) %251, align 8, !dbg !28
  %253 = zext i32 %228 to i64, !dbg !28
  %254 = getelementptr half, ptr addrspace(3) @global_smem, i64 %253, !dbg !28
  %255 = load <4 x half>, ptr addrspace(3) %254, align 8, !dbg !28
  %256 = zext i32 %232 to i64, !dbg !28
  %257 = getelementptr half, ptr addrspace(3) @global_smem, i64 %256, !dbg !28
  %258 = load <4 x half>, ptr addrspace(3) %257, align 8, !dbg !28
  %259 = zext i32 %236 to i64, !dbg !28
  %260 = getelementptr half, ptr addrspace(3) @global_smem, i64 %259, !dbg !28
  %261 = load <4 x half>, ptr addrspace(3) %260, align 8, !dbg !28
  %262 = zext i32 %240 to i64, !dbg !28
  %263 = getelementptr half, ptr addrspace(3) @global_smem, i64 %262, !dbg !28
  %264 = load <4 x half>, ptr addrspace(3) %263, align 8, !dbg !28
  %265 = getelementptr half, ptr addrspace(1) %51, i64 %71, !dbg !29
  %266 = getelementptr half, ptr addrspace(1) %51, i64 %72, !dbg !29
  %267 = getelementptr half, ptr addrspace(1) %51, i64 %73, !dbg !29
  %268 = getelementptr half, ptr addrspace(1) %51, i64 %74, !dbg !29
  %269 = icmp sgt i32 %20, 0, !dbg !32
  br i1 %269, label %.lr.ph, label %._crit_edge, !dbg !32

.lr.ph:                                           ; preds = %21
  %270 = shl nuw nsw i32 %39, 6
  %271 = or i32 %210, %270
  %272 = or i32 %215, %270
  %273 = or i32 %219, %270
  %274 = or i32 %223, %270
  %275 = or i32 %227, %270
  %276 = or i32 %231, %270
  %277 = or i32 %235, %270
  %278 = or i32 %239, %270
  %279 = or i32 %270, 2048
  %280 = or i32 %210, %279
  %281 = or i32 %215, %279
  %282 = or i32 %219, %279
  %283 = or i32 %223, %279
  %284 = or i32 %227, %279
  %285 = or i32 %231, %279
  %286 = or i32 %235, %279
  %287 = or i32 %239, %279
  %288 = zext i32 %271 to i64
  %289 = getelementptr half, ptr addrspace(3) @global_smem, i64 %288
  %290 = zext i32 %272 to i64
  %291 = getelementptr half, ptr addrspace(3) @global_smem, i64 %290
  %292 = zext i32 %273 to i64
  %293 = getelementptr half, ptr addrspace(3) @global_smem, i64 %292
  %294 = zext i32 %274 to i64
  %295 = getelementptr half, ptr addrspace(3) @global_smem, i64 %294
  %296 = zext i32 %275 to i64
  %297 = getelementptr half, ptr addrspace(3) @global_smem, i64 %296
  %298 = zext i32 %276 to i64
  %299 = getelementptr half, ptr addrspace(3) @global_smem, i64 %298
  %300 = zext i32 %277 to i64
  %301 = getelementptr half, ptr addrspace(3) @global_smem, i64 %300
  %302 = zext i32 %278 to i64
  %303 = getelementptr half, ptr addrspace(3) @global_smem, i64 %302
  %304 = zext i32 %280 to i64
  %305 = getelementptr half, ptr addrspace(3) @global_smem, i64 %304
  %306 = zext i32 %281 to i64
  %307 = getelementptr half, ptr addrspace(3) @global_smem, i64 %306
  %308 = zext i32 %282 to i64
  %309 = getelementptr half, ptr addrspace(3) @global_smem, i64 %308
  %310 = zext i32 %283 to i64
  %311 = getelementptr half, ptr addrspace(3) @global_smem, i64 %310
  %312 = zext i32 %284 to i64
  %313 = getelementptr half, ptr addrspace(3) @global_smem, i64 %312
  %314 = zext i32 %285 to i64
  %315 = getelementptr half, ptr addrspace(3) @global_smem, i64 %314
  %316 = zext i32 %286 to i64
  %317 = getelementptr half, ptr addrspace(3) @global_smem, i64 %316
  %318 = zext i32 %287 to i64
  %319 = getelementptr half, ptr addrspace(3) @global_smem, i64 %318
  %320 = shl i32 %22, 2
  %321 = add i32 %320, 128
  %322 = or i32 %189, %34
  %323 = zext i32 %322 to i64
  %324 = getelementptr half, ptr addrspace(3) @global_smem, i64 %323
  %325 = getelementptr half, ptr addrspace(3) %324, i64 1
  %326 = getelementptr half, ptr addrspace(3) %324, i64 2
  %327 = getelementptr half, ptr addrspace(3) %324, i64 3
  %328 = getelementptr half, ptr addrspace(3) %324, i64 4
  %329 = getelementptr half, ptr addrspace(3) %324, i64 5
  %330 = getelementptr half, ptr addrspace(3) %324, i64 6
  %331 = getelementptr half, ptr addrspace(3) %324, i64 7
  %332 = getelementptr half, ptr addrspace(3) %324, i64 2048
  %333 = getelementptr half, ptr addrspace(3) %324, i64 2049
  %334 = getelementptr half, ptr addrspace(3) %324, i64 2050
  %335 = getelementptr half, ptr addrspace(3) %324, i64 2051
  %336 = getelementptr half, ptr addrspace(3) %324, i64 2052
  %337 = getelementptr half, ptr addrspace(3) %324, i64 2053
  %338 = getelementptr half, ptr addrspace(3) %324, i64 2054
  %339 = getelementptr half, ptr addrspace(3) %324, i64 2055
  %340 = select i1 %206, i32 256, i32 0
  %341 = or i32 %340, %39
  %342 = or i32 %341, 64
  %343 = or i32 %341, 128
  %344 = or i32 %341, 192
  %345 = or i32 %341, 512
  %346 = or i32 %341, 576
  %347 = or i32 %341, 640
  %348 = or i32 %341, 704
  %349 = or i32 %341, 1024
  %350 = or i32 %341, 1088
  %351 = or i32 %341, 1152
  %352 = or i32 %341, 1216
  %353 = or i32 %341, 1536
  %354 = or i32 %341, 1600
  %355 = or i32 %341, 1664
  %356 = or i32 %341, 1728
  %357 = or i32 %341, 2048
  %358 = or i32 %341, 2112
  %359 = or i32 %341, 2176
  %360 = or i32 %341, 2240
  %361 = or i32 %341, 2560
  %362 = or i32 %341, 2624
  %363 = or i32 %341, 2688
  %364 = or i32 %341, 2752
  %365 = or i32 %341, 3072
  %366 = or i32 %341, 3136
  %367 = or i32 %341, 3200
  %368 = or i32 %341, 3264
  %369 = or i32 %341, 3584
  %370 = or i32 %341, 3648
  %371 = or i32 %341, 3712
  %372 = or i32 %341, 3776
  %373 = or i32 %341, 32
  %374 = or i32 %341, 96
  %375 = or i32 %341, 160
  %376 = or i32 %341, 224
  %377 = or i32 %341, 544
  %378 = or i32 %341, 608
  %379 = or i32 %341, 672
  %380 = or i32 %341, 736
  %381 = or i32 %341, 1056
  %382 = or i32 %341, 1120
  %383 = or i32 %341, 1184
  %384 = or i32 %341, 1248
  %385 = or i32 %341, 1568
  %386 = or i32 %341, 1632
  %387 = or i32 %341, 1696
  %388 = or i32 %341, 1760
  %389 = or i32 %341, 2080
  %390 = or i32 %341, 2144
  %391 = or i32 %341, 2208
  %392 = or i32 %341, 2272
  %393 = or i32 %341, 2592
  %394 = or i32 %341, 2656
  %395 = or i32 %341, 2720
  %396 = or i32 %341, 2784
  %397 = or i32 %341, 3104
  %398 = or i32 %341, 3168
  %399 = or i32 %341, 3232
  %400 = or i32 %341, 3296
  %401 = or i32 %341, 3616
  %402 = or i32 %341, 3680
  %403 = or i32 %341, 3744
  %404 = or i32 %341, 3808
  %405 = zext i32 %341 to i64
  %406 = getelementptr half, ptr addrspace(3) @global_smem, i64 %405
  %407 = zext i32 %342 to i64
  %408 = getelementptr half, ptr addrspace(3) @global_smem, i64 %407
  %409 = zext i32 %343 to i64
  %410 = getelementptr half, ptr addrspace(3) @global_smem, i64 %409
  %411 = zext i32 %344 to i64
  %412 = getelementptr half, ptr addrspace(3) @global_smem, i64 %411
  %413 = zext i32 %345 to i64
  %414 = getelementptr half, ptr addrspace(3) @global_smem, i64 %413
  %415 = zext i32 %346 to i64
  %416 = getelementptr half, ptr addrspace(3) @global_smem, i64 %415
  %417 = zext i32 %347 to i64
  %418 = getelementptr half, ptr addrspace(3) @global_smem, i64 %417
  %419 = zext i32 %348 to i64
  %420 = getelementptr half, ptr addrspace(3) @global_smem, i64 %419
  %421 = zext i32 %349 to i64
  %422 = getelementptr half, ptr addrspace(3) @global_smem, i64 %421
  %423 = zext i32 %350 to i64
  %424 = getelementptr half, ptr addrspace(3) @global_smem, i64 %423
  %425 = zext i32 %351 to i64
  %426 = getelementptr half, ptr addrspace(3) @global_smem, i64 %425
  %427 = zext i32 %352 to i64
  %428 = getelementptr half, ptr addrspace(3) @global_smem, i64 %427
  %429 = zext i32 %353 to i64
  %430 = getelementptr half, ptr addrspace(3) @global_smem, i64 %429
  %431 = zext i32 %354 to i64
  %432 = getelementptr half, ptr addrspace(3) @global_smem, i64 %431
  %433 = zext i32 %355 to i64
  %434 = getelementptr half, ptr addrspace(3) @global_smem, i64 %433
  %435 = zext i32 %356 to i64
  %436 = getelementptr half, ptr addrspace(3) @global_smem, i64 %435
  %437 = zext i32 %357 to i64
  %438 = getelementptr half, ptr addrspace(3) @global_smem, i64 %437
  %439 = zext i32 %358 to i64
  %440 = getelementptr half, ptr addrspace(3) @global_smem, i64 %439
  %441 = zext i32 %359 to i64
  %442 = getelementptr half, ptr addrspace(3) @global_smem, i64 %441
  %443 = zext i32 %360 to i64
  %444 = getelementptr half, ptr addrspace(3) @global_smem, i64 %443
  %445 = zext i32 %361 to i64
  %446 = getelementptr half, ptr addrspace(3) @global_smem, i64 %445
  %447 = zext i32 %362 to i64
  %448 = getelementptr half, ptr addrspace(3) @global_smem, i64 %447
  %449 = zext i32 %363 to i64
  %450 = getelementptr half, ptr addrspace(3) @global_smem, i64 %449
  %451 = zext i32 %364 to i64
  %452 = getelementptr half, ptr addrspace(3) @global_smem, i64 %451
  %453 = zext i32 %365 to i64
  %454 = getelementptr half, ptr addrspace(3) @global_smem, i64 %453
  %455 = zext i32 %366 to i64
  %456 = getelementptr half, ptr addrspace(3) @global_smem, i64 %455
  %457 = zext i32 %367 to i64
  %458 = getelementptr half, ptr addrspace(3) @global_smem, i64 %457
  %459 = zext i32 %368 to i64
  %460 = getelementptr half, ptr addrspace(3) @global_smem, i64 %459
  %461 = zext i32 %369 to i64
  %462 = getelementptr half, ptr addrspace(3) @global_smem, i64 %461
  %463 = zext i32 %370 to i64
  %464 = getelementptr half, ptr addrspace(3) @global_smem, i64 %463
  %465 = zext i32 %371 to i64
  %466 = getelementptr half, ptr addrspace(3) @global_smem, i64 %465
  %467 = zext i32 %372 to i64
  %468 = getelementptr half, ptr addrspace(3) @global_smem, i64 %467
  %469 = zext i32 %373 to i64
  %470 = getelementptr half, ptr addrspace(3) @global_smem, i64 %469
  %471 = zext i32 %374 to i64
  %472 = getelementptr half, ptr addrspace(3) @global_smem, i64 %471
  %473 = zext i32 %375 to i64
  %474 = getelementptr half, ptr addrspace(3) @global_smem, i64 %473
  %475 = zext i32 %376 to i64
  %476 = getelementptr half, ptr addrspace(3) @global_smem, i64 %475
  %477 = zext i32 %377 to i64
  %478 = getelementptr half, ptr addrspace(3) @global_smem, i64 %477
  %479 = zext i32 %378 to i64
  %480 = getelementptr half, ptr addrspace(3) @global_smem, i64 %479
  %481 = zext i32 %379 to i64
  %482 = getelementptr half, ptr addrspace(3) @global_smem, i64 %481
  %483 = zext i32 %380 to i64
  %484 = getelementptr half, ptr addrspace(3) @global_smem, i64 %483
  %485 = zext i32 %381 to i64
  %486 = getelementptr half, ptr addrspace(3) @global_smem, i64 %485
  %487 = zext i32 %382 to i64
  %488 = getelementptr half, ptr addrspace(3) @global_smem, i64 %487
  %489 = zext i32 %383 to i64
  %490 = getelementptr half, ptr addrspace(3) @global_smem, i64 %489
  %491 = zext i32 %384 to i64
  %492 = getelementptr half, ptr addrspace(3) @global_smem, i64 %491
  %493 = zext i32 %385 to i64
  %494 = getelementptr half, ptr addrspace(3) @global_smem, i64 %493
  %495 = zext i32 %386 to i64
  %496 = getelementptr half, ptr addrspace(3) @global_smem, i64 %495
  %497 = zext i32 %387 to i64
  %498 = getelementptr half, ptr addrspace(3) @global_smem, i64 %497
  %499 = zext i32 %388 to i64
  %500 = getelementptr half, ptr addrspace(3) @global_smem, i64 %499
  %501 = zext i32 %389 to i64
  %502 = getelementptr half, ptr addrspace(3) @global_smem, i64 %501
  %503 = zext i32 %390 to i64
  %504 = getelementptr half, ptr addrspace(3) @global_smem, i64 %503
  %505 = zext i32 %391 to i64
  %506 = getelementptr half, ptr addrspace(3) @global_smem, i64 %505
  %507 = zext i32 %392 to i64
  %508 = getelementptr half, ptr addrspace(3) @global_smem, i64 %507
  %509 = zext i32 %393 to i64
  %510 = getelementptr half, ptr addrspace(3) @global_smem, i64 %509
  %511 = zext i32 %394 to i64
  %512 = getelementptr half, ptr addrspace(3) @global_smem, i64 %511
  %513 = zext i32 %395 to i64
  %514 = getelementptr half, ptr addrspace(3) @global_smem, i64 %513
  %515 = zext i32 %396 to i64
  %516 = getelementptr half, ptr addrspace(3) @global_smem, i64 %515
  %517 = zext i32 %397 to i64
  %518 = getelementptr half, ptr addrspace(3) @global_smem, i64 %517
  %519 = zext i32 %398 to i64
  %520 = getelementptr half, ptr addrspace(3) @global_smem, i64 %519
  %521 = zext i32 %399 to i64
  %522 = getelementptr half, ptr addrspace(3) @global_smem, i64 %521
  %523 = zext i32 %400 to i64
  %524 = getelementptr half, ptr addrspace(3) @global_smem, i64 %523
  %525 = zext i32 %401 to i64
  %526 = getelementptr half, ptr addrspace(3) @global_smem, i64 %525
  %527 = zext i32 %402 to i64
  %528 = getelementptr half, ptr addrspace(3) @global_smem, i64 %527
  %529 = zext i32 %403 to i64
  %530 = getelementptr half, ptr addrspace(3) @global_smem, i64 %529
  %531 = zext i32 %404 to i64
  %532 = getelementptr half, ptr addrspace(3) @global_smem, i64 %531
  br label %533, !dbg !32

533:                                              ; preds = %.lr.ph, %533
  %534 = phi i64 [ 0, %.lr.ph ], [ %1038, %533 ]
  %535 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %669, %533 ]
  %536 = phi float [ 1.000000e+00, %.lr.ph ], [ %1037, %533 ]
  %537 = phi i32 [ 0, %.lr.ph ], [ %1039, %533 ]
  %538 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %999, %533 ]
  %539 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %991, %533 ]
  %540 = or i64 %534, %55, !dbg !29
  %541 = or i64 %534, %56, !dbg !29
  %542 = mul i64 %540, %52, !dbg !29
  %543 = mul i64 %541, %52, !dbg !29
  %544 = getelementptr half, ptr addrspace(1) %265, i64 %542, !dbg !29
  %545 = getelementptr half, ptr addrspace(1) %266, i64 %542, !dbg !29
  %546 = getelementptr half, ptr addrspace(1) %267, i64 %542, !dbg !29
  %547 = getelementptr half, ptr addrspace(1) %268, i64 %542, !dbg !29
  %548 = getelementptr half, ptr addrspace(1) %265, i64 %543, !dbg !29
  %549 = getelementptr half, ptr addrspace(1) %266, i64 %543, !dbg !29
  %550 = getelementptr half, ptr addrspace(1) %267, i64 %543, !dbg !29
  %551 = getelementptr half, ptr addrspace(1) %268, i64 %543, !dbg !29
  %552 = addrspacecast ptr addrspace(1) %544 to ptr, !dbg !29
  %553 = load <2 x half>, ptr %552, align 4, !dbg !29
  %554 = addrspacecast ptr addrspace(1) %545 to ptr, !dbg !29
  %555 = load <2 x half>, ptr %554, align 4, !dbg !29
  %556 = addrspacecast ptr addrspace(1) %546 to ptr, !dbg !29
  %557 = load <2 x half>, ptr %556, align 4, !dbg !29
  %558 = addrspacecast ptr addrspace(1) %547 to ptr, !dbg !29
  %559 = load <2 x half>, ptr %558, align 4, !dbg !29
  %560 = addrspacecast ptr addrspace(1) %548 to ptr, !dbg !29
  %561 = load <2 x half>, ptr %560, align 4, !dbg !29
  %562 = addrspacecast ptr addrspace(1) %549 to ptr, !dbg !29
  %563 = load <2 x half>, ptr %562, align 4, !dbg !29
  %564 = addrspacecast ptr addrspace(1) %550 to ptr, !dbg !29
  %565 = load <2 x half>, ptr %564, align 4, !dbg !29
  %566 = addrspacecast ptr addrspace(1) %551 to ptr, !dbg !29
  %567 = load <2 x half>, ptr %566, align 4, !dbg !29
  fence syncscope("workgroup") release, !dbg !29
  tail call void @llvm.amdgcn.s.barrier(), !dbg !29
  fence syncscope("workgroup") acquire, !dbg !29
  %568 = shufflevector <2 x half> %553, <2 x half> %555, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !29
  store <4 x half> %568, ptr addrspace(3) %195, align 8, !dbg !29
  %569 = shufflevector <2 x half> %557, <2 x half> %559, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !29
  store <4 x half> %569, ptr addrspace(3) %199, align 8, !dbg !29
  %570 = shufflevector <2 x half> %561, <2 x half> %563, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !29
  store <4 x half> %570, ptr addrspace(3) %200, align 8, !dbg !29
  %571 = shufflevector <2 x half> %565, <2 x half> %567, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !29
  store <4 x half> %571, ptr addrspace(3) %201, align 8, !dbg !29
  fence syncscope("workgroup") release, !dbg !29
  tail call void @llvm.amdgcn.s.barrier(), !dbg !29
  fence syncscope("workgroup") acquire, !dbg !29
  %572 = load <4 x half>, ptr addrspace(3) %289, align 8, !dbg !29
  %573 = load <4 x half>, ptr addrspace(3) %291, align 8, !dbg !29
  %574 = load <4 x half>, ptr addrspace(3) %293, align 8, !dbg !29
  %575 = load <4 x half>, ptr addrspace(3) %295, align 8, !dbg !29
  %576 = load <4 x half>, ptr addrspace(3) %297, align 8, !dbg !29
  %577 = load <4 x half>, ptr addrspace(3) %299, align 8, !dbg !29
  %578 = load <4 x half>, ptr addrspace(3) %301, align 8, !dbg !29
  %579 = load <4 x half>, ptr addrspace(3) %303, align 8, !dbg !29
  %580 = load <4 x half>, ptr addrspace(3) %305, align 8, !dbg !29
  %581 = load <4 x half>, ptr addrspace(3) %307, align 8, !dbg !29
  %582 = load <4 x half>, ptr addrspace(3) %309, align 8, !dbg !29
  %583 = load <4 x half>, ptr addrspace(3) %311, align 8, !dbg !29
  %584 = load <4 x half>, ptr addrspace(3) %313, align 8, !dbg !29
  %585 = load <4 x half>, ptr addrspace(3) %315, align 8, !dbg !29
  %586 = load <4 x half>, ptr addrspace(3) %317, align 8, !dbg !29
  %587 = load <4 x half>, ptr addrspace(3) %319, align 8, !dbg !29
  %588 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %572, <4 x half> %243, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !33
  %589 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %573, <4 x half> %246, <16 x float> %588, i32 0, i32 0, i32 0), !dbg !33
  %590 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %574, <4 x half> %249, <16 x float> %589, i32 0, i32 0, i32 0), !dbg !33
  %591 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %575, <4 x half> %252, <16 x float> %590, i32 0, i32 0, i32 0), !dbg !33
  %592 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %576, <4 x half> %255, <16 x float> %591, i32 0, i32 0, i32 0), !dbg !33
  %593 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %577, <4 x half> %258, <16 x float> %592, i32 0, i32 0, i32 0), !dbg !33
  %594 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %578, <4 x half> %261, <16 x float> %593, i32 0, i32 0, i32 0), !dbg !33
  %595 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %579, <4 x half> %264, <16 x float> %594, i32 0, i32 0, i32 0), !dbg !33
  %596 = extractelement <16 x float> %595, i64 0, !dbg !33
  %597 = extractelement <16 x float> %595, i64 1, !dbg !33
  %598 = extractelement <16 x float> %595, i64 2, !dbg !33
  %599 = extractelement <16 x float> %595, i64 3, !dbg !33
  %600 = extractelement <16 x float> %595, i64 4, !dbg !33
  %601 = extractelement <16 x float> %595, i64 5, !dbg !33
  %602 = extractelement <16 x float> %595, i64 6, !dbg !33
  %603 = extractelement <16 x float> %595, i64 7, !dbg !33
  %604 = extractelement <16 x float> %595, i64 8, !dbg !33
  %605 = extractelement <16 x float> %595, i64 9, !dbg !33
  %606 = extractelement <16 x float> %595, i64 10, !dbg !33
  %607 = extractelement <16 x float> %595, i64 11, !dbg !33
  %608 = extractelement <16 x float> %595, i64 12, !dbg !33
  %609 = extractelement <16 x float> %595, i64 13, !dbg !33
  %610 = extractelement <16 x float> %595, i64 14, !dbg !33
  %611 = extractelement <16 x float> %595, i64 15, !dbg !33
  %612 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %580, <4 x half> %243, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !33
  %613 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %581, <4 x half> %246, <16 x float> %612, i32 0, i32 0, i32 0), !dbg !33
  %614 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %582, <4 x half> %249, <16 x float> %613, i32 0, i32 0, i32 0), !dbg !33
  %615 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %583, <4 x half> %252, <16 x float> %614, i32 0, i32 0, i32 0), !dbg !33
  %616 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %584, <4 x half> %255, <16 x float> %615, i32 0, i32 0, i32 0), !dbg !33
  %617 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %585, <4 x half> %258, <16 x float> %616, i32 0, i32 0, i32 0), !dbg !33
  %618 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %586, <4 x half> %261, <16 x float> %617, i32 0, i32 0, i32 0), !dbg !33
  %619 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %587, <4 x half> %264, <16 x float> %618, i32 0, i32 0, i32 0), !dbg !33
  %620 = extractelement <16 x float> %619, i64 0, !dbg !33
  %621 = extractelement <16 x float> %619, i64 1, !dbg !33
  %622 = extractelement <16 x float> %619, i64 2, !dbg !33
  %623 = extractelement <16 x float> %619, i64 3, !dbg !33
  %624 = extractelement <16 x float> %619, i64 4, !dbg !33
  %625 = extractelement <16 x float> %619, i64 5, !dbg !33
  %626 = extractelement <16 x float> %619, i64 6, !dbg !33
  %627 = extractelement <16 x float> %619, i64 7, !dbg !33
  %628 = extractelement <16 x float> %619, i64 8, !dbg !33
  %629 = extractelement <16 x float> %619, i64 9, !dbg !33
  %630 = extractelement <16 x float> %619, i64 10, !dbg !33
  %631 = extractelement <16 x float> %619, i64 11, !dbg !33
  %632 = extractelement <16 x float> %619, i64 12, !dbg !33
  %633 = extractelement <16 x float> %619, i64 13, !dbg !33
  %634 = extractelement <16 x float> %619, i64 14, !dbg !33
  %635 = extractelement <16 x float> %619, i64 15, !dbg !33
  %636 = tail call float @llvm.maxnum.f32(float %596, float %597), !dbg !35
  %637 = tail call float @llvm.maxnum.f32(float %636, float %598), !dbg !35
  %638 = tail call float @llvm.maxnum.f32(float %637, float %599), !dbg !35
  %639 = tail call float @llvm.maxnum.f32(float %638, float %600), !dbg !35
  %640 = tail call float @llvm.maxnum.f32(float %639, float %601), !dbg !35
  %641 = tail call float @llvm.maxnum.f32(float %640, float %602), !dbg !35
  %642 = tail call float @llvm.maxnum.f32(float %641, float %603), !dbg !35
  %643 = tail call float @llvm.maxnum.f32(float %642, float %604), !dbg !35
  %644 = tail call float @llvm.maxnum.f32(float %643, float %605), !dbg !35
  %645 = tail call float @llvm.maxnum.f32(float %644, float %606), !dbg !35
  %646 = tail call float @llvm.maxnum.f32(float %645, float %607), !dbg !35
  %647 = tail call float @llvm.maxnum.f32(float %646, float %608), !dbg !35
  %648 = tail call float @llvm.maxnum.f32(float %647, float %609), !dbg !35
  %649 = tail call float @llvm.maxnum.f32(float %648, float %610), !dbg !35
  %650 = tail call float @llvm.maxnum.f32(float %649, float %611), !dbg !35
  %651 = tail call float @llvm.maxnum.f32(float %650, float %620), !dbg !35
  %652 = tail call float @llvm.maxnum.f32(float %651, float %621), !dbg !35
  %653 = tail call float @llvm.maxnum.f32(float %652, float %622), !dbg !35
  %654 = tail call float @llvm.maxnum.f32(float %653, float %623), !dbg !35
  %655 = tail call float @llvm.maxnum.f32(float %654, float %624), !dbg !35
  %656 = tail call float @llvm.maxnum.f32(float %655, float %625), !dbg !35
  %657 = tail call float @llvm.maxnum.f32(float %656, float %626), !dbg !35
  %658 = tail call float @llvm.maxnum.f32(float %657, float %627), !dbg !35
  %659 = tail call float @llvm.maxnum.f32(float %658, float %628), !dbg !35
  %660 = tail call float @llvm.maxnum.f32(float %659, float %629), !dbg !35
  %661 = tail call float @llvm.maxnum.f32(float %660, float %630), !dbg !35
  %662 = tail call float @llvm.maxnum.f32(float %661, float %631), !dbg !35
  %663 = tail call float @llvm.maxnum.f32(float %662, float %632), !dbg !35
  %664 = tail call float @llvm.maxnum.f32(float %663, float %633), !dbg !35
  %665 = tail call float @llvm.maxnum.f32(float %664, float %634), !dbg !35
  %666 = tail call float @llvm.maxnum.f32(float %665, float %635), !dbg !35
  %667 = tail call float asm sideeffect "ds_permute_b32 $0, $1, $2\0A\09s_waitcnt lgkmcnt(0) ", "=v,v,v"(i32 %321, float %666) #5, !dbg !42
  %668 = tail call float @llvm.maxnum.f32(float %666, float %667), !dbg !35
  %669 = tail call float @llvm.maxnum.f32(float %535, float %668), !dbg !45
  %670 = shufflevector <16 x float> %619, <16 x float> poison, <2 x i32> <i32 4, i32 5>, !dbg !47
  %671 = insertelement <2 x float> poison, float %669, i64 0, !dbg !47
  %672 = shufflevector <2 x float> %671, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %673 = fsub <2 x float> %670, %672, !dbg !47
  %674 = fcmp olt <2 x float> %673, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %675 = select <2 x i1> %674, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %676 = select <2 x i1> %674, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %677 = fadd <2 x float> %673, %676, !dbg !48
  %678 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %677), !dbg !48
  %679 = fmul <2 x float> %675, %678, !dbg !48
  %680 = shufflevector <16 x float> %619, <16 x float> poison, <2 x i32> <i32 6, i32 7>, !dbg !47
  %681 = fsub <2 x float> %680, %672, !dbg !47
  %682 = fcmp olt <2 x float> %681, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %683 = select <2 x i1> %682, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %684 = select <2 x i1> %682, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %685 = fadd <2 x float> %681, %684, !dbg !48
  %686 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %685), !dbg !48
  %687 = fmul <2 x float> %683, %686, !dbg !48
  %688 = shufflevector <16 x float> %619, <16 x float> poison, <2 x i32> <i32 8, i32 9>, !dbg !47
  %689 = fsub <2 x float> %688, %672, !dbg !47
  %690 = fcmp olt <2 x float> %689, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %691 = select <2 x i1> %690, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %692 = select <2 x i1> %690, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %693 = fadd <2 x float> %689, %692, !dbg !48
  %694 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %693), !dbg !48
  %695 = fmul <2 x float> %691, %694, !dbg !48
  %696 = shufflevector <16 x float> %619, <16 x float> poison, <2 x i32> <i32 10, i32 11>, !dbg !47
  %697 = fsub <2 x float> %696, %672, !dbg !47
  %698 = fcmp olt <2 x float> %697, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %699 = select <2 x i1> %698, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %700 = select <2 x i1> %698, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %701 = fadd <2 x float> %697, %700, !dbg !48
  %702 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %701), !dbg !48
  %703 = fmul <2 x float> %699, %702, !dbg !48
  %704 = shufflevector <16 x float> %619, <16 x float> poison, <2 x i32> <i32 12, i32 13>, !dbg !47
  %705 = fsub <2 x float> %704, %672, !dbg !47
  %706 = fcmp olt <2 x float> %705, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %707 = select <2 x i1> %706, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %708 = select <2 x i1> %706, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %709 = fadd <2 x float> %705, %708, !dbg !48
  %710 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %709), !dbg !48
  %711 = fmul <2 x float> %707, %710, !dbg !48
  %712 = shufflevector <16 x float> %619, <16 x float> poison, <2 x i32> <i32 14, i32 15>, !dbg !47
  %713 = fsub <2 x float> %712, %672, !dbg !47
  %714 = fcmp olt <2 x float> %713, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %715 = select <2 x i1> %714, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %716 = select <2 x i1> %714, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %717 = fadd <2 x float> %713, %716, !dbg !48
  %718 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %717), !dbg !48
  %719 = fmul <2 x float> %715, %718, !dbg !48
  %720 = fsub float %535, %669, !dbg !49
  %721 = fcmp olt float %720, -1.260000e+02, !dbg !50
  %722 = select i1 %721, float 0x3BF0000000000000, float 1.000000e+00, !dbg !50
  %723 = select i1 %721, float 6.400000e+01, float 0.000000e+00, !dbg !50
  %724 = fadd float %720, %723, !dbg !50
  %725 = tail call float @llvm.exp2.f32(float %724), !dbg !50
  %726 = fmul float %722, %725, !dbg !50
  %727 = insertelement <16 x float> poison, float %726, i64 0, !dbg !51
  %728 = shufflevector <16 x float> %727, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !51
  %729 = fmul <16 x float> %539, %728, !dbg !51
  %730 = fmul <16 x float> %538, %728, !dbg !51
  %731 = mul i64 %540, %50, !dbg !52
  %732 = mul i64 %541, %50, !dbg !52
  %733 = getelementptr half, ptr addrspace(1) %49, i64 %731, !dbg !52
  %734 = getelementptr half, ptr addrspace(1) %49, i64 %732, !dbg !52
  %735 = getelementptr half, ptr addrspace(1) %733, i64 %71, !dbg !52
  %736 = getelementptr half, ptr addrspace(1) %733, i64 %72, !dbg !52
  %737 = getelementptr half, ptr addrspace(1) %733, i64 %73, !dbg !52
  %738 = getelementptr half, ptr addrspace(1) %733, i64 %74, !dbg !52
  %739 = getelementptr half, ptr addrspace(1) %734, i64 %71, !dbg !52
  %740 = getelementptr half, ptr addrspace(1) %734, i64 %72, !dbg !52
  %741 = getelementptr half, ptr addrspace(1) %734, i64 %73, !dbg !52
  %742 = getelementptr half, ptr addrspace(1) %734, i64 %74, !dbg !52
  %743 = addrspacecast ptr addrspace(1) %735 to ptr, !dbg !52
  %744 = load <2 x half>, ptr %743, align 4, !dbg !52
  %745 = addrspacecast ptr addrspace(1) %736 to ptr, !dbg !52
  %746 = load <2 x half>, ptr %745, align 4, !dbg !52
  %747 = addrspacecast ptr addrspace(1) %737 to ptr, !dbg !52
  %748 = load <2 x half>, ptr %747, align 4, !dbg !52
  %749 = addrspacecast ptr addrspace(1) %738 to ptr, !dbg !52
  %750 = load <2 x half>, ptr %749, align 4, !dbg !52
  %751 = addrspacecast ptr addrspace(1) %739 to ptr, !dbg !52
  %752 = load <2 x half>, ptr %751, align 4, !dbg !52
  %753 = addrspacecast ptr addrspace(1) %740 to ptr, !dbg !52
  %754 = load <2 x half>, ptr %753, align 4, !dbg !52
  %755 = addrspacecast ptr addrspace(1) %741 to ptr, !dbg !52
  %756 = load <2 x half>, ptr %755, align 4, !dbg !52
  %757 = addrspacecast ptr addrspace(1) %742 to ptr, !dbg !52
  %758 = load <2 x half>, ptr %757, align 4, !dbg !52
  fence syncscope("workgroup") release, !dbg !52
  tail call void @llvm.amdgcn.s.barrier(), !dbg !52
  fence syncscope("workgroup") acquire, !dbg !52
  %759 = shufflevector <2 x half> %744, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !52
  store <1 x half> %759, ptr addrspace(3) %324, align 2, !dbg !52
  %760 = shufflevector <2 x half> %744, <2 x half> undef, <1 x i32> <i32 1>, !dbg !52
  store <1 x half> %760, ptr addrspace(3) %325, align 2, !dbg !52
  %761 = shufflevector <2 x half> %746, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !52
  store <1 x half> %761, ptr addrspace(3) %326, align 2, !dbg !52
  %762 = shufflevector <2 x half> %746, <2 x half> undef, <1 x i32> <i32 1>, !dbg !52
  store <1 x half> %762, ptr addrspace(3) %327, align 2, !dbg !52
  %763 = shufflevector <2 x half> %748, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !52
  store <1 x half> %763, ptr addrspace(3) %328, align 2, !dbg !52
  %764 = shufflevector <2 x half> %748, <2 x half> undef, <1 x i32> <i32 1>, !dbg !52
  store <1 x half> %764, ptr addrspace(3) %329, align 2, !dbg !52
  %765 = shufflevector <2 x half> %750, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !52
  store <1 x half> %765, ptr addrspace(3) %330, align 2, !dbg !52
  %766 = shufflevector <2 x half> %750, <2 x half> undef, <1 x i32> <i32 1>, !dbg !52
  store <1 x half> %766, ptr addrspace(3) %331, align 2, !dbg !52
  %767 = shufflevector <2 x half> %752, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !52
  store <1 x half> %767, ptr addrspace(3) %332, align 2, !dbg !52
  %768 = shufflevector <2 x half> %752, <2 x half> undef, <1 x i32> <i32 1>, !dbg !52
  store <1 x half> %768, ptr addrspace(3) %333, align 2, !dbg !52
  %769 = shufflevector <2 x half> %754, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !52
  store <1 x half> %769, ptr addrspace(3) %334, align 2, !dbg !52
  %770 = shufflevector <2 x half> %754, <2 x half> undef, <1 x i32> <i32 1>, !dbg !52
  store <1 x half> %770, ptr addrspace(3) %335, align 2, !dbg !52
  %771 = shufflevector <2 x half> %756, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !52
  store <1 x half> %771, ptr addrspace(3) %336, align 2, !dbg !52
  %772 = shufflevector <2 x half> %756, <2 x half> undef, <1 x i32> <i32 1>, !dbg !52
  store <1 x half> %772, ptr addrspace(3) %337, align 2, !dbg !52
  %773 = shufflevector <2 x half> %758, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !52
  store <1 x half> %773, ptr addrspace(3) %338, align 2, !dbg !52
  %774 = shufflevector <2 x half> %758, <2 x half> undef, <1 x i32> <i32 1>, !dbg !52
  store <1 x half> %774, ptr addrspace(3) %339, align 2, !dbg !52
  fence syncscope("workgroup") release, !dbg !52
  tail call void @llvm.amdgcn.s.barrier(), !dbg !52
  fence syncscope("workgroup") acquire, !dbg !52
  %775 = load <1 x half>, ptr addrspace(3) %406, align 2, !dbg !52
  %776 = load <1 x half>, ptr addrspace(3) %408, align 2, !dbg !52
  %777 = shufflevector <1 x half> %775, <1 x half> %776, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %778 = load <1 x half>, ptr addrspace(3) %410, align 2, !dbg !52
  %779 = shufflevector <1 x half> %778, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %780 = shufflevector <4 x half> %777, <4 x half> %779, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %781 = load <1 x half>, ptr addrspace(3) %412, align 2, !dbg !52
  %782 = shufflevector <1 x half> %781, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %783 = shufflevector <4 x half> %780, <4 x half> %782, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %784 = load <1 x half>, ptr addrspace(3) %414, align 2, !dbg !52
  %785 = load <1 x half>, ptr addrspace(3) %416, align 2, !dbg !52
  %786 = shufflevector <1 x half> %784, <1 x half> %785, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %787 = load <1 x half>, ptr addrspace(3) %418, align 2, !dbg !52
  %788 = shufflevector <1 x half> %787, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %789 = shufflevector <4 x half> %786, <4 x half> %788, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %790 = load <1 x half>, ptr addrspace(3) %420, align 2, !dbg !52
  %791 = shufflevector <1 x half> %790, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %792 = shufflevector <4 x half> %789, <4 x half> %791, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %793 = load <1 x half>, ptr addrspace(3) %422, align 2, !dbg !52
  %794 = load <1 x half>, ptr addrspace(3) %424, align 2, !dbg !52
  %795 = shufflevector <1 x half> %793, <1 x half> %794, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %796 = load <1 x half>, ptr addrspace(3) %426, align 2, !dbg !52
  %797 = shufflevector <1 x half> %796, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %798 = shufflevector <4 x half> %795, <4 x half> %797, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %799 = load <1 x half>, ptr addrspace(3) %428, align 2, !dbg !52
  %800 = shufflevector <1 x half> %799, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %801 = shufflevector <4 x half> %798, <4 x half> %800, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %802 = load <1 x half>, ptr addrspace(3) %430, align 2, !dbg !52
  %803 = load <1 x half>, ptr addrspace(3) %432, align 2, !dbg !52
  %804 = shufflevector <1 x half> %802, <1 x half> %803, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %805 = load <1 x half>, ptr addrspace(3) %434, align 2, !dbg !52
  %806 = shufflevector <1 x half> %805, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %807 = shufflevector <4 x half> %804, <4 x half> %806, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %808 = load <1 x half>, ptr addrspace(3) %436, align 2, !dbg !52
  %809 = shufflevector <1 x half> %808, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %810 = shufflevector <4 x half> %807, <4 x half> %809, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %811 = load <1 x half>, ptr addrspace(3) %438, align 2, !dbg !52
  %812 = load <1 x half>, ptr addrspace(3) %440, align 2, !dbg !52
  %813 = shufflevector <1 x half> %811, <1 x half> %812, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %814 = load <1 x half>, ptr addrspace(3) %442, align 2, !dbg !52
  %815 = shufflevector <1 x half> %814, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %816 = shufflevector <4 x half> %813, <4 x half> %815, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %817 = load <1 x half>, ptr addrspace(3) %444, align 2, !dbg !52
  %818 = shufflevector <1 x half> %817, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %819 = shufflevector <4 x half> %816, <4 x half> %818, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %820 = load <1 x half>, ptr addrspace(3) %446, align 2, !dbg !52
  %821 = load <1 x half>, ptr addrspace(3) %448, align 2, !dbg !52
  %822 = shufflevector <1 x half> %820, <1 x half> %821, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %823 = load <1 x half>, ptr addrspace(3) %450, align 2, !dbg !52
  %824 = shufflevector <1 x half> %823, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %825 = shufflevector <4 x half> %822, <4 x half> %824, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %826 = load <1 x half>, ptr addrspace(3) %452, align 2, !dbg !52
  %827 = shufflevector <1 x half> %826, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %828 = shufflevector <4 x half> %825, <4 x half> %827, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %829 = load <1 x half>, ptr addrspace(3) %454, align 2, !dbg !52
  %830 = load <1 x half>, ptr addrspace(3) %456, align 2, !dbg !52
  %831 = shufflevector <1 x half> %829, <1 x half> %830, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %832 = load <1 x half>, ptr addrspace(3) %458, align 2, !dbg !52
  %833 = shufflevector <1 x half> %832, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %834 = shufflevector <4 x half> %831, <4 x half> %833, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %835 = load <1 x half>, ptr addrspace(3) %460, align 2, !dbg !52
  %836 = shufflevector <1 x half> %835, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %837 = shufflevector <4 x half> %834, <4 x half> %836, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %838 = load <1 x half>, ptr addrspace(3) %462, align 2, !dbg !52
  %839 = load <1 x half>, ptr addrspace(3) %464, align 2, !dbg !52
  %840 = shufflevector <1 x half> %838, <1 x half> %839, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %841 = load <1 x half>, ptr addrspace(3) %466, align 2, !dbg !52
  %842 = shufflevector <1 x half> %841, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %843 = shufflevector <4 x half> %840, <4 x half> %842, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %844 = load <1 x half>, ptr addrspace(3) %468, align 2, !dbg !52
  %845 = shufflevector <1 x half> %844, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %846 = shufflevector <4 x half> %843, <4 x half> %845, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %847 = load <1 x half>, ptr addrspace(3) %470, align 2, !dbg !52
  %848 = load <1 x half>, ptr addrspace(3) %472, align 2, !dbg !52
  %849 = shufflevector <1 x half> %847, <1 x half> %848, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %850 = load <1 x half>, ptr addrspace(3) %474, align 2, !dbg !52
  %851 = shufflevector <1 x half> %850, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %852 = shufflevector <4 x half> %849, <4 x half> %851, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %853 = load <1 x half>, ptr addrspace(3) %476, align 2, !dbg !52
  %854 = shufflevector <1 x half> %853, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %855 = shufflevector <4 x half> %852, <4 x half> %854, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %856 = load <1 x half>, ptr addrspace(3) %478, align 2, !dbg !52
  %857 = load <1 x half>, ptr addrspace(3) %480, align 2, !dbg !52
  %858 = shufflevector <1 x half> %856, <1 x half> %857, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %859 = load <1 x half>, ptr addrspace(3) %482, align 2, !dbg !52
  %860 = shufflevector <1 x half> %859, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %861 = shufflevector <4 x half> %858, <4 x half> %860, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %862 = load <1 x half>, ptr addrspace(3) %484, align 2, !dbg !52
  %863 = shufflevector <1 x half> %862, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %864 = shufflevector <4 x half> %861, <4 x half> %863, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %865 = load <1 x half>, ptr addrspace(3) %486, align 2, !dbg !52
  %866 = load <1 x half>, ptr addrspace(3) %488, align 2, !dbg !52
  %867 = shufflevector <1 x half> %865, <1 x half> %866, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %868 = load <1 x half>, ptr addrspace(3) %490, align 2, !dbg !52
  %869 = shufflevector <1 x half> %868, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %870 = shufflevector <4 x half> %867, <4 x half> %869, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %871 = load <1 x half>, ptr addrspace(3) %492, align 2, !dbg !52
  %872 = shufflevector <1 x half> %871, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %873 = shufflevector <4 x half> %870, <4 x half> %872, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %874 = load <1 x half>, ptr addrspace(3) %494, align 2, !dbg !52
  %875 = load <1 x half>, ptr addrspace(3) %496, align 2, !dbg !52
  %876 = shufflevector <1 x half> %874, <1 x half> %875, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %877 = load <1 x half>, ptr addrspace(3) %498, align 2, !dbg !52
  %878 = shufflevector <1 x half> %877, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %879 = shufflevector <4 x half> %876, <4 x half> %878, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %880 = load <1 x half>, ptr addrspace(3) %500, align 2, !dbg !52
  %881 = shufflevector <1 x half> %880, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %882 = shufflevector <4 x half> %879, <4 x half> %881, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %883 = load <1 x half>, ptr addrspace(3) %502, align 2, !dbg !52
  %884 = load <1 x half>, ptr addrspace(3) %504, align 2, !dbg !52
  %885 = shufflevector <1 x half> %883, <1 x half> %884, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %886 = load <1 x half>, ptr addrspace(3) %506, align 2, !dbg !52
  %887 = shufflevector <1 x half> %886, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %888 = shufflevector <4 x half> %885, <4 x half> %887, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %889 = load <1 x half>, ptr addrspace(3) %508, align 2, !dbg !52
  %890 = shufflevector <1 x half> %889, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %891 = shufflevector <4 x half> %888, <4 x half> %890, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %892 = load <1 x half>, ptr addrspace(3) %510, align 2, !dbg !52
  %893 = load <1 x half>, ptr addrspace(3) %512, align 2, !dbg !52
  %894 = shufflevector <1 x half> %892, <1 x half> %893, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %895 = load <1 x half>, ptr addrspace(3) %514, align 2, !dbg !52
  %896 = shufflevector <1 x half> %895, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %897 = shufflevector <4 x half> %894, <4 x half> %896, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %898 = load <1 x half>, ptr addrspace(3) %516, align 2, !dbg !52
  %899 = shufflevector <1 x half> %898, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %900 = shufflevector <4 x half> %897, <4 x half> %899, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %901 = load <1 x half>, ptr addrspace(3) %518, align 2, !dbg !52
  %902 = load <1 x half>, ptr addrspace(3) %520, align 2, !dbg !52
  %903 = shufflevector <1 x half> %901, <1 x half> %902, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %904 = load <1 x half>, ptr addrspace(3) %522, align 2, !dbg !52
  %905 = shufflevector <1 x half> %904, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %906 = shufflevector <4 x half> %903, <4 x half> %905, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %907 = load <1 x half>, ptr addrspace(3) %524, align 2, !dbg !52
  %908 = shufflevector <1 x half> %907, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %909 = shufflevector <4 x half> %906, <4 x half> %908, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %910 = load <1 x half>, ptr addrspace(3) %526, align 2, !dbg !52
  %911 = load <1 x half>, ptr addrspace(3) %528, align 2, !dbg !52
  %912 = shufflevector <1 x half> %910, <1 x half> %911, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %913 = load <1 x half>, ptr addrspace(3) %530, align 2, !dbg !52
  %914 = shufflevector <1 x half> %913, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %915 = shufflevector <4 x half> %912, <4 x half> %914, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !52
  %916 = load <1 x half>, ptr addrspace(3) %532, align 2, !dbg !52
  %917 = shufflevector <1 x half> %916, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %918 = shufflevector <4 x half> %915, <4 x half> %917, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !52
  %919 = shufflevector <16 x float> %595, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !47
  %920 = insertelement <4 x float> poison, float %669, i64 0, !dbg !47
  %921 = shufflevector <4 x float> %920, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !47
  %922 = fsub <4 x float> %919, %921, !dbg !47
  %923 = fcmp olt <4 x float> %922, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %924 = select <4 x i1> %923, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %925 = select <4 x i1> %923, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %926 = fadd <4 x float> %922, %925, !dbg !48
  %927 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %926), !dbg !48
  %928 = fmul <4 x float> %924, %927, !dbg !48
  %929 = fptrunc <4 x float> %928 to <4 x half>, !dbg !53
  %930 = shufflevector <16 x float> %595, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !47
  %931 = fsub <4 x float> %930, %921, !dbg !47
  %932 = fcmp olt <4 x float> %931, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %933 = select <4 x i1> %932, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %934 = select <4 x i1> %932, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %935 = fadd <4 x float> %931, %934, !dbg !48
  %936 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %935), !dbg !48
  %937 = fmul <4 x float> %933, %936, !dbg !48
  %938 = fptrunc <4 x float> %937 to <4 x half>, !dbg !53
  %939 = shufflevector <16 x float> %595, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !47
  %940 = fsub <4 x float> %939, %921, !dbg !47
  %941 = fcmp olt <4 x float> %940, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %942 = select <4 x i1> %941, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %943 = select <4 x i1> %941, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %944 = fadd <4 x float> %940, %943, !dbg !48
  %945 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %944), !dbg !48
  %946 = fmul <4 x float> %942, %945, !dbg !48
  %947 = fptrunc <4 x float> %946 to <4 x half>, !dbg !53
  %948 = shufflevector <16 x float> %595, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !47
  %949 = fsub <4 x float> %948, %921, !dbg !47
  %950 = fcmp olt <4 x float> %949, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %951 = select <4 x i1> %950, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %952 = select <4 x i1> %950, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %953 = fadd <4 x float> %949, %952, !dbg !48
  %954 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %953), !dbg !48
  %955 = fmul <4 x float> %951, %954, !dbg !48
  %956 = fptrunc <4 x float> %955 to <4 x half>, !dbg !53
  %957 = shufflevector <16 x float> %619, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !47
  %958 = fsub <4 x float> %957, %921, !dbg !47
  %959 = fcmp olt <4 x float> %958, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %960 = select <4 x i1> %959, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %961 = select <4 x i1> %959, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %962 = fadd <4 x float> %958, %961, !dbg !48
  %963 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %962), !dbg !48
  %964 = fmul <4 x float> %960, %963, !dbg !48
  %965 = fptrunc <4 x float> %964 to <4 x half>, !dbg !53
  %966 = extractelement <2 x float> %687, i64 0, !dbg !53
  %967 = extractelement <2 x float> %687, i64 1, !dbg !53
  %968 = shufflevector <2 x float> %687, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !53
  %969 = shufflevector <2 x float> %679, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %970 = shufflevector <4 x float> %969, <4 x float> %968, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !53
  %971 = fptrunc <4 x float> %970 to <4 x half>, !dbg !53
  %972 = extractelement <2 x float> %695, i64 0, !dbg !53
  %973 = extractelement <2 x float> %695, i64 1, !dbg !53
  %974 = extractelement <2 x float> %703, i64 0, !dbg !53
  %975 = extractelement <2 x float> %703, i64 1, !dbg !53
  %976 = shufflevector <2 x float> %695, <2 x float> %703, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !53
  %977 = fptrunc <4 x float> %976 to <4 x half>, !dbg !53
  %978 = extractelement <2 x float> %711, i64 0, !dbg !53
  %979 = extractelement <2 x float> %711, i64 1, !dbg !53
  %980 = extractelement <2 x float> %719, i64 0, !dbg !53
  %981 = extractelement <2 x float> %719, i64 1, !dbg !53
  %982 = shufflevector <2 x float> %711, <2 x float> %719, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !53
  %983 = fptrunc <4 x float> %982 to <4 x half>, !dbg !53
  fence syncscope("workgroup") release, !dbg !53
  tail call void @llvm.amdgcn.s.barrier(), !dbg !53
  fence syncscope("workgroup") acquire, !dbg !53
  %984 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %783, <4 x half> %929, <16 x float> %729, i32 0, i32 0, i32 0), !dbg !54
  %985 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %792, <4 x half> %938, <16 x float> %984, i32 0, i32 0, i32 0), !dbg !54
  %986 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %801, <4 x half> %947, <16 x float> %985, i32 0, i32 0, i32 0), !dbg !54
  %987 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %810, <4 x half> %956, <16 x float> %986, i32 0, i32 0, i32 0), !dbg !54
  %988 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %819, <4 x half> %965, <16 x float> %987, i32 0, i32 0, i32 0), !dbg !54
  %989 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %828, <4 x half> %971, <16 x float> %988, i32 0, i32 0, i32 0), !dbg !54
  %990 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %837, <4 x half> %977, <16 x float> %989, i32 0, i32 0, i32 0), !dbg !54
  %991 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %846, <4 x half> %983, <16 x float> %990, i32 0, i32 0, i32 0), !dbg !54
  %992 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %855, <4 x half> %929, <16 x float> %730, i32 0, i32 0, i32 0), !dbg !54
  %993 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %864, <4 x half> %938, <16 x float> %992, i32 0, i32 0, i32 0), !dbg !54
  %994 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %873, <4 x half> %947, <16 x float> %993, i32 0, i32 0, i32 0), !dbg !54
  %995 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %882, <4 x half> %956, <16 x float> %994, i32 0, i32 0, i32 0), !dbg !54
  %996 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %891, <4 x half> %965, <16 x float> %995, i32 0, i32 0, i32 0), !dbg !54
  %997 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %900, <4 x half> %971, <16 x float> %996, i32 0, i32 0, i32 0), !dbg !54
  %998 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %909, <4 x half> %977, <16 x float> %997, i32 0, i32 0, i32 0), !dbg !54
  %999 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %918, <4 x half> %983, <16 x float> %998, i32 0, i32 0, i32 0), !dbg !54
  %shift = shufflevector <4 x float> %928, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1000 = fadd <4 x float> %928, %shift, !dbg !55
  %shift76 = shufflevector <4 x float> %928, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1001 = fadd <4 x float> %shift76, %1000, !dbg !55
  %shift77 = shufflevector <4 x float> %928, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1002 = fadd <4 x float> %shift77, %1001, !dbg !55
  %1003 = fadd <4 x float> %937, %1002, !dbg !55
  %shift78 = shufflevector <4 x float> %937, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1004 = fadd <4 x float> %shift78, %1003, !dbg !55
  %shift79 = shufflevector <4 x float> %937, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1005 = fadd <4 x float> %shift79, %1004, !dbg !55
  %shift80 = shufflevector <4 x float> %937, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1006 = fadd <4 x float> %shift80, %1005, !dbg !55
  %1007 = fadd <4 x float> %946, %1006, !dbg !55
  %shift81 = shufflevector <4 x float> %946, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1008 = fadd <4 x float> %shift81, %1007, !dbg !55
  %shift82 = shufflevector <4 x float> %946, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1009 = fadd <4 x float> %shift82, %1008, !dbg !55
  %shift83 = shufflevector <4 x float> %946, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1010 = fadd <4 x float> %shift83, %1009, !dbg !55
  %1011 = fadd <4 x float> %955, %1010, !dbg !55
  %shift84 = shufflevector <4 x float> %955, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1012 = fadd <4 x float> %shift84, %1011, !dbg !55
  %shift85 = shufflevector <4 x float> %955, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1013 = fadd <4 x float> %shift85, %1012, !dbg !55
  %shift86 = shufflevector <4 x float> %955, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1014 = fadd <4 x float> %shift86, %1013, !dbg !55
  %1015 = fadd <4 x float> %964, %1014, !dbg !55
  %shift87 = shufflevector <4 x float> %964, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1016 = fadd <4 x float> %shift87, %1015, !dbg !55
  %shift88 = shufflevector <4 x float> %964, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1017 = fadd <4 x float> %shift88, %1016, !dbg !55
  %shift89 = shufflevector <4 x float> %964, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !55
  %1018 = fadd <4 x float> %shift89, %1017, !dbg !55
  %1019 = extractelement <4 x float> %1018, i64 0, !dbg !55
  %1020 = extractelement <2 x float> %679, i64 0, !dbg !55
  %1021 = fadd float %1020, %1019, !dbg !55
  %1022 = extractelement <2 x float> %679, i64 1, !dbg !55
  %1023 = fadd float %1022, %1021, !dbg !55
  %1024 = fadd float %966, %1023, !dbg !55
  %1025 = fadd float %967, %1024, !dbg !55
  %1026 = fadd float %972, %1025, !dbg !55
  %1027 = fadd float %973, %1026, !dbg !55
  %1028 = fadd float %974, %1027, !dbg !55
  %1029 = fadd float %975, %1028, !dbg !55
  %1030 = fadd float %978, %1029, !dbg !55
  %1031 = fadd float %979, %1030, !dbg !55
  %1032 = fadd float %980, %1031, !dbg !55
  %1033 = fadd float %981, %1032, !dbg !55
  %1034 = tail call float asm sideeffect "ds_permute_b32 $0, $1, $2\0A\09s_waitcnt lgkmcnt(0) ", "=v,v,v"(i32 %321, float %1033) #5, !dbg !58
  %1035 = fadd float %1033, %1034, !dbg !55
  %1036 = fmul float %536, %726, !dbg !60
  %1037 = fadd float %1036, %1035, !dbg !61
  %1038 = add i64 %534, 64, !dbg !62
  %1039 = add i32 %537, 64, !dbg !32
  %1040 = icmp slt i32 %1039, %20, !dbg !32
  br i1 %1040, label %533, label %._crit_edge.loopexit, !dbg !32

._crit_edge.loopexit:                             ; preds = %533
  %1041 = extractelement <16 x float> %991, i64 15, !dbg !32
  %1042 = extractelement <16 x float> %991, i64 14, !dbg !32
  %1043 = extractelement <16 x float> %991, i64 13, !dbg !32
  %1044 = extractelement <16 x float> %991, i64 12, !dbg !32
  %1045 = extractelement <16 x float> %991, i64 11, !dbg !32
  %1046 = extractelement <16 x float> %991, i64 10, !dbg !32
  %1047 = extractelement <16 x float> %991, i64 9, !dbg !32
  %1048 = extractelement <16 x float> %991, i64 8, !dbg !32
  %1049 = extractelement <16 x float> %991, i64 7, !dbg !32
  %1050 = extractelement <16 x float> %991, i64 6, !dbg !32
  %1051 = extractelement <16 x float> %991, i64 5, !dbg !32
  %1052 = extractelement <16 x float> %991, i64 4, !dbg !32
  %1053 = extractelement <16 x float> %991, i64 3, !dbg !32
  %1054 = extractelement <16 x float> %991, i64 2, !dbg !32
  %1055 = extractelement <16 x float> %991, i64 1, !dbg !32
  %1056 = extractelement <16 x float> %991, i64 0, !dbg !32
  %1057 = extractelement <16 x float> %999, i64 15, !dbg !32
  %1058 = extractelement <16 x float> %999, i64 14, !dbg !32
  %1059 = extractelement <16 x float> %999, i64 13, !dbg !32
  %1060 = extractelement <16 x float> %999, i64 12, !dbg !32
  %1061 = extractelement <16 x float> %999, i64 11, !dbg !32
  %1062 = extractelement <16 x float> %999, i64 10, !dbg !32
  %1063 = extractelement <16 x float> %999, i64 9, !dbg !32
  %1064 = extractelement <16 x float> %999, i64 8, !dbg !32
  %1065 = extractelement <16 x float> %999, i64 7, !dbg !32
  %1066 = extractelement <16 x float> %999, i64 6, !dbg !32
  %1067 = extractelement <16 x float> %999, i64 5, !dbg !32
  %1068 = extractelement <16 x float> %999, i64 4, !dbg !32
  %1069 = extractelement <16 x float> %999, i64 3, !dbg !32
  %1070 = extractelement <16 x float> %999, i64 2, !dbg !32
  %1071 = extractelement <16 x float> %999, i64 1, !dbg !32
  %1072 = extractelement <16 x float> %999, i64 0, !dbg !32
  br label %._crit_edge, !dbg !63

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %21
  %1073 = phi float [ 0.000000e+00, %21 ], [ %1056, %._crit_edge.loopexit ]
  %1074 = phi float [ 0.000000e+00, %21 ], [ %1055, %._crit_edge.loopexit ]
  %1075 = phi float [ 0.000000e+00, %21 ], [ %1054, %._crit_edge.loopexit ]
  %1076 = phi float [ 0.000000e+00, %21 ], [ %1053, %._crit_edge.loopexit ]
  %1077 = phi float [ 0.000000e+00, %21 ], [ %1052, %._crit_edge.loopexit ]
  %1078 = phi float [ 0.000000e+00, %21 ], [ %1051, %._crit_edge.loopexit ]
  %1079 = phi float [ 0.000000e+00, %21 ], [ %1050, %._crit_edge.loopexit ]
  %1080 = phi float [ 0.000000e+00, %21 ], [ %1049, %._crit_edge.loopexit ]
  %1081 = phi float [ 0.000000e+00, %21 ], [ %1048, %._crit_edge.loopexit ]
  %1082 = phi float [ 0.000000e+00, %21 ], [ %1047, %._crit_edge.loopexit ]
  %1083 = phi float [ 0.000000e+00, %21 ], [ %1046, %._crit_edge.loopexit ]
  %1084 = phi float [ 0.000000e+00, %21 ], [ %1045, %._crit_edge.loopexit ]
  %1085 = phi float [ 0.000000e+00, %21 ], [ %1044, %._crit_edge.loopexit ]
  %1086 = phi float [ 0.000000e+00, %21 ], [ %1043, %._crit_edge.loopexit ]
  %1087 = phi float [ 0.000000e+00, %21 ], [ %1042, %._crit_edge.loopexit ]
  %1088 = phi float [ 0.000000e+00, %21 ], [ %1041, %._crit_edge.loopexit ]
  %1089 = phi float [ 0.000000e+00, %21 ], [ %1072, %._crit_edge.loopexit ]
  %1090 = phi float [ 0.000000e+00, %21 ], [ %1071, %._crit_edge.loopexit ]
  %1091 = phi float [ 0.000000e+00, %21 ], [ %1070, %._crit_edge.loopexit ]
  %1092 = phi float [ 0.000000e+00, %21 ], [ %1069, %._crit_edge.loopexit ]
  %1093 = phi float [ 0.000000e+00, %21 ], [ %1068, %._crit_edge.loopexit ]
  %1094 = phi float [ 0.000000e+00, %21 ], [ %1067, %._crit_edge.loopexit ]
  %1095 = phi float [ 0.000000e+00, %21 ], [ %1066, %._crit_edge.loopexit ]
  %1096 = phi float [ 0.000000e+00, %21 ], [ %1065, %._crit_edge.loopexit ]
  %1097 = phi float [ 0.000000e+00, %21 ], [ %1064, %._crit_edge.loopexit ]
  %1098 = phi float [ 0.000000e+00, %21 ], [ %1063, %._crit_edge.loopexit ]
  %1099 = phi float [ 0.000000e+00, %21 ], [ %1062, %._crit_edge.loopexit ]
  %1100 = phi float [ 0.000000e+00, %21 ], [ %1061, %._crit_edge.loopexit ]
  %1101 = phi float [ 0.000000e+00, %21 ], [ %1060, %._crit_edge.loopexit ]
  %1102 = phi float [ 0.000000e+00, %21 ], [ %1059, %._crit_edge.loopexit ]
  %1103 = phi float [ 0.000000e+00, %21 ], [ %1058, %._crit_edge.loopexit ]
  %1104 = phi float [ 0.000000e+00, %21 ], [ %1057, %._crit_edge.loopexit ]
  %.lcssa32 = phi float [ 1.000000e+00, %21 ], [ %1037, %._crit_edge.loopexit ]
  %.lcssa = phi float [ 0xFFF0000000000000, %21 ], [ %669, %._crit_edge.loopexit ]
  %1105 = tail call i1 @llvm.amdgcn.class.f32(float %.lcssa32, i32 144), !dbg !63
  %1106 = select i1 %1105, float 0x41F0000000000000, float 1.000000e+00, !dbg !63
  %1107 = fmul float %.lcssa32, %1106, !dbg !63
  %1108 = tail call float @llvm.log2.f32(float %1107), !dbg !63
  %1109 = select i1 %1105, float 3.200000e+01, float 0.000000e+00, !dbg !63
  %1110 = fsub float %1108, %1109, !dbg !63
  %1111 = fadd float %.lcssa, %1110, !dbg !64
  fence syncscope("workgroup") release, !dbg !14
  tail call void @llvm.amdgcn.s.barrier(), !dbg !14
  fence syncscope("workgroup") acquire, !dbg !14
  %1112 = zext i32 %40 to i64, !dbg !14
  %1113 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1112, !dbg !14
  %1114 = insertelement <1 x float> undef, float %1111, i64 0, !dbg !14
  store <1 x float> %1114, ptr addrspace(3) %1113, align 4, !dbg !14
  fence syncscope("workgroup") release, !dbg !14
  tail call void @llvm.amdgcn.s.barrier(), !dbg !14
  fence syncscope("workgroup") acquire, !dbg !14
  %urem = and i32 %22, 128, !dbg !14
  %.not.not = icmp eq i32 %urem, 0, !dbg !14
  br i1 %.not.not, label %1115, label %1124, !dbg !14

1115:                                             ; preds = %._crit_edge
  %1116 = zext i32 %32 to i64, !dbg !14
  %1117 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1116, !dbg !14
  %1118 = load i32, ptr addrspace(3) %1117, align 4, !dbg !14
  %1119 = mul i32 %42, %20, !dbg !65
  %1120 = sext i32 %1119 to i64, !dbg !66
  %1121 = getelementptr float, ptr addrspace(1) %4, i64 %1120, !dbg !66
  %1122 = sext i32 %53 to i64, !dbg !67
  %1123 = getelementptr float, ptr addrspace(1) %1121, i64 %1122, !dbg !67
  store i32 %1118, ptr addrspace(1) %1123, align 4, !dbg !14
  br label %1124, !dbg !14

1124:                                             ; preds = %1115, %._crit_edge
  %1125 = fdiv float %1104, %.lcssa32, !dbg !68
  %1126 = fdiv float %1103, %.lcssa32, !dbg !68
  %1127 = fdiv float %1102, %.lcssa32, !dbg !68
  %1128 = fdiv float %1101, %.lcssa32, !dbg !68
  %1129 = fdiv float %1100, %.lcssa32, !dbg !68
  %1130 = fdiv float %1099, %.lcssa32, !dbg !68
  %1131 = fdiv float %1098, %.lcssa32, !dbg !68
  %1132 = fdiv float %1097, %.lcssa32, !dbg !68
  %1133 = fdiv float %1096, %.lcssa32, !dbg !68
  %1134 = fdiv float %1095, %.lcssa32, !dbg !68
  %1135 = fdiv float %1094, %.lcssa32, !dbg !68
  %1136 = fdiv float %1093, %.lcssa32, !dbg !68
  %1137 = fdiv float %1092, %.lcssa32, !dbg !68
  %1138 = fdiv float %1091, %.lcssa32, !dbg !68
  %1139 = fdiv float %1090, %.lcssa32, !dbg !68
  %1140 = fdiv float %1089, %.lcssa32, !dbg !68
  %1141 = fdiv float %1088, %.lcssa32, !dbg !68
  %1142 = fdiv float %1087, %.lcssa32, !dbg !68
  %1143 = fdiv float %1086, %.lcssa32, !dbg !68
  %1144 = fdiv float %1085, %.lcssa32, !dbg !68
  %1145 = fdiv float %1084, %.lcssa32, !dbg !68
  %1146 = fdiv float %1083, %.lcssa32, !dbg !68
  %1147 = fdiv float %1082, %.lcssa32, !dbg !68
  %1148 = fdiv float %1081, %.lcssa32, !dbg !68
  %1149 = fdiv float %1080, %.lcssa32, !dbg !68
  %1150 = fdiv float %1079, %.lcssa32, !dbg !68
  %1151 = fdiv float %1078, %.lcssa32, !dbg !68
  %1152 = fdiv float %1077, %.lcssa32, !dbg !68
  %1153 = fdiv float %1076, %.lcssa32, !dbg !68
  %1154 = fdiv float %1075, %.lcssa32, !dbg !68
  %1155 = fdiv float %1074, %.lcssa32, !dbg !68
  %1156 = fdiv float %1073, %.lcssa32, !dbg !68
  %1157 = sext i32 %17 to i64, !dbg !69
  %1158 = getelementptr half, ptr addrspace(1) %5, i64 %44, !dbg !70
  %1159 = lshr i32 %22, 3, !dbg !71
  %1160 = and i32 %1159, 4, !dbg !71
  %1161 = fptrunc float %1156 to half, !dbg !72
  %1162 = fptrunc float %1155 to half, !dbg !72
  %1163 = fptrunc float %1154 to half, !dbg !72
  %1164 = fptrunc float %1153 to half, !dbg !72
  %1165 = fptrunc float %1152 to half, !dbg !72
  %1166 = fptrunc float %1151 to half, !dbg !72
  %1167 = fptrunc float %1150 to half, !dbg !72
  %1168 = fptrunc float %1149 to half, !dbg !72
  %1169 = fptrunc float %1148 to half, !dbg !72
  %1170 = fptrunc float %1147 to half, !dbg !72
  %1171 = fptrunc float %1146 to half, !dbg !72
  %1172 = fptrunc float %1145 to half, !dbg !72
  %1173 = fptrunc float %1144 to half, !dbg !72
  %1174 = fptrunc float %1143 to half, !dbg !72
  %1175 = fptrunc float %1142 to half, !dbg !72
  %1176 = fptrunc float %1141 to half, !dbg !72
  %1177 = fptrunc float %1140 to half, !dbg !72
  %1178 = fptrunc float %1139 to half, !dbg !72
  %1179 = fptrunc float %1138 to half, !dbg !72
  %1180 = fptrunc float %1137 to half, !dbg !72
  %1181 = fptrunc float %1136 to half, !dbg !72
  %1182 = fptrunc float %1135 to half, !dbg !72
  %1183 = fptrunc float %1134 to half, !dbg !72
  %1184 = fptrunc float %1133 to half, !dbg !72
  %1185 = fptrunc float %1132 to half, !dbg !72
  %1186 = fptrunc float %1131 to half, !dbg !72
  %1187 = fptrunc float %1130 to half, !dbg !72
  %1188 = fptrunc float %1129 to half, !dbg !72
  %1189 = fptrunc float %1128 to half, !dbg !72
  %1190 = fptrunc float %1127 to half, !dbg !72
  %1191 = fptrunc float %1126 to half, !dbg !72
  %1192 = fptrunc float %1125 to half, !dbg !72
  %1193 = mul nsw i64 %59, %1157, !dbg !71
  %1194 = mul nsw i64 %60, %1157, !dbg !71
  %1195 = mul nsw i64 %61, %1157, !dbg !71
  %1196 = mul nsw i64 %62, %1157, !dbg !71
  %1197 = getelementptr half, ptr addrspace(1) %1158, i64 %1193, !dbg !71
  %1198 = getelementptr half, ptr addrspace(1) %1158, i64 %1194, !dbg !71
  %1199 = getelementptr half, ptr addrspace(1) %1158, i64 %1195, !dbg !71
  %1200 = getelementptr half, ptr addrspace(1) %1158, i64 %1196, !dbg !71
  %1201 = getelementptr half, ptr addrspace(1) %1197, i64 %71, !dbg !71
  %1202 = getelementptr half, ptr addrspace(1) %1197, i64 %72, !dbg !71
  %1203 = getelementptr half, ptr addrspace(1) %1197, i64 %73, !dbg !71
  %1204 = getelementptr half, ptr addrspace(1) %1197, i64 %74, !dbg !71
  %1205 = getelementptr half, ptr addrspace(1) %1198, i64 %71, !dbg !71
  %1206 = getelementptr half, ptr addrspace(1) %1198, i64 %72, !dbg !71
  %1207 = getelementptr half, ptr addrspace(1) %1198, i64 %73, !dbg !71
  %1208 = getelementptr half, ptr addrspace(1) %1198, i64 %74, !dbg !71
  %1209 = getelementptr half, ptr addrspace(1) %1199, i64 %71, !dbg !71
  %1210 = getelementptr half, ptr addrspace(1) %1199, i64 %72, !dbg !71
  %1211 = getelementptr half, ptr addrspace(1) %1199, i64 %73, !dbg !71
  %1212 = getelementptr half, ptr addrspace(1) %1199, i64 %74, !dbg !71
  %1213 = getelementptr half, ptr addrspace(1) %1200, i64 %71, !dbg !71
  %1214 = getelementptr half, ptr addrspace(1) %1200, i64 %72, !dbg !71
  %1215 = getelementptr half, ptr addrspace(1) %1200, i64 %73, !dbg !71
  %1216 = getelementptr half, ptr addrspace(1) %1200, i64 %74, !dbg !71
  fence syncscope("workgroup") release, !dbg !71
  tail call void @llvm.amdgcn.s.barrier(), !dbg !71
  fence syncscope("workgroup") acquire, !dbg !71
  %1217 = mul nuw nsw i32 %40, 72, !dbg !71
  %1218 = or i32 %1217, %1160, !dbg !71
  %1219 = zext i32 %1218 to i64, !dbg !71
  %1220 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1219, !dbg !71
  %1221 = insertelement <1 x half> undef, half %1161, i64 0, !dbg !71
  store <1 x half> %1221, ptr addrspace(3) %1220, align 2, !dbg !71
  %1222 = or i32 %1218, 1, !dbg !71
  %1223 = zext i32 %1222 to i64, !dbg !71
  %1224 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1223, !dbg !71
  %1225 = insertelement <1 x half> undef, half %1162, i64 0, !dbg !71
  store <1 x half> %1225, ptr addrspace(3) %1224, align 2, !dbg !71
  %1226 = or i32 %1218, 2, !dbg !71
  %1227 = zext i32 %1226 to i64, !dbg !71
  %1228 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1227, !dbg !71
  %1229 = insertelement <1 x half> undef, half %1163, i64 0, !dbg !71
  store <1 x half> %1229, ptr addrspace(3) %1228, align 2, !dbg !71
  %1230 = or i32 %1218, 3, !dbg !71
  %1231 = zext i32 %1230 to i64, !dbg !71
  %1232 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1231, !dbg !71
  %1233 = insertelement <1 x half> undef, half %1164, i64 0, !dbg !71
  store <1 x half> %1233, ptr addrspace(3) %1232, align 2, !dbg !71
  %1234 = or i32 %1160, 8, !dbg !71
  %1235 = add nuw nsw i32 %1234, %1217, !dbg !71
  %1236 = zext i32 %1235 to i64, !dbg !71
  %1237 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1236, !dbg !71
  %1238 = insertelement <1 x half> undef, half %1165, i64 0, !dbg !71
  store <1 x half> %1238, ptr addrspace(3) %1237, align 2, !dbg !71
  %1239 = or i32 %1160, 9, !dbg !71
  %1240 = add nuw nsw i32 %1239, %1217, !dbg !71
  %1241 = zext i32 %1240 to i64, !dbg !71
  %1242 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1241, !dbg !71
  %1243 = insertelement <1 x half> undef, half %1166, i64 0, !dbg !71
  store <1 x half> %1243, ptr addrspace(3) %1242, align 2, !dbg !71
  %1244 = or i32 %1160, 10, !dbg !71
  %1245 = add nuw nsw i32 %1244, %1217, !dbg !71
  %1246 = zext i32 %1245 to i64, !dbg !71
  %1247 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1246, !dbg !71
  %1248 = insertelement <1 x half> undef, half %1167, i64 0, !dbg !71
  store <1 x half> %1248, ptr addrspace(3) %1247, align 2, !dbg !71
  %1249 = or i32 %1160, 11, !dbg !71
  %1250 = add nuw nsw i32 %1249, %1217, !dbg !71
  %1251 = zext i32 %1250 to i64, !dbg !71
  %1252 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1251, !dbg !71
  %1253 = insertelement <1 x half> undef, half %1168, i64 0, !dbg !71
  store <1 x half> %1253, ptr addrspace(3) %1252, align 2, !dbg !71
  %1254 = or i32 %1160, 16, !dbg !71
  %1255 = add nuw nsw i32 %1254, %1217, !dbg !71
  %1256 = zext i32 %1255 to i64, !dbg !71
  %1257 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1256, !dbg !71
  %1258 = insertelement <1 x half> undef, half %1169, i64 0, !dbg !71
  store <1 x half> %1258, ptr addrspace(3) %1257, align 2, !dbg !71
  %1259 = or i32 %1160, 17, !dbg !71
  %1260 = add nuw nsw i32 %1259, %1217, !dbg !71
  %1261 = zext i32 %1260 to i64, !dbg !71
  %1262 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1261, !dbg !71
  %1263 = insertelement <1 x half> undef, half %1170, i64 0, !dbg !71
  store <1 x half> %1263, ptr addrspace(3) %1262, align 2, !dbg !71
  %1264 = or i32 %1160, 18, !dbg !71
  %1265 = add nuw nsw i32 %1264, %1217, !dbg !71
  %1266 = zext i32 %1265 to i64, !dbg !71
  %1267 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1266, !dbg !71
  %1268 = insertelement <1 x half> undef, half %1171, i64 0, !dbg !71
  store <1 x half> %1268, ptr addrspace(3) %1267, align 2, !dbg !71
  %1269 = or i32 %1160, 19, !dbg !71
  %1270 = add nuw nsw i32 %1269, %1217, !dbg !71
  %1271 = zext i32 %1270 to i64, !dbg !71
  %1272 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1271, !dbg !71
  %1273 = insertelement <1 x half> undef, half %1172, i64 0, !dbg !71
  store <1 x half> %1273, ptr addrspace(3) %1272, align 2, !dbg !71
  %1274 = or i32 %1160, 24, !dbg !71
  %1275 = add nuw nsw i32 %1274, %1217, !dbg !71
  %1276 = zext i32 %1275 to i64, !dbg !71
  %1277 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1276, !dbg !71
  %1278 = insertelement <1 x half> undef, half %1173, i64 0, !dbg !71
  store <1 x half> %1278, ptr addrspace(3) %1277, align 2, !dbg !71
  %1279 = or i32 %1160, 25, !dbg !71
  %1280 = add nuw nsw i32 %1279, %1217, !dbg !71
  %1281 = zext i32 %1280 to i64, !dbg !71
  %1282 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1281, !dbg !71
  %1283 = insertelement <1 x half> undef, half %1174, i64 0, !dbg !71
  store <1 x half> %1283, ptr addrspace(3) %1282, align 2, !dbg !71
  %1284 = or i32 %1160, 26, !dbg !71
  %1285 = add nuw nsw i32 %1284, %1217, !dbg !71
  %1286 = zext i32 %1285 to i64, !dbg !71
  %1287 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1286, !dbg !71
  %1288 = insertelement <1 x half> undef, half %1175, i64 0, !dbg !71
  store <1 x half> %1288, ptr addrspace(3) %1287, align 2, !dbg !71
  %1289 = or i32 %1160, 27, !dbg !71
  %1290 = add nuw nsw i32 %1289, %1217, !dbg !71
  %1291 = zext i32 %1290 to i64, !dbg !71
  %1292 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1291, !dbg !71
  %1293 = insertelement <1 x half> undef, half %1176, i64 0, !dbg !71
  store <1 x half> %1293, ptr addrspace(3) %1292, align 2, !dbg !71
  %1294 = or i32 %1160, 32, !dbg !71
  %1295 = add nuw nsw i32 %1294, %1217, !dbg !71
  %1296 = zext i32 %1295 to i64, !dbg !71
  %1297 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1296, !dbg !71
  %1298 = insertelement <1 x half> undef, half %1177, i64 0, !dbg !71
  store <1 x half> %1298, ptr addrspace(3) %1297, align 2, !dbg !71
  %1299 = or i32 %1160, 33, !dbg !71
  %1300 = add nuw nsw i32 %1299, %1217, !dbg !71
  %1301 = zext i32 %1300 to i64, !dbg !71
  %1302 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1301, !dbg !71
  %1303 = insertelement <1 x half> undef, half %1178, i64 0, !dbg !71
  store <1 x half> %1303, ptr addrspace(3) %1302, align 2, !dbg !71
  %1304 = or i32 %1160, 34, !dbg !71
  %1305 = add nuw nsw i32 %1304, %1217, !dbg !71
  %1306 = zext i32 %1305 to i64, !dbg !71
  %1307 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1306, !dbg !71
  %1308 = insertelement <1 x half> undef, half %1179, i64 0, !dbg !71
  store <1 x half> %1308, ptr addrspace(3) %1307, align 2, !dbg !71
  %1309 = or i32 %1160, 35, !dbg !71
  %1310 = add nuw nsw i32 %1309, %1217, !dbg !71
  %1311 = zext i32 %1310 to i64, !dbg !71
  %1312 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1311, !dbg !71
  %1313 = insertelement <1 x half> undef, half %1180, i64 0, !dbg !71
  store <1 x half> %1313, ptr addrspace(3) %1312, align 2, !dbg !71
  %1314 = or i32 %1160, 40, !dbg !71
  %1315 = add nuw nsw i32 %1314, %1217, !dbg !71
  %1316 = zext i32 %1315 to i64, !dbg !71
  %1317 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1316, !dbg !71
  %1318 = insertelement <1 x half> undef, half %1181, i64 0, !dbg !71
  store <1 x half> %1318, ptr addrspace(3) %1317, align 2, !dbg !71
  %1319 = or i32 %1160, 41, !dbg !71
  %1320 = add nuw nsw i32 %1319, %1217, !dbg !71
  %1321 = zext i32 %1320 to i64, !dbg !71
  %1322 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1321, !dbg !71
  %1323 = insertelement <1 x half> undef, half %1182, i64 0, !dbg !71
  store <1 x half> %1323, ptr addrspace(3) %1322, align 2, !dbg !71
  %1324 = or i32 %1160, 42, !dbg !71
  %1325 = add nuw nsw i32 %1324, %1217, !dbg !71
  %1326 = zext i32 %1325 to i64, !dbg !71
  %1327 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1326, !dbg !71
  %1328 = insertelement <1 x half> undef, half %1183, i64 0, !dbg !71
  store <1 x half> %1328, ptr addrspace(3) %1327, align 2, !dbg !71
  %1329 = or i32 %1160, 43, !dbg !71
  %1330 = add nuw nsw i32 %1329, %1217, !dbg !71
  %1331 = zext i32 %1330 to i64, !dbg !71
  %1332 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1331, !dbg !71
  %1333 = insertelement <1 x half> undef, half %1184, i64 0, !dbg !71
  store <1 x half> %1333, ptr addrspace(3) %1332, align 2, !dbg !71
  %1334 = or i32 %1160, 48, !dbg !71
  %1335 = add nuw nsw i32 %1334, %1217, !dbg !71
  %1336 = zext i32 %1335 to i64, !dbg !71
  %1337 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1336, !dbg !71
  %1338 = insertelement <1 x half> undef, half %1185, i64 0, !dbg !71
  store <1 x half> %1338, ptr addrspace(3) %1337, align 2, !dbg !71
  %1339 = or i32 %1160, 49, !dbg !71
  %1340 = add nuw nsw i32 %1339, %1217, !dbg !71
  %1341 = zext i32 %1340 to i64, !dbg !71
  %1342 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1341, !dbg !71
  %1343 = insertelement <1 x half> undef, half %1186, i64 0, !dbg !71
  store <1 x half> %1343, ptr addrspace(3) %1342, align 2, !dbg !71
  %1344 = or i32 %1160, 50, !dbg !71
  %1345 = add nuw nsw i32 %1344, %1217, !dbg !71
  %1346 = zext i32 %1345 to i64, !dbg !71
  %1347 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1346, !dbg !71
  %1348 = insertelement <1 x half> undef, half %1187, i64 0, !dbg !71
  store <1 x half> %1348, ptr addrspace(3) %1347, align 2, !dbg !71
  %1349 = or i32 %1160, 51, !dbg !71
  %1350 = add nuw nsw i32 %1349, %1217, !dbg !71
  %1351 = zext i32 %1350 to i64, !dbg !71
  %1352 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1351, !dbg !71
  %1353 = insertelement <1 x half> undef, half %1188, i64 0, !dbg !71
  store <1 x half> %1353, ptr addrspace(3) %1352, align 2, !dbg !71
  %1354 = or i32 %1160, 56, !dbg !71
  %1355 = add nuw nsw i32 %1354, %1217, !dbg !71
  %1356 = zext i32 %1355 to i64, !dbg !71
  %1357 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1356, !dbg !71
  %1358 = insertelement <1 x half> undef, half %1189, i64 0, !dbg !71
  store <1 x half> %1358, ptr addrspace(3) %1357, align 2, !dbg !71
  %1359 = or i32 %1160, 57, !dbg !71
  %1360 = add nuw nsw i32 %1359, %1217, !dbg !71
  %1361 = zext i32 %1360 to i64, !dbg !71
  %1362 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1361, !dbg !71
  %1363 = insertelement <1 x half> undef, half %1190, i64 0, !dbg !71
  store <1 x half> %1363, ptr addrspace(3) %1362, align 2, !dbg !71
  %1364 = or i32 %1160, 58, !dbg !71
  %1365 = add nuw nsw i32 %1364, %1217, !dbg !71
  %1366 = zext i32 %1365 to i64, !dbg !71
  %1367 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1366, !dbg !71
  %1368 = insertelement <1 x half> undef, half %1191, i64 0, !dbg !71
  store <1 x half> %1368, ptr addrspace(3) %1367, align 2, !dbg !71
  %1369 = or i32 %1160, 59, !dbg !71
  %1370 = add nuw nsw i32 %1369, %1217, !dbg !71
  %1371 = zext i32 %1370 to i64, !dbg !71
  %1372 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1371, !dbg !71
  %1373 = insertelement <1 x half> undef, half %1192, i64 0, !dbg !71
  store <1 x half> %1373, ptr addrspace(3) %1372, align 2, !dbg !71
  fence syncscope("workgroup") release, !dbg !71
  tail call void @llvm.amdgcn.s.barrier(), !dbg !71
  fence syncscope("workgroup") acquire, !dbg !71
  %1374 = mul nuw nsw i32 %28, 72, !dbg !71
  %1375 = add nuw nsw i32 %1374, %34, !dbg !71
  %1376 = zext i32 %1375 to i64, !dbg !71
  %1377 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1376, !dbg !71
  %1378 = load <4 x i32>, ptr addrspace(3) %1377, align 16, !dbg !71
  %1379 = mul nuw nsw i32 %29, 72, !dbg !71
  %1380 = add nuw nsw i32 %1379, %34, !dbg !71
  %1381 = zext i32 %1380 to i64, !dbg !71
  %1382 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1381, !dbg !71
  %1383 = load <4 x i32>, ptr addrspace(3) %1382, align 16, !dbg !71
  %1384 = mul nuw nsw i32 %30, 72, !dbg !71
  %1385 = add nuw nsw i32 %1384, %34, !dbg !71
  %1386 = zext i32 %1385 to i64, !dbg !71
  %1387 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1386, !dbg !71
  %1388 = load <4 x i32>, ptr addrspace(3) %1387, align 16, !dbg !71
  %1389 = mul nuw nsw i32 %31, 72, !dbg !71
  %1390 = add nuw nsw i32 %1389, %34, !dbg !71
  %1391 = zext i32 %1390 to i64, !dbg !71
  %1392 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1391, !dbg !71
  %1393 = load <4 x i32>, ptr addrspace(3) %1392, align 16, !dbg !71
  %.extract = extractelement <4 x i32> %1378, i64 0, !dbg !71
  store i32 %.extract, ptr addrspace(1) %1201, align 4, !dbg !71
  %.extract3 = extractelement <4 x i32> %1378, i64 1, !dbg !71
  store i32 %.extract3, ptr addrspace(1) %1202, align 4, !dbg !71
  %.extract5 = extractelement <4 x i32> %1378, i64 2, !dbg !71
  store i32 %.extract5, ptr addrspace(1) %1203, align 4, !dbg !71
  %.extract7 = extractelement <4 x i32> %1378, i64 3, !dbg !71
  store i32 %.extract7, ptr addrspace(1) %1204, align 4, !dbg !71
  %.extract9 = extractelement <4 x i32> %1383, i64 0, !dbg !71
  store i32 %.extract9, ptr addrspace(1) %1205, align 4, !dbg !71
  %.extract11 = extractelement <4 x i32> %1383, i64 1, !dbg !71
  store i32 %.extract11, ptr addrspace(1) %1206, align 4, !dbg !71
  %.extract13 = extractelement <4 x i32> %1383, i64 2, !dbg !71
  store i32 %.extract13, ptr addrspace(1) %1207, align 4, !dbg !71
  %.extract15 = extractelement <4 x i32> %1383, i64 3, !dbg !71
  store i32 %.extract15, ptr addrspace(1) %1208, align 4, !dbg !71
  %.extract17 = extractelement <4 x i32> %1388, i64 0, !dbg !71
  store i32 %.extract17, ptr addrspace(1) %1209, align 4, !dbg !71
  %.extract19 = extractelement <4 x i32> %1388, i64 1, !dbg !71
  store i32 %.extract19, ptr addrspace(1) %1210, align 4, !dbg !71
  %.extract21 = extractelement <4 x i32> %1388, i64 2, !dbg !71
  store i32 %.extract21, ptr addrspace(1) %1211, align 4, !dbg !71
  %.extract23 = extractelement <4 x i32> %1388, i64 3, !dbg !71
  store i32 %.extract23, ptr addrspace(1) %1212, align 4, !dbg !71
  %.extract25 = extractelement <4 x i32> %1393, i64 0, !dbg !71
  store i32 %.extract25, ptr addrspace(1) %1213, align 4, !dbg !71
  %.extract27 = extractelement <4 x i32> %1393, i64 1, !dbg !71
  store i32 %.extract27, ptr addrspace(1) %1214, align 4, !dbg !71
  %.extract29 = extractelement <4 x i32> %1393, i64 2, !dbg !71
  store i32 %.extract29, ptr addrspace(1) %1215, align 4, !dbg !71
  %.extract31 = extractelement <4 x i32> %1393, i64 3, !dbg !71
  store i32 %.extract31, ptr addrspace(1) %1216, align 4, !dbg !71
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.y() #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.exp2.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.log2.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i1 @llvm.amdgcn.class.f32(float, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.exp2.v2f32(<2 x float>) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.exp2.v4f32(<4 x float>) #4

attributes #0 = { "amdgpu-flat-work-group-size"="1, 256" "amdgpu-unsafe-fp-atomics"="true" "amdgpu-waves-per-eu"="3" "denormal-fp-math-f32"="preserve-sign" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.dbg.cu = !{!3}
!nvvm.annotations = !{!5}
!opencl.ocl.version = !{}
!llvm.ident = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 0}
!3 = distinct !DICompileUnit(language: DW_LANG_C, file: !4, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!4 = !DIFile(filename: "06-fused-attention.py", directory: "/triton/python/tutorials")
!5 = !{ptr @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de, !"kernel", i32 1}
!6 = !{i32 2, i32 0}
!7 = !{!"clang version 14.0.0"}
!8 = !{!"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"}
!9 = distinct !DISubprogram(name: "_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de", linkageName: "_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de", scope: !4, file: !4, line: 90, type: !10, scopeLine: 90, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !3)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DILocation(line: 142, column: 46, scope: !9)
!13 = !DILocation(line: 153, column: 16, scope: !9)
!14 = !DILocation(line: 182, column: 21, scope: !9)
!15 = !DILocation(line: 104, column: 28, scope: !9)
!16 = !DILocation(line: 105, column: 27, scope: !9)
!17 = !DILocation(line: 106, column: 26, scope: !9)
!18 = !DILocation(line: 110, column: 17, scope: !9)
!19 = !DILocation(line: 113, column: 27, scope: !9)
!20 = !DILocation(line: 109, column: 18, scope: !9)
!21 = !DILocation(line: 118, column: 17, scope: !9)
!22 = !DILocation(line: 117, column: 18, scope: !9)
!23 = !DILocation(line: 126, column: 17, scope: !9)
!24 = !DILocation(line: 125, column: 18, scope: !9)
!25 = !DILocation(line: 142, column: 33, scope: !9)
!26 = !DILocation(line: 151, column: 26, scope: !9)
!27 = !DILocation(line: 154, column: 13, scope: !9)
!28 = !DILocation(line: 154, column: 26, scope: !9)
!29 = !DILocation(line: 60, column: 20, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !9, file: !4, discriminator: 0)
!31 = !DILocation(line: 164, column: 19, scope: !30)
!32 = !DILocation(line: 57, column: 33, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 67, scope: !9, inlinedAt: !34)
!34 = !DILocation(line: 164, column: 19, scope: !9)
!35 = !DILocation(line: 124, column: 23, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/triton/python/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !30, file: !37, discriminator: 0)
!39 = !DILocation(line: 167, column: 40, scope: !36, inlinedAt: !40)
!40 = !DILocation(line: 68, column: 42, scope: !36, inlinedAt: !41)
!41 = !DILocation(line: 164, column: 19, scope: !36)
!42 = !DILocation(line: 167, column: 40, scope: !38, inlinedAt: !43)
!43 = !DILocation(line: 68, column: 42, scope: !38, inlinedAt: !44)
!44 = !DILocation(line: 164, column: 19, scope: !38)
!45 = !DILocation(line: 124, column: 23, scope: !38, inlinedAt: !46)
!46 = !DILocation(line: 68, column: 31, scope: !38, inlinedAt: !44)
!47 = !DILocation(line: 69, column: 18, scope: !30, inlinedAt: !31)
!48 = !DILocation(line: 70, column: 25, scope: !30, inlinedAt: !31)
!49 = !DILocation(line: 72, column: 35, scope: !30, inlinedAt: !31)
!50 = !DILocation(line: 72, column: 29, scope: !30, inlinedAt: !31)
!51 = !DILocation(line: 73, column: 20, scope: !30, inlinedAt: !31)
!52 = !DILocation(line: 75, column: 24, scope: !30, inlinedAt: !31)
!53 = !DILocation(line: 76, column: 27, scope: !30, inlinedAt: !31)
!54 = !DILocation(line: 76, scope: !9, inlinedAt: !34)
!55 = !DILocation(line: 234, column: 15, scope: !36, inlinedAt: !56)
!56 = !DILocation(line: 243, column: 36, scope: !36, inlinedAt: !57)
!57 = !DILocation(line: 78, column: 25, scope: !36, inlinedAt: !41)
!58 = !DILocation(line: 243, column: 36, scope: !38, inlinedAt: !59)
!59 = !DILocation(line: 78, column: 25, scope: !38, inlinedAt: !44)
!60 = !DILocation(line: 79, column: 20, scope: !30, inlinedAt: !31)
!61 = !DILocation(line: 79, column: 28, scope: !30, inlinedAt: !31)
!62 = !DILocation(line: 83, column: 46, scope: !30, inlinedAt: !31)
!63 = !DILocation(line: 182, column: 40, scope: !9)
!64 = !DILocation(line: 182, column: 27, scope: !9)
!65 = !DILocation(line: 181, column: 26, scope: !9)
!66 = !DILocation(line: 181, column: 17, scope: !9)
!67 = !DILocation(line: 181, column: 34, scope: !9)
!68 = !DILocation(line: 180, column: 16, scope: !9)
!69 = !DILocation(line: 133, column: 18, scope: !9)
!70 = !DILocation(line: 134, column: 19, scope: !9)
!71 = !DILocation(line: 183, column: 26, scope: !9)
!72 = !DILocation(line: 183, column: 33, scope: !9)
!73 = !DILocation(line: 183, column: 4, scope: !9)
