; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

; Function Attrs: nofree nounwind
define amdgpu_kernel void @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de(ptr addrspace(1) inreg nocapture readonly %0, ptr addrspace(1) inreg nocapture readonly %1, ptr addrspace(1) inreg nocapture readonly %2, float inreg %3, ptr addrspace(1) inreg nocapture writeonly %4, ptr addrspace(1) inreg nocapture writeonly %5, i32 inreg %6, i32 inreg %7, i32 inreg %8, i32 inreg %9, i32 inreg %10, i32 inreg %11, i32 inreg %12, i32 inreg %13, i32 inreg %14, i32 inreg %15, i32 inreg %16, i32 inreg %17, i32 inreg %18, i32 inreg %19, i32 inreg %20) local_unnamed_addr #0 !dbg !9 {
  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !12
  %23 = and i32 %22, 63, !dbg !12
  %24 = lshr i32 %22, 6, !dbg !12
  %25 = and i32 %24, 3, !dbg !12
  %26 = lshr i32 %23, 4, !dbg !12
  %27 = shl nuw nsw i32 %25, 2, !dbg !12
  %28 = or i32 %27, %26, !dbg !12
  %29 = or i32 %28, 16, !dbg !12
  %30 = or i32 %28, 32, !dbg !12
  %31 = or i32 %28, 48, !dbg !12
  %32 = or i32 %28, 64, !dbg !12
  %33 = or i32 %28, 80, !dbg !12
  %34 = or i32 %28, 96, !dbg !12
  %35 = or i32 %28, 112, !dbg !12
  %36 = shl nuw nsw i32 %25, 5, !dbg !12
  %37 = and i32 %22, 31, !dbg !12
  %38 = or i32 %36, %37, !dbg !12
  %39 = shl i32 %22, 3, !dbg !12
  %40 = and i32 %39, 120, !dbg !12
  %41 = and i32 %22, 127, !dbg !12
  %42 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !13
  %43 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !14
  %44 = mul i32 %43, %7, !dbg !15
  %45 = sext i32 %44 to i64, !dbg !16
  %46 = getelementptr half, ptr addrspace(1) %0, i64 %45, !dbg !16
  %47 = shl i32 %42, 7, !dbg !17
  %48 = sext i32 %8 to i64, !dbg !18
  %49 = sext i32 %47 to i64, !dbg !18
  %50 = getelementptr half, ptr addrspace(1) %1, i64 %45, !dbg !19
  %51 = sext i32 %11 to i64, !dbg !20
  %52 = getelementptr half, ptr addrspace(1) %2, i64 %45, !dbg !21
  %53 = sext i32 %14 to i64, !dbg !22
  %54 = or i32 %47, %41, !dbg !23
  %55 = fmul float %3, 0x3FF7154760000000, !dbg !24
  %56 = zext i32 %28 to i64
  %57 = zext i32 %29 to i64
  %58 = zext i32 %30 to i64
  %59 = zext i32 %31 to i64
  %60 = zext i32 %32 to i64
  %61 = zext i32 %33 to i64
  %62 = zext i32 %34 to i64
  %63 = zext i32 %35 to i64
  %64 = zext i32 %40 to i64
  %65 = or i64 %56, %49, !dbg !25
  %66 = or i64 %57, %49, !dbg !25
  %67 = or i64 %58, %49, !dbg !25
  %68 = or i64 %59, %49, !dbg !25
  %69 = or i64 %60, %49, !dbg !25
  %70 = or i64 %61, %49, !dbg !25
  %71 = or i64 %62, %49, !dbg !25
  %72 = or i64 %63, %49, !dbg !25
  %73 = mul nsw i64 %65, %48, !dbg !25
  %74 = mul nsw i64 %66, %48, !dbg !25
  %75 = mul nsw i64 %67, %48, !dbg !25
  %76 = mul nsw i64 %68, %48, !dbg !25
  %77 = mul nsw i64 %69, %48, !dbg !25
  %78 = mul nsw i64 %70, %48, !dbg !25
  %79 = mul nsw i64 %71, %48, !dbg !25
  %80 = mul nsw i64 %72, %48, !dbg !25
  %81 = getelementptr half, ptr addrspace(1) %46, i64 %73, !dbg !25
  %82 = getelementptr half, ptr addrspace(1) %46, i64 %74, !dbg !25
  %83 = getelementptr half, ptr addrspace(1) %46, i64 %75, !dbg !25
  %84 = getelementptr half, ptr addrspace(1) %46, i64 %76, !dbg !25
  %85 = getelementptr half, ptr addrspace(1) %46, i64 %77, !dbg !25
  %86 = getelementptr half, ptr addrspace(1) %46, i64 %78, !dbg !25
  %87 = getelementptr half, ptr addrspace(1) %46, i64 %79, !dbg !25
  %88 = getelementptr half, ptr addrspace(1) %46, i64 %80, !dbg !25
  %89 = getelementptr half, ptr addrspace(1) %81, i64 %64, !dbg !25
  %90 = getelementptr half, ptr addrspace(1) %82, i64 %64, !dbg !25
  %91 = getelementptr half, ptr addrspace(1) %83, i64 %64, !dbg !25
  %92 = getelementptr half, ptr addrspace(1) %84, i64 %64, !dbg !25
  %93 = getelementptr half, ptr addrspace(1) %85, i64 %64, !dbg !25
  %94 = getelementptr half, ptr addrspace(1) %86, i64 %64, !dbg !25
  %95 = getelementptr half, ptr addrspace(1) %87, i64 %64, !dbg !25
  %96 = getelementptr half, ptr addrspace(1) %88, i64 %64, !dbg !25
  %97 = addrspacecast ptr addrspace(1) %89 to ptr, !dbg !25
  %98 = getelementptr inbounds <8 x half>, ptr %97, i64 0, i64 4, !dbg !25
  %99 = addrspacecast ptr addrspace(1) %90 to ptr, !dbg !25
  %100 = getelementptr inbounds <8 x half>, ptr %99, i64 0, i64 4, !dbg !25
  %101 = addrspacecast ptr addrspace(1) %91 to ptr, !dbg !25
  %102 = getelementptr inbounds <8 x half>, ptr %101, i64 0, i64 4, !dbg !25
  %103 = addrspacecast ptr addrspace(1) %92 to ptr, !dbg !25
  %104 = getelementptr inbounds <8 x half>, ptr %103, i64 0, i64 4, !dbg !25
  %105 = addrspacecast ptr addrspace(1) %93 to ptr, !dbg !25
  %106 = getelementptr inbounds <8 x half>, ptr %105, i64 0, i64 4, !dbg !25
  %107 = addrspacecast ptr addrspace(1) %94 to ptr, !dbg !25
  %108 = getelementptr inbounds <8 x half>, ptr %107, i64 0, i64 4, !dbg !25
  %109 = addrspacecast ptr addrspace(1) %95 to ptr, !dbg !25
  %110 = getelementptr inbounds <8 x half>, ptr %109, i64 0, i64 4, !dbg !25
  %111 = addrspacecast ptr addrspace(1) %96 to ptr, !dbg !25
  %112 = getelementptr inbounds <8 x half>, ptr %111, i64 0, i64 4, !dbg !25
  %113 = load <4 x half>, ptr %97, align 16, !dbg !25
  %114 = fpext <4 x half> %113 to <4 x float>, !dbg !26
  %115 = insertelement <4 x float> poison, float %55, i64 0, !dbg !26
  %116 = shufflevector <4 x float> %115, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !26
  %117 = fmul <4 x float> %116, %114, !dbg !26
  %118 = fptrunc <4 x float> %117 to <4 x half>, !dbg !27
  %119 = load <4 x half>, ptr %98, align 8, !dbg !25
  %120 = fpext <4 x half> %119 to <4 x float>, !dbg !26
  %121 = fmul <4 x float> %116, %120, !dbg !26
  %122 = fptrunc <4 x float> %121 to <4 x half>, !dbg !27
  %123 = load <4 x half>, ptr %99, align 16, !dbg !25
  %124 = fpext <4 x half> %123 to <4 x float>, !dbg !26
  %125 = fmul <4 x float> %116, %124, !dbg !26
  %126 = fptrunc <4 x float> %125 to <4 x half>, !dbg !27
  %127 = load <4 x half>, ptr %100, align 8, !dbg !25
  %128 = fpext <4 x half> %127 to <4 x float>, !dbg !26
  %129 = fmul <4 x float> %116, %128, !dbg !26
  %130 = fptrunc <4 x float> %129 to <4 x half>, !dbg !27
  %131 = load <4 x half>, ptr %101, align 16, !dbg !25
  %132 = fpext <4 x half> %131 to <4 x float>, !dbg !26
  %133 = fmul <4 x float> %116, %132, !dbg !26
  %134 = fptrunc <4 x float> %133 to <4 x half>, !dbg !27
  %135 = load <4 x half>, ptr %102, align 8, !dbg !25
  %136 = fpext <4 x half> %135 to <4 x float>, !dbg !26
  %137 = fmul <4 x float> %116, %136, !dbg !26
  %138 = fptrunc <4 x float> %137 to <4 x half>, !dbg !27
  %139 = load <4 x half>, ptr %103, align 16, !dbg !25
  %140 = fpext <4 x half> %139 to <4 x float>, !dbg !26
  %141 = fmul <4 x float> %116, %140, !dbg !26
  %142 = fptrunc <4 x float> %141 to <4 x half>, !dbg !27
  %143 = load <4 x half>, ptr %104, align 8, !dbg !25
  %144 = fpext <4 x half> %143 to <4 x float>, !dbg !26
  %145 = fmul <4 x float> %116, %144, !dbg !26
  %146 = fptrunc <4 x float> %145 to <4 x half>, !dbg !27
  %147 = load <4 x half>, ptr %105, align 16, !dbg !25
  %148 = fpext <4 x half> %147 to <4 x float>, !dbg !26
  %149 = fmul <4 x float> %116, %148, !dbg !26
  %150 = fptrunc <4 x float> %149 to <4 x half>, !dbg !27
  %151 = load <4 x half>, ptr %106, align 8, !dbg !25
  %152 = fpext <4 x half> %151 to <4 x float>, !dbg !26
  %153 = fmul <4 x float> %116, %152, !dbg !26
  %154 = fptrunc <4 x float> %153 to <4 x half>, !dbg !27
  %155 = load <4 x half>, ptr %107, align 16, !dbg !25
  %156 = fpext <4 x half> %155 to <4 x float>, !dbg !26
  %157 = fmul <4 x float> %116, %156, !dbg !26
  %158 = fptrunc <4 x float> %157 to <4 x half>, !dbg !27
  %159 = load <4 x half>, ptr %108, align 8, !dbg !25
  %160 = fpext <4 x half> %159 to <4 x float>, !dbg !26
  %161 = fmul <4 x float> %116, %160, !dbg !26
  %162 = fptrunc <4 x float> %161 to <4 x half>, !dbg !27
  %163 = load <4 x half>, ptr %109, align 16, !dbg !25
  %164 = fpext <4 x half> %163 to <4 x float>, !dbg !26
  %165 = fmul <4 x float> %116, %164, !dbg !26
  %166 = fptrunc <4 x float> %165 to <4 x half>, !dbg !27
  %167 = load <4 x half>, ptr %110, align 8, !dbg !25
  %168 = fpext <4 x half> %167 to <4 x float>, !dbg !26
  %169 = fmul <4 x float> %116, %168, !dbg !26
  %170 = fptrunc <4 x float> %169 to <4 x half>, !dbg !27
  %171 = load <4 x half>, ptr %111, align 16, !dbg !25
  %172 = fpext <4 x half> %171 to <4 x float>, !dbg !26
  %173 = fmul <4 x float> %116, %172, !dbg !26
  %174 = fptrunc <4 x float> %173 to <4 x half>, !dbg !27
  %175 = load <4 x half>, ptr %112, align 8, !dbg !25
  %176 = fpext <4 x half> %175 to <4 x float>, !dbg !26
  %177 = fmul <4 x float> %116, %176, !dbg !26
  %178 = fptrunc <4 x float> %177 to <4 x half>, !dbg !27
  %179 = shl nuw nsw i32 %28, 7, !dbg !27
  %180 = lshr exact i32 %40, 2, !dbg !27
  %181 = xor i32 %28, %180, !dbg !27
  %182 = shl nuw nsw i32 %181, 2, !dbg !27
  %183 = or i32 %182, %179, !dbg !27
  %184 = zext i32 %183 to i64, !dbg !27
  %185 = getelementptr half, ptr addrspace(3) @global_smem, i64 %184, !dbg !27
  %186 = or i32 %180, 1, !dbg !27
  %187 = xor i32 %186, %28, !dbg !27
  %188 = shl nuw nsw i32 %187, 2, !dbg !27
  %189 = or i32 %188, %179, !dbg !27
  %190 = zext i32 %189 to i64, !dbg !27
  %191 = getelementptr half, ptr addrspace(3) @global_smem, i64 %190, !dbg !27
  %192 = getelementptr half, ptr addrspace(3) %185, i64 2048, !dbg !27
  %193 = getelementptr half, ptr addrspace(3) %191, i64 2048, !dbg !27
  %194 = getelementptr half, ptr addrspace(3) %185, i64 4096, !dbg !27
  %195 = getelementptr half, ptr addrspace(3) %191, i64 4096, !dbg !27
  %196 = getelementptr half, ptr addrspace(3) %185, i64 6144, !dbg !27
  %197 = getelementptr half, ptr addrspace(3) %191, i64 6144, !dbg !27
  %198 = getelementptr half, ptr addrspace(3) %185, i64 8192, !dbg !27
  %199 = getelementptr half, ptr addrspace(3) %191, i64 8192, !dbg !27
  %200 = getelementptr half, ptr addrspace(3) %185, i64 10240, !dbg !27
  %201 = getelementptr half, ptr addrspace(3) %191, i64 10240, !dbg !27
  %202 = getelementptr half, ptr addrspace(3) %185, i64 12288, !dbg !27
  %203 = getelementptr half, ptr addrspace(3) %191, i64 12288, !dbg !27
  %204 = getelementptr half, ptr addrspace(3) %185, i64 14336, !dbg !27
  %205 = getelementptr half, ptr addrspace(3) %191, i64 14336, !dbg !27
  store <4 x half> %118, ptr addrspace(3) %185, align 8, !dbg !27
  store <4 x half> %122, ptr addrspace(3) %191, align 8, !dbg !27
  store <4 x half> %126, ptr addrspace(3) %192, align 8, !dbg !27
  store <4 x half> %130, ptr addrspace(3) %193, align 8, !dbg !27
  store <4 x half> %134, ptr addrspace(3) %194, align 8, !dbg !27
  store <4 x half> %138, ptr addrspace(3) %195, align 8, !dbg !27
  store <4 x half> %142, ptr addrspace(3) %196, align 8, !dbg !27
  store <4 x half> %146, ptr addrspace(3) %197, align 8, !dbg !27
  store <4 x half> %150, ptr addrspace(3) %198, align 8, !dbg !27
  store <4 x half> %154, ptr addrspace(3) %199, align 8, !dbg !27
  store <4 x half> %158, ptr addrspace(3) %200, align 8, !dbg !27
  store <4 x half> %162, ptr addrspace(3) %201, align 8, !dbg !27
  store <4 x half> %166, ptr addrspace(3) %202, align 8, !dbg !27
  store <4 x half> %170, ptr addrspace(3) %203, align 8, !dbg !27
  store <4 x half> %174, ptr addrspace(3) %204, align 8, !dbg !27
  store <4 x half> %178, ptr addrspace(3) %205, align 8, !dbg !27
  fence syncscope("workgroup") release, !dbg !27
  tail call void @llvm.amdgcn.s.barrier(), !dbg !27
  fence syncscope("workgroup") acquire, !dbg !27
  %206 = icmp ugt i32 %23, 31, !dbg !27
  %207 = zext i1 %206 to i32, !dbg !27
  %208 = and i32 %22, 15, !dbg !27
  %209 = xor i32 %208, %207, !dbg !27
  %210 = shl nuw nsw i32 %209, 2, !dbg !27
  %211 = shl nuw nsw i32 %38, 7, !dbg !27
  %212 = or i32 %211, %210, !dbg !27
  %213 = or i32 %207, 2, !dbg !27
  %214 = xor i32 %213, %208, !dbg !27
  %215 = shl nuw nsw i32 %214, 2, !dbg !27
  %216 = or i32 %215, %211, !dbg !27
  %217 = or i32 %207, 4, !dbg !27
  %218 = xor i32 %217, %208, !dbg !27
  %219 = shl nuw nsw i32 %218, 2, !dbg !27
  %220 = or i32 %219, %211, !dbg !27
  %221 = or i32 %207, 6, !dbg !27
  %222 = xor i32 %221, %208, !dbg !27
  %223 = shl nuw nsw i32 %222, 2, !dbg !27
  %224 = or i32 %223, %211, !dbg !27
  %225 = or i32 %207, 8, !dbg !27
  %226 = xor i32 %225, %208, !dbg !27
  %227 = shl nuw nsw i32 %226, 2, !dbg !27
  %228 = or i32 %227, %211, !dbg !27
  %229 = or i32 %207, 10, !dbg !27
  %230 = xor i32 %229, %208, !dbg !27
  %231 = shl nuw nsw i32 %230, 2, !dbg !27
  %232 = or i32 %231, %211, !dbg !27
  %233 = or i32 %207, 12, !dbg !27
  %234 = xor i32 %233, %208, !dbg !27
  %235 = shl nuw nsw i32 %234, 2, !dbg !27
  %236 = or i32 %235, %211, !dbg !27
  %237 = or i32 %207, 14, !dbg !27
  %238 = xor i32 %237, %208, !dbg !27
  %239 = shl nuw nsw i32 %238, 2, !dbg !27
  %240 = or i32 %239, %211, !dbg !27
  %241 = or i32 %207, 16, !dbg !27
  %242 = xor i32 %241, %208, !dbg !27
  %243 = shl nuw nsw i32 %242, 2, !dbg !27
  %244 = or i32 %243, %211, !dbg !27
  %245 = or i32 %207, 18, !dbg !27
  %246 = xor i32 %245, %208, !dbg !27
  %247 = shl nuw nsw i32 %246, 2, !dbg !27
  %248 = or i32 %247, %211, !dbg !27
  %249 = or i32 %207, 20, !dbg !27
  %250 = xor i32 %249, %208, !dbg !27
  %251 = shl nuw nsw i32 %250, 2, !dbg !27
  %252 = or i32 %251, %211, !dbg !27
  %253 = or i32 %207, 22, !dbg !27
  %254 = xor i32 %253, %208, !dbg !27
  %255 = shl nuw nsw i32 %254, 2, !dbg !27
  %256 = or i32 %255, %211, !dbg !27
  %257 = or i32 %207, 24, !dbg !27
  %258 = xor i32 %257, %208, !dbg !27
  %259 = shl nuw nsw i32 %258, 2, !dbg !27
  %260 = or i32 %259, %211, !dbg !27
  %261 = or i32 %207, 26, !dbg !27
  %262 = xor i32 %261, %208, !dbg !27
  %263 = shl nuw nsw i32 %262, 2, !dbg !27
  %264 = or i32 %263, %211, !dbg !27
  %265 = or i32 %207, 28, !dbg !27
  %266 = xor i32 %265, %208, !dbg !27
  %267 = shl nuw nsw i32 %266, 2, !dbg !27
  %268 = or i32 %267, %211, !dbg !27
  %269 = or i32 %207, 30, !dbg !27
  %270 = xor i32 %269, %208, !dbg !27
  %271 = shl nuw nsw i32 %270, 2, !dbg !27
  %272 = or i32 %271, %211, !dbg !27
  %273 = zext i32 %212 to i64, !dbg !27
  %274 = getelementptr half, ptr addrspace(3) @global_smem, i64 %273, !dbg !27
  %275 = load <4 x half>, ptr addrspace(3) %274, align 8, !dbg !27
  %276 = zext i32 %216 to i64, !dbg !27
  %277 = getelementptr half, ptr addrspace(3) @global_smem, i64 %276, !dbg !27
  %278 = load <4 x half>, ptr addrspace(3) %277, align 8, !dbg !27
  %279 = zext i32 %220 to i64, !dbg !27
  %280 = getelementptr half, ptr addrspace(3) @global_smem, i64 %279, !dbg !27
  %281 = load <4 x half>, ptr addrspace(3) %280, align 8, !dbg !27
  %282 = zext i32 %224 to i64, !dbg !27
  %283 = getelementptr half, ptr addrspace(3) @global_smem, i64 %282, !dbg !27
  %284 = load <4 x half>, ptr addrspace(3) %283, align 8, !dbg !27
  %285 = zext i32 %228 to i64, !dbg !27
  %286 = getelementptr half, ptr addrspace(3) @global_smem, i64 %285, !dbg !27
  %287 = load <4 x half>, ptr addrspace(3) %286, align 8, !dbg !27
  %288 = zext i32 %232 to i64, !dbg !27
  %289 = getelementptr half, ptr addrspace(3) @global_smem, i64 %288, !dbg !27
  %290 = load <4 x half>, ptr addrspace(3) %289, align 8, !dbg !27
  %291 = zext i32 %236 to i64, !dbg !27
  %292 = getelementptr half, ptr addrspace(3) @global_smem, i64 %291, !dbg !27
  %293 = load <4 x half>, ptr addrspace(3) %292, align 8, !dbg !27
  %294 = zext i32 %240 to i64, !dbg !27
  %295 = getelementptr half, ptr addrspace(3) @global_smem, i64 %294, !dbg !27
  %296 = load <4 x half>, ptr addrspace(3) %295, align 8, !dbg !27
  %297 = zext i32 %244 to i64, !dbg !27
  %298 = getelementptr half, ptr addrspace(3) @global_smem, i64 %297, !dbg !27
  %299 = load <4 x half>, ptr addrspace(3) %298, align 8, !dbg !27
  %300 = zext i32 %248 to i64, !dbg !27
  %301 = getelementptr half, ptr addrspace(3) @global_smem, i64 %300, !dbg !27
  %302 = load <4 x half>, ptr addrspace(3) %301, align 8, !dbg !27
  %303 = zext i32 %252 to i64, !dbg !27
  %304 = getelementptr half, ptr addrspace(3) @global_smem, i64 %303, !dbg !27
  %305 = load <4 x half>, ptr addrspace(3) %304, align 8, !dbg !27
  %306 = zext i32 %256 to i64, !dbg !27
  %307 = getelementptr half, ptr addrspace(3) @global_smem, i64 %306, !dbg !27
  %308 = load <4 x half>, ptr addrspace(3) %307, align 8, !dbg !27
  %309 = zext i32 %260 to i64, !dbg !27
  %310 = getelementptr half, ptr addrspace(3) @global_smem, i64 %309, !dbg !27
  %311 = load <4 x half>, ptr addrspace(3) %310, align 8, !dbg !27
  %312 = zext i32 %264 to i64, !dbg !27
  %313 = getelementptr half, ptr addrspace(3) @global_smem, i64 %312, !dbg !27
  %314 = load <4 x half>, ptr addrspace(3) %313, align 8, !dbg !27
  %315 = zext i32 %268 to i64, !dbg !27
  %316 = getelementptr half, ptr addrspace(3) @global_smem, i64 %315, !dbg !27
  %317 = load <4 x half>, ptr addrspace(3) %316, align 8, !dbg !27
  %318 = zext i32 %272 to i64, !dbg !27
  %319 = getelementptr half, ptr addrspace(3) @global_smem, i64 %318, !dbg !27
  %320 = load <4 x half>, ptr addrspace(3) %319, align 8, !dbg !27
  %321 = getelementptr half, ptr addrspace(1) %50, i64 %64, !dbg !28
  %322 = mul nsw i64 %53, %56, !dbg !31
  %323 = mul nsw i64 %53, %57, !dbg !31
  %324 = mul nsw i64 %53, %58, !dbg !31
  %325 = mul nsw i64 %53, %59, !dbg !31
  %326 = mul nsw i64 %53, %60, !dbg !31
  %327 = mul nsw i64 %53, %61, !dbg !31
  %328 = mul nsw i64 %53, %62, !dbg !31
  %329 = mul nsw i64 %53, %63, !dbg !31
  %330 = icmp sgt i32 %20, 0, !dbg !32
  br i1 %330, label %.lr.ph, label %._crit_edge, !dbg !32

.lr.ph:                                           ; preds = %21
  %331 = shl nuw nsw i32 %37, 7
  %332 = or i32 %210, %331
  %333 = or i32 %215, %331
  %334 = or i32 %219, %331
  %335 = or i32 %223, %331
  %336 = or i32 %227, %331
  %337 = or i32 %231, %331
  %338 = or i32 %235, %331
  %339 = or i32 %239, %331
  %340 = or i32 %243, %331
  %341 = or i32 %247, %331
  %342 = or i32 %251, %331
  %343 = or i32 %255, %331
  %344 = or i32 %259, %331
  %345 = or i32 %263, %331
  %346 = or i32 %267, %331
  %347 = or i32 %271, %331
  %348 = or i32 %332, 4096
  %349 = or i32 %333, 4096
  %350 = or i32 %334, 4096
  %351 = or i32 %335, 4096
  %352 = or i32 %336, 4096
  %353 = or i32 %337, 4096
  %354 = or i32 %338, 4096
  %355 = or i32 %339, 4096
  %356 = or i32 %340, 4096
  %357 = or i32 %341, 4096
  %358 = or i32 %342, 4096
  %359 = or i32 %343, 4096
  %360 = or i32 %344, 4096
  %361 = or i32 %345, 4096
  %362 = or i32 %346, 4096
  %363 = or i32 %347, 4096
  %364 = or i32 %332, 8192
  %365 = or i32 %333, 8192
  %366 = or i32 %334, 8192
  %367 = or i32 %335, 8192
  %368 = or i32 %336, 8192
  %369 = or i32 %337, 8192
  %370 = or i32 %338, 8192
  %371 = or i32 %339, 8192
  %372 = or i32 %340, 8192
  %373 = or i32 %341, 8192
  %374 = or i32 %342, 8192
  %375 = or i32 %343, 8192
  %376 = or i32 %344, 8192
  %377 = or i32 %345, 8192
  %378 = or i32 %346, 8192
  %379 = or i32 %347, 8192
  %380 = or i32 %332, 12288
  %381 = or i32 %333, 12288
  %382 = or i32 %334, 12288
  %383 = or i32 %335, 12288
  %384 = or i32 %336, 12288
  %385 = or i32 %337, 12288
  %386 = or i32 %338, 12288
  %387 = or i32 %339, 12288
  %388 = or i32 %340, 12288
  %389 = or i32 %341, 12288
  %390 = or i32 %342, 12288
  %391 = or i32 %343, 12288
  %392 = or i32 %344, 12288
  %393 = or i32 %345, 12288
  %394 = or i32 %346, 12288
  %395 = or i32 %347, 12288
  %396 = zext i32 %332 to i64
  %397 = getelementptr half, ptr addrspace(3) @global_smem, i64 %396
  %398 = zext i32 %333 to i64
  %399 = getelementptr half, ptr addrspace(3) @global_smem, i64 %398
  %400 = zext i32 %334 to i64
  %401 = getelementptr half, ptr addrspace(3) @global_smem, i64 %400
  %402 = zext i32 %335 to i64
  %403 = getelementptr half, ptr addrspace(3) @global_smem, i64 %402
  %404 = zext i32 %336 to i64
  %405 = getelementptr half, ptr addrspace(3) @global_smem, i64 %404
  %406 = zext i32 %337 to i64
  %407 = getelementptr half, ptr addrspace(3) @global_smem, i64 %406
  %408 = zext i32 %338 to i64
  %409 = getelementptr half, ptr addrspace(3) @global_smem, i64 %408
  %410 = zext i32 %339 to i64
  %411 = getelementptr half, ptr addrspace(3) @global_smem, i64 %410
  %412 = zext i32 %340 to i64
  %413 = getelementptr half, ptr addrspace(3) @global_smem, i64 %412
  %414 = zext i32 %341 to i64
  %415 = getelementptr half, ptr addrspace(3) @global_smem, i64 %414
  %416 = zext i32 %342 to i64
  %417 = getelementptr half, ptr addrspace(3) @global_smem, i64 %416
  %418 = zext i32 %343 to i64
  %419 = getelementptr half, ptr addrspace(3) @global_smem, i64 %418
  %420 = zext i32 %344 to i64
  %421 = getelementptr half, ptr addrspace(3) @global_smem, i64 %420
  %422 = zext i32 %345 to i64
  %423 = getelementptr half, ptr addrspace(3) @global_smem, i64 %422
  %424 = zext i32 %346 to i64
  %425 = getelementptr half, ptr addrspace(3) @global_smem, i64 %424
  %426 = zext i32 %347 to i64
  %427 = getelementptr half, ptr addrspace(3) @global_smem, i64 %426
  %428 = zext i32 %348 to i64
  %429 = getelementptr half, ptr addrspace(3) @global_smem, i64 %428
  %430 = zext i32 %349 to i64
  %431 = getelementptr half, ptr addrspace(3) @global_smem, i64 %430
  %432 = zext i32 %350 to i64
  %433 = getelementptr half, ptr addrspace(3) @global_smem, i64 %432
  %434 = zext i32 %351 to i64
  %435 = getelementptr half, ptr addrspace(3) @global_smem, i64 %434
  %436 = zext i32 %352 to i64
  %437 = getelementptr half, ptr addrspace(3) @global_smem, i64 %436
  %438 = zext i32 %353 to i64
  %439 = getelementptr half, ptr addrspace(3) @global_smem, i64 %438
  %440 = zext i32 %354 to i64
  %441 = getelementptr half, ptr addrspace(3) @global_smem, i64 %440
  %442 = zext i32 %355 to i64
  %443 = getelementptr half, ptr addrspace(3) @global_smem, i64 %442
  %444 = zext i32 %356 to i64
  %445 = getelementptr half, ptr addrspace(3) @global_smem, i64 %444
  %446 = zext i32 %357 to i64
  %447 = getelementptr half, ptr addrspace(3) @global_smem, i64 %446
  %448 = zext i32 %358 to i64
  %449 = getelementptr half, ptr addrspace(3) @global_smem, i64 %448
  %450 = zext i32 %359 to i64
  %451 = getelementptr half, ptr addrspace(3) @global_smem, i64 %450
  %452 = zext i32 %360 to i64
  %453 = getelementptr half, ptr addrspace(3) @global_smem, i64 %452
  %454 = zext i32 %361 to i64
  %455 = getelementptr half, ptr addrspace(3) @global_smem, i64 %454
  %456 = zext i32 %362 to i64
  %457 = getelementptr half, ptr addrspace(3) @global_smem, i64 %456
  %458 = zext i32 %363 to i64
  %459 = getelementptr half, ptr addrspace(3) @global_smem, i64 %458
  %460 = zext i32 %364 to i64
  %461 = getelementptr half, ptr addrspace(3) @global_smem, i64 %460
  %462 = zext i32 %365 to i64
  %463 = getelementptr half, ptr addrspace(3) @global_smem, i64 %462
  %464 = zext i32 %366 to i64
  %465 = getelementptr half, ptr addrspace(3) @global_smem, i64 %464
  %466 = zext i32 %367 to i64
  %467 = getelementptr half, ptr addrspace(3) @global_smem, i64 %466
  %468 = zext i32 %368 to i64
  %469 = getelementptr half, ptr addrspace(3) @global_smem, i64 %468
  %470 = zext i32 %369 to i64
  %471 = getelementptr half, ptr addrspace(3) @global_smem, i64 %470
  %472 = zext i32 %370 to i64
  %473 = getelementptr half, ptr addrspace(3) @global_smem, i64 %472
  %474 = zext i32 %371 to i64
  %475 = getelementptr half, ptr addrspace(3) @global_smem, i64 %474
  %476 = zext i32 %372 to i64
  %477 = getelementptr half, ptr addrspace(3) @global_smem, i64 %476
  %478 = zext i32 %373 to i64
  %479 = getelementptr half, ptr addrspace(3) @global_smem, i64 %478
  %480 = zext i32 %374 to i64
  %481 = getelementptr half, ptr addrspace(3) @global_smem, i64 %480
  %482 = zext i32 %375 to i64
  %483 = getelementptr half, ptr addrspace(3) @global_smem, i64 %482
  %484 = zext i32 %376 to i64
  %485 = getelementptr half, ptr addrspace(3) @global_smem, i64 %484
  %486 = zext i32 %377 to i64
  %487 = getelementptr half, ptr addrspace(3) @global_smem, i64 %486
  %488 = zext i32 %378 to i64
  %489 = getelementptr half, ptr addrspace(3) @global_smem, i64 %488
  %490 = zext i32 %379 to i64
  %491 = getelementptr half, ptr addrspace(3) @global_smem, i64 %490
  %492 = zext i32 %380 to i64
  %493 = getelementptr half, ptr addrspace(3) @global_smem, i64 %492
  %494 = zext i32 %381 to i64
  %495 = getelementptr half, ptr addrspace(3) @global_smem, i64 %494
  %496 = zext i32 %382 to i64
  %497 = getelementptr half, ptr addrspace(3) @global_smem, i64 %496
  %498 = zext i32 %383 to i64
  %499 = getelementptr half, ptr addrspace(3) @global_smem, i64 %498
  %500 = zext i32 %384 to i64
  %501 = getelementptr half, ptr addrspace(3) @global_smem, i64 %500
  %502 = zext i32 %385 to i64
  %503 = getelementptr half, ptr addrspace(3) @global_smem, i64 %502
  %504 = zext i32 %386 to i64
  %505 = getelementptr half, ptr addrspace(3) @global_smem, i64 %504
  %506 = zext i32 %387 to i64
  %507 = getelementptr half, ptr addrspace(3) @global_smem, i64 %506
  %508 = zext i32 %388 to i64
  %509 = getelementptr half, ptr addrspace(3) @global_smem, i64 %508
  %510 = zext i32 %389 to i64
  %511 = getelementptr half, ptr addrspace(3) @global_smem, i64 %510
  %512 = zext i32 %390 to i64
  %513 = getelementptr half, ptr addrspace(3) @global_smem, i64 %512
  %514 = zext i32 %391 to i64
  %515 = getelementptr half, ptr addrspace(3) @global_smem, i64 %514
  %516 = zext i32 %392 to i64
  %517 = getelementptr half, ptr addrspace(3) @global_smem, i64 %516
  %518 = zext i32 %393 to i64
  %519 = getelementptr half, ptr addrspace(3) @global_smem, i64 %518
  %520 = zext i32 %394 to i64
  %521 = getelementptr half, ptr addrspace(3) @global_smem, i64 %520
  %522 = zext i32 %395 to i64
  %523 = getelementptr half, ptr addrspace(3) @global_smem, i64 %522
  %524 = shl i32 %22, 2
  %525 = xor i32 %524, 128
  br label %526, !dbg !32

526:                                              ; preds = %.lr.ph, %526
  %527 = phi i64 [ 0, %.lr.ph ], [ %1293, %526 ]
  %528 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %850, %526 ]
  %529 = phi float [ 1.000000e+00, %.lr.ph ], [ %1292, %526 ]
  %530 = phi i32 [ 0, %.lr.ph ], [ %1294, %526 ]
  %531 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %1220, %526 ]
  %532 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %1204, %526 ]
  %533 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %1188, %526 ]
  %534 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %1172, %526 ]
  %535 = or i64 %527, %56, !dbg !28
  %536 = or i64 %527, %57, !dbg !28
  %537 = or i64 %527, %58, !dbg !28
  %538 = or i64 %527, %59, !dbg !28
  %539 = or i64 %527, %60, !dbg !28
  %540 = or i64 %527, %61, !dbg !28
  %541 = or i64 %527, %62, !dbg !28
  %542 = or i64 %527, %63, !dbg !28
  %543 = mul i64 %535, %51, !dbg !28
  %544 = mul i64 %536, %51, !dbg !28
  %545 = mul i64 %537, %51, !dbg !28
  %546 = mul i64 %538, %51, !dbg !28
  %547 = mul i64 %539, %51, !dbg !28
  %548 = mul i64 %540, %51, !dbg !28
  %549 = mul i64 %541, %51, !dbg !28
  %550 = mul i64 %542, %51, !dbg !28
  %551 = getelementptr half, ptr addrspace(1) %321, i64 %543, !dbg !28
  %552 = getelementptr half, ptr addrspace(1) %321, i64 %544, !dbg !28
  %553 = getelementptr half, ptr addrspace(1) %321, i64 %545, !dbg !28
  %554 = getelementptr half, ptr addrspace(1) %321, i64 %546, !dbg !28
  %555 = getelementptr half, ptr addrspace(1) %321, i64 %547, !dbg !28
  %556 = getelementptr half, ptr addrspace(1) %321, i64 %548, !dbg !28
  %557 = getelementptr half, ptr addrspace(1) %321, i64 %549, !dbg !28
  %558 = getelementptr half, ptr addrspace(1) %321, i64 %550, !dbg !28
  %559 = addrspacecast ptr addrspace(1) %551 to ptr, !dbg !28
  %560 = load <8 x half>, ptr %559, align 16, !dbg !28
  %561 = addrspacecast ptr addrspace(1) %552 to ptr, !dbg !28
  %562 = load <8 x half>, ptr %561, align 16, !dbg !28
  %563 = addrspacecast ptr addrspace(1) %553 to ptr, !dbg !28
  %564 = load <8 x half>, ptr %563, align 16, !dbg !28
  %565 = addrspacecast ptr addrspace(1) %554 to ptr, !dbg !28
  %566 = load <8 x half>, ptr %565, align 16, !dbg !28
  %567 = addrspacecast ptr addrspace(1) %555 to ptr, !dbg !28
  %568 = load <8 x half>, ptr %567, align 16, !dbg !28
  %569 = addrspacecast ptr addrspace(1) %556 to ptr, !dbg !28
  %570 = load <8 x half>, ptr %569, align 16, !dbg !28
  %571 = addrspacecast ptr addrspace(1) %557 to ptr, !dbg !28
  %572 = load <8 x half>, ptr %571, align 16, !dbg !28
  %573 = addrspacecast ptr addrspace(1) %558 to ptr, !dbg !28
  %574 = load <8 x half>, ptr %573, align 16, !dbg !28
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %575 = shufflevector <8 x half> %560, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %575, ptr addrspace(3) %185, align 8, !dbg !28
  %576 = shufflevector <8 x half> %560, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %576, ptr addrspace(3) %191, align 8, !dbg !28
  %577 = shufflevector <8 x half> %562, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %577, ptr addrspace(3) %192, align 8, !dbg !28
  %578 = shufflevector <8 x half> %562, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %578, ptr addrspace(3) %193, align 8, !dbg !28
  %579 = shufflevector <8 x half> %564, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %579, ptr addrspace(3) %194, align 8, !dbg !28
  %580 = shufflevector <8 x half> %564, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %580, ptr addrspace(3) %195, align 8, !dbg !28
  %581 = shufflevector <8 x half> %566, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %581, ptr addrspace(3) %196, align 8, !dbg !28
  %582 = shufflevector <8 x half> %566, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %582, ptr addrspace(3) %197, align 8, !dbg !28
  %583 = shufflevector <8 x half> %568, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %583, ptr addrspace(3) %198, align 8, !dbg !28
  %584 = shufflevector <8 x half> %568, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %584, ptr addrspace(3) %199, align 8, !dbg !28
  %585 = shufflevector <8 x half> %570, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %585, ptr addrspace(3) %200, align 8, !dbg !28
  %586 = shufflevector <8 x half> %570, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %586, ptr addrspace(3) %201, align 8, !dbg !28
  %587 = shufflevector <8 x half> %572, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %587, ptr addrspace(3) %202, align 8, !dbg !28
  %588 = shufflevector <8 x half> %572, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %588, ptr addrspace(3) %203, align 8, !dbg !28
  %589 = shufflevector <8 x half> %574, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %589, ptr addrspace(3) %204, align 8, !dbg !28
  %590 = shufflevector <8 x half> %574, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %590, ptr addrspace(3) %205, align 8, !dbg !28
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %591 = load <4 x half>, ptr addrspace(3) %397, align 8, !dbg !28
  %592 = load <4 x half>, ptr addrspace(3) %399, align 8, !dbg !28
  %593 = load <4 x half>, ptr addrspace(3) %401, align 8, !dbg !28
  %594 = load <4 x half>, ptr addrspace(3) %403, align 8, !dbg !28
  %595 = load <4 x half>, ptr addrspace(3) %405, align 8, !dbg !28
  %596 = load <4 x half>, ptr addrspace(3) %407, align 8, !dbg !28
  %597 = load <4 x half>, ptr addrspace(3) %409, align 8, !dbg !28
  %598 = load <4 x half>, ptr addrspace(3) %411, align 8, !dbg !28
  %599 = load <4 x half>, ptr addrspace(3) %413, align 8, !dbg !28
  %600 = load <4 x half>, ptr addrspace(3) %415, align 8, !dbg !28
  %601 = load <4 x half>, ptr addrspace(3) %417, align 8, !dbg !28
  %602 = load <4 x half>, ptr addrspace(3) %419, align 8, !dbg !28
  %603 = load <4 x half>, ptr addrspace(3) %421, align 8, !dbg !28
  %604 = load <4 x half>, ptr addrspace(3) %423, align 8, !dbg !28
  %605 = load <4 x half>, ptr addrspace(3) %425, align 8, !dbg !28
  %606 = load <4 x half>, ptr addrspace(3) %427, align 8, !dbg !28
  %607 = load <4 x half>, ptr addrspace(3) %429, align 8, !dbg !28
  %608 = load <4 x half>, ptr addrspace(3) %431, align 8, !dbg !28
  %609 = load <4 x half>, ptr addrspace(3) %433, align 8, !dbg !28
  %610 = load <4 x half>, ptr addrspace(3) %435, align 8, !dbg !28
  %611 = load <4 x half>, ptr addrspace(3) %437, align 8, !dbg !28
  %612 = load <4 x half>, ptr addrspace(3) %439, align 8, !dbg !28
  %613 = load <4 x half>, ptr addrspace(3) %441, align 8, !dbg !28
  %614 = load <4 x half>, ptr addrspace(3) %443, align 8, !dbg !28
  %615 = load <4 x half>, ptr addrspace(3) %445, align 8, !dbg !28
  %616 = load <4 x half>, ptr addrspace(3) %447, align 8, !dbg !28
  %617 = load <4 x half>, ptr addrspace(3) %449, align 8, !dbg !28
  %618 = load <4 x half>, ptr addrspace(3) %451, align 8, !dbg !28
  %619 = load <4 x half>, ptr addrspace(3) %453, align 8, !dbg !28
  %620 = load <4 x half>, ptr addrspace(3) %455, align 8, !dbg !28
  %621 = load <4 x half>, ptr addrspace(3) %457, align 8, !dbg !28
  %622 = load <4 x half>, ptr addrspace(3) %459, align 8, !dbg !28
  %623 = load <4 x half>, ptr addrspace(3) %461, align 8, !dbg !28
  %624 = load <4 x half>, ptr addrspace(3) %463, align 8, !dbg !28
  %625 = load <4 x half>, ptr addrspace(3) %465, align 8, !dbg !28
  %626 = load <4 x half>, ptr addrspace(3) %467, align 8, !dbg !28
  %627 = load <4 x half>, ptr addrspace(3) %469, align 8, !dbg !28
  %628 = load <4 x half>, ptr addrspace(3) %471, align 8, !dbg !28
  %629 = load <4 x half>, ptr addrspace(3) %473, align 8, !dbg !28
  %630 = load <4 x half>, ptr addrspace(3) %475, align 8, !dbg !28
  %631 = load <4 x half>, ptr addrspace(3) %477, align 8, !dbg !28
  %632 = load <4 x half>, ptr addrspace(3) %479, align 8, !dbg !28
  %633 = load <4 x half>, ptr addrspace(3) %481, align 8, !dbg !28
  %634 = load <4 x half>, ptr addrspace(3) %483, align 8, !dbg !28
  %635 = load <4 x half>, ptr addrspace(3) %485, align 8, !dbg !28
  %636 = load <4 x half>, ptr addrspace(3) %487, align 8, !dbg !28
  %637 = load <4 x half>, ptr addrspace(3) %489, align 8, !dbg !28
  %638 = load <4 x half>, ptr addrspace(3) %491, align 8, !dbg !28
  %639 = load <4 x half>, ptr addrspace(3) %493, align 8, !dbg !28
  %640 = load <4 x half>, ptr addrspace(3) %495, align 8, !dbg !28
  %641 = load <4 x half>, ptr addrspace(3) %497, align 8, !dbg !28
  %642 = load <4 x half>, ptr addrspace(3) %499, align 8, !dbg !28
  %643 = load <4 x half>, ptr addrspace(3) %501, align 8, !dbg !28
  %644 = load <4 x half>, ptr addrspace(3) %503, align 8, !dbg !28
  %645 = load <4 x half>, ptr addrspace(3) %505, align 8, !dbg !28
  %646 = load <4 x half>, ptr addrspace(3) %507, align 8, !dbg !28
  %647 = load <4 x half>, ptr addrspace(3) %509, align 8, !dbg !28
  %648 = load <4 x half>, ptr addrspace(3) %511, align 8, !dbg !28
  %649 = load <4 x half>, ptr addrspace(3) %513, align 8, !dbg !28
  %650 = load <4 x half>, ptr addrspace(3) %515, align 8, !dbg !28
  %651 = load <4 x half>, ptr addrspace(3) %517, align 8, !dbg !28
  %652 = load <4 x half>, ptr addrspace(3) %519, align 8, !dbg !28
  %653 = load <4 x half>, ptr addrspace(3) %521, align 8, !dbg !28
  %654 = load <4 x half>, ptr addrspace(3) %523, align 8, !dbg !28
  %655 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %591, <4 x half> %275, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !33
  %656 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %592, <4 x half> %278, <16 x float> %655, i32 0, i32 0, i32 0), !dbg !33
  %657 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %593, <4 x half> %281, <16 x float> %656, i32 0, i32 0, i32 0), !dbg !33
  %658 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %594, <4 x half> %284, <16 x float> %657, i32 0, i32 0, i32 0), !dbg !33
  %659 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %595, <4 x half> %287, <16 x float> %658, i32 0, i32 0, i32 0), !dbg !33
  %660 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %596, <4 x half> %290, <16 x float> %659, i32 0, i32 0, i32 0), !dbg !33
  %661 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %597, <4 x half> %293, <16 x float> %660, i32 0, i32 0, i32 0), !dbg !33
  %662 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %598, <4 x half> %296, <16 x float> %661, i32 0, i32 0, i32 0), !dbg !33
  %663 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %599, <4 x half> %299, <16 x float> %662, i32 0, i32 0, i32 0), !dbg !33
  %664 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %600, <4 x half> %302, <16 x float> %663, i32 0, i32 0, i32 0), !dbg !33
  %665 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %601, <4 x half> %305, <16 x float> %664, i32 0, i32 0, i32 0), !dbg !33
  %666 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %602, <4 x half> %308, <16 x float> %665, i32 0, i32 0, i32 0), !dbg !33
  %667 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %603, <4 x half> %311, <16 x float> %666, i32 0, i32 0, i32 0), !dbg !33
  %668 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %604, <4 x half> %314, <16 x float> %667, i32 0, i32 0, i32 0), !dbg !33
  %669 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %605, <4 x half> %317, <16 x float> %668, i32 0, i32 0, i32 0), !dbg !33
  %670 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %606, <4 x half> %320, <16 x float> %669, i32 0, i32 0, i32 0), !dbg !33
  %671 = extractelement <16 x float> %670, i64 0, !dbg !33
  %672 = extractelement <16 x float> %670, i64 1, !dbg !33
  %673 = extractelement <16 x float> %670, i64 2, !dbg !33
  %674 = extractelement <16 x float> %670, i64 3, !dbg !33
  %675 = extractelement <16 x float> %670, i64 4, !dbg !33
  %676 = extractelement <16 x float> %670, i64 5, !dbg !33
  %677 = extractelement <16 x float> %670, i64 6, !dbg !33
  %678 = extractelement <16 x float> %670, i64 7, !dbg !33
  %679 = extractelement <16 x float> %670, i64 8, !dbg !33
  %680 = extractelement <16 x float> %670, i64 9, !dbg !33
  %681 = extractelement <16 x float> %670, i64 10, !dbg !33
  %682 = extractelement <16 x float> %670, i64 11, !dbg !33
  %683 = extractelement <16 x float> %670, i64 12, !dbg !33
  %684 = extractelement <16 x float> %670, i64 13, !dbg !33
  %685 = extractelement <16 x float> %670, i64 14, !dbg !33
  %686 = extractelement <16 x float> %670, i64 15, !dbg !33
  %687 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %607, <4 x half> %275, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !33
  %688 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %608, <4 x half> %278, <16 x float> %687, i32 0, i32 0, i32 0), !dbg !33
  %689 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %609, <4 x half> %281, <16 x float> %688, i32 0, i32 0, i32 0), !dbg !33
  %690 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %610, <4 x half> %284, <16 x float> %689, i32 0, i32 0, i32 0), !dbg !33
  %691 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %611, <4 x half> %287, <16 x float> %690, i32 0, i32 0, i32 0), !dbg !33
  %692 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %612, <4 x half> %290, <16 x float> %691, i32 0, i32 0, i32 0), !dbg !33
  %693 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %613, <4 x half> %293, <16 x float> %692, i32 0, i32 0, i32 0), !dbg !33
  %694 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %614, <4 x half> %296, <16 x float> %693, i32 0, i32 0, i32 0), !dbg !33
  %695 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %615, <4 x half> %299, <16 x float> %694, i32 0, i32 0, i32 0), !dbg !33
  %696 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %616, <4 x half> %302, <16 x float> %695, i32 0, i32 0, i32 0), !dbg !33
  %697 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %617, <4 x half> %305, <16 x float> %696, i32 0, i32 0, i32 0), !dbg !33
  %698 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %618, <4 x half> %308, <16 x float> %697, i32 0, i32 0, i32 0), !dbg !33
  %699 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %619, <4 x half> %311, <16 x float> %698, i32 0, i32 0, i32 0), !dbg !33
  %700 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %620, <4 x half> %314, <16 x float> %699, i32 0, i32 0, i32 0), !dbg !33
  %701 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %621, <4 x half> %317, <16 x float> %700, i32 0, i32 0, i32 0), !dbg !33
  %702 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %622, <4 x half> %320, <16 x float> %701, i32 0, i32 0, i32 0), !dbg !33
  %703 = extractelement <16 x float> %702, i64 0, !dbg !33
  %704 = extractelement <16 x float> %702, i64 1, !dbg !33
  %705 = extractelement <16 x float> %702, i64 2, !dbg !33
  %706 = extractelement <16 x float> %702, i64 3, !dbg !33
  %707 = extractelement <16 x float> %702, i64 4, !dbg !33
  %708 = extractelement <16 x float> %702, i64 5, !dbg !33
  %709 = extractelement <16 x float> %702, i64 6, !dbg !33
  %710 = extractelement <16 x float> %702, i64 7, !dbg !33
  %711 = extractelement <16 x float> %702, i64 8, !dbg !33
  %712 = extractelement <16 x float> %702, i64 9, !dbg !33
  %713 = extractelement <16 x float> %702, i64 10, !dbg !33
  %714 = extractelement <16 x float> %702, i64 11, !dbg !33
  %715 = extractelement <16 x float> %702, i64 12, !dbg !33
  %716 = extractelement <16 x float> %702, i64 13, !dbg !33
  %717 = extractelement <16 x float> %702, i64 14, !dbg !33
  %718 = extractelement <16 x float> %702, i64 15, !dbg !33
  %719 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %623, <4 x half> %275, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !33
  %720 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %624, <4 x half> %278, <16 x float> %719, i32 0, i32 0, i32 0), !dbg !33
  %721 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %625, <4 x half> %281, <16 x float> %720, i32 0, i32 0, i32 0), !dbg !33
  %722 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %626, <4 x half> %284, <16 x float> %721, i32 0, i32 0, i32 0), !dbg !33
  %723 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %627, <4 x half> %287, <16 x float> %722, i32 0, i32 0, i32 0), !dbg !33
  %724 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %628, <4 x half> %290, <16 x float> %723, i32 0, i32 0, i32 0), !dbg !33
  %725 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %629, <4 x half> %293, <16 x float> %724, i32 0, i32 0, i32 0), !dbg !33
  %726 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %630, <4 x half> %296, <16 x float> %725, i32 0, i32 0, i32 0), !dbg !33
  %727 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %631, <4 x half> %299, <16 x float> %726, i32 0, i32 0, i32 0), !dbg !33
  %728 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %632, <4 x half> %302, <16 x float> %727, i32 0, i32 0, i32 0), !dbg !33
  %729 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %633, <4 x half> %305, <16 x float> %728, i32 0, i32 0, i32 0), !dbg !33
  %730 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %634, <4 x half> %308, <16 x float> %729, i32 0, i32 0, i32 0), !dbg !33
  %731 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %635, <4 x half> %311, <16 x float> %730, i32 0, i32 0, i32 0), !dbg !33
  %732 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %636, <4 x half> %314, <16 x float> %731, i32 0, i32 0, i32 0), !dbg !33
  %733 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %637, <4 x half> %317, <16 x float> %732, i32 0, i32 0, i32 0), !dbg !33
  %734 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %638, <4 x half> %320, <16 x float> %733, i32 0, i32 0, i32 0), !dbg !33
  %735 = extractelement <16 x float> %734, i64 0, !dbg !33
  %736 = extractelement <16 x float> %734, i64 1, !dbg !33
  %737 = extractelement <16 x float> %734, i64 2, !dbg !33
  %738 = extractelement <16 x float> %734, i64 3, !dbg !33
  %739 = extractelement <16 x float> %734, i64 4, !dbg !33
  %740 = extractelement <16 x float> %734, i64 5, !dbg !33
  %741 = extractelement <16 x float> %734, i64 6, !dbg !33
  %742 = extractelement <16 x float> %734, i64 7, !dbg !33
  %743 = extractelement <16 x float> %734, i64 8, !dbg !33
  %744 = extractelement <16 x float> %734, i64 9, !dbg !33
  %745 = extractelement <16 x float> %734, i64 10, !dbg !33
  %746 = extractelement <16 x float> %734, i64 11, !dbg !33
  %747 = extractelement <16 x float> %734, i64 12, !dbg !33
  %748 = extractelement <16 x float> %734, i64 13, !dbg !33
  %749 = extractelement <16 x float> %734, i64 14, !dbg !33
  %750 = extractelement <16 x float> %734, i64 15, !dbg !33
  %751 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %639, <4 x half> %275, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !33
  %752 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %640, <4 x half> %278, <16 x float> %751, i32 0, i32 0, i32 0), !dbg !33
  %753 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %641, <4 x half> %281, <16 x float> %752, i32 0, i32 0, i32 0), !dbg !33
  %754 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %642, <4 x half> %284, <16 x float> %753, i32 0, i32 0, i32 0), !dbg !33
  %755 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %643, <4 x half> %287, <16 x float> %754, i32 0, i32 0, i32 0), !dbg !33
  %756 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %644, <4 x half> %290, <16 x float> %755, i32 0, i32 0, i32 0), !dbg !33
  %757 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %645, <4 x half> %293, <16 x float> %756, i32 0, i32 0, i32 0), !dbg !33
  %758 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %646, <4 x half> %296, <16 x float> %757, i32 0, i32 0, i32 0), !dbg !33
  %759 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %647, <4 x half> %299, <16 x float> %758, i32 0, i32 0, i32 0), !dbg !33
  %760 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %648, <4 x half> %302, <16 x float> %759, i32 0, i32 0, i32 0), !dbg !33
  %761 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %649, <4 x half> %305, <16 x float> %760, i32 0, i32 0, i32 0), !dbg !33
  %762 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %650, <4 x half> %308, <16 x float> %761, i32 0, i32 0, i32 0), !dbg !33
  %763 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %651, <4 x half> %311, <16 x float> %762, i32 0, i32 0, i32 0), !dbg !33
  %764 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %652, <4 x half> %314, <16 x float> %763, i32 0, i32 0, i32 0), !dbg !33
  %765 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %653, <4 x half> %317, <16 x float> %764, i32 0, i32 0, i32 0), !dbg !33
  %766 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %654, <4 x half> %320, <16 x float> %765, i32 0, i32 0, i32 0), !dbg !33
  %767 = extractelement <16 x float> %766, i64 0, !dbg !33
  %768 = extractelement <16 x float> %766, i64 1, !dbg !33
  %769 = extractelement <16 x float> %766, i64 2, !dbg !33
  %770 = extractelement <16 x float> %766, i64 3, !dbg !33
  %771 = extractelement <16 x float> %766, i64 4, !dbg !33
  %772 = extractelement <16 x float> %766, i64 5, !dbg !33
  %773 = extractelement <16 x float> %766, i64 6, !dbg !33
  %774 = extractelement <16 x float> %766, i64 7, !dbg !33
  %775 = extractelement <16 x float> %766, i64 8, !dbg !33
  %776 = extractelement <16 x float> %766, i64 9, !dbg !33
  %777 = extractelement <16 x float> %766, i64 10, !dbg !33
  %778 = extractelement <16 x float> %766, i64 11, !dbg !33
  %779 = extractelement <16 x float> %766, i64 12, !dbg !33
  %780 = extractelement <16 x float> %766, i64 13, !dbg !33
  %781 = extractelement <16 x float> %766, i64 14, !dbg !33
  %782 = extractelement <16 x float> %766, i64 15, !dbg !33
  %783 = tail call float @llvm.maxnum.f32(float %671, float %672), !dbg !35
  %784 = tail call float @llvm.maxnum.f32(float %783, float %673), !dbg !35
  %785 = tail call float @llvm.maxnum.f32(float %784, float %674), !dbg !35
  %786 = tail call float @llvm.maxnum.f32(float %785, float %675), !dbg !35
  %787 = tail call float @llvm.maxnum.f32(float %786, float %676), !dbg !35
  %788 = tail call float @llvm.maxnum.f32(float %787, float %677), !dbg !35
  %789 = tail call float @llvm.maxnum.f32(float %788, float %678), !dbg !35
  %790 = tail call float @llvm.maxnum.f32(float %789, float %679), !dbg !35
  %791 = tail call float @llvm.maxnum.f32(float %790, float %680), !dbg !35
  %792 = tail call float @llvm.maxnum.f32(float %791, float %681), !dbg !35
  %793 = tail call float @llvm.maxnum.f32(float %792, float %682), !dbg !35
  %794 = tail call float @llvm.maxnum.f32(float %793, float %683), !dbg !35
  %795 = tail call float @llvm.maxnum.f32(float %794, float %684), !dbg !35
  %796 = tail call float @llvm.maxnum.f32(float %795, float %685), !dbg !35
  %797 = tail call float @llvm.maxnum.f32(float %796, float %686), !dbg !35
  %798 = tail call float @llvm.maxnum.f32(float %797, float %703), !dbg !35
  %799 = tail call float @llvm.maxnum.f32(float %798, float %704), !dbg !35
  %800 = tail call float @llvm.maxnum.f32(float %799, float %705), !dbg !35
  %801 = tail call float @llvm.maxnum.f32(float %800, float %706), !dbg !35
  %802 = tail call float @llvm.maxnum.f32(float %801, float %707), !dbg !35
  %803 = tail call float @llvm.maxnum.f32(float %802, float %708), !dbg !35
  %804 = tail call float @llvm.maxnum.f32(float %803, float %709), !dbg !35
  %805 = tail call float @llvm.maxnum.f32(float %804, float %710), !dbg !35
  %806 = tail call float @llvm.maxnum.f32(float %805, float %711), !dbg !35
  %807 = tail call float @llvm.maxnum.f32(float %806, float %712), !dbg !35
  %808 = tail call float @llvm.maxnum.f32(float %807, float %713), !dbg !35
  %809 = tail call float @llvm.maxnum.f32(float %808, float %714), !dbg !35
  %810 = tail call float @llvm.maxnum.f32(float %809, float %715), !dbg !35
  %811 = tail call float @llvm.maxnum.f32(float %810, float %716), !dbg !35
  %812 = tail call float @llvm.maxnum.f32(float %811, float %717), !dbg !35
  %813 = tail call float @llvm.maxnum.f32(float %812, float %718), !dbg !35
  %814 = tail call float @llvm.maxnum.f32(float %813, float %735), !dbg !35
  %815 = tail call float @llvm.maxnum.f32(float %814, float %736), !dbg !35
  %816 = tail call float @llvm.maxnum.f32(float %815, float %737), !dbg !35
  %817 = tail call float @llvm.maxnum.f32(float %816, float %738), !dbg !35
  %818 = tail call float @llvm.maxnum.f32(float %817, float %739), !dbg !35
  %819 = tail call float @llvm.maxnum.f32(float %818, float %740), !dbg !35
  %820 = tail call float @llvm.maxnum.f32(float %819, float %741), !dbg !35
  %821 = tail call float @llvm.maxnum.f32(float %820, float %742), !dbg !35
  %822 = tail call float @llvm.maxnum.f32(float %821, float %743), !dbg !35
  %823 = tail call float @llvm.maxnum.f32(float %822, float %744), !dbg !35
  %824 = tail call float @llvm.maxnum.f32(float %823, float %745), !dbg !35
  %825 = tail call float @llvm.maxnum.f32(float %824, float %746), !dbg !35
  %826 = tail call float @llvm.maxnum.f32(float %825, float %747), !dbg !35
  %827 = tail call float @llvm.maxnum.f32(float %826, float %748), !dbg !35
  %828 = tail call float @llvm.maxnum.f32(float %827, float %749), !dbg !35
  %829 = tail call float @llvm.maxnum.f32(float %828, float %750), !dbg !35
  %830 = tail call float @llvm.maxnum.f32(float %829, float %767), !dbg !35
  %831 = tail call float @llvm.maxnum.f32(float %830, float %768), !dbg !35
  %832 = tail call float @llvm.maxnum.f32(float %831, float %769), !dbg !35
  %833 = tail call float @llvm.maxnum.f32(float %832, float %770), !dbg !35
  %834 = tail call float @llvm.maxnum.f32(float %833, float %771), !dbg !35
  %835 = tail call float @llvm.maxnum.f32(float %834, float %772), !dbg !35
  %836 = tail call float @llvm.maxnum.f32(float %835, float %773), !dbg !35
  %837 = tail call float @llvm.maxnum.f32(float %836, float %774), !dbg !35
  %838 = tail call float @llvm.maxnum.f32(float %837, float %775), !dbg !35
  %839 = tail call float @llvm.maxnum.f32(float %838, float %776), !dbg !35
  %840 = tail call float @llvm.maxnum.f32(float %839, float %777), !dbg !35
  %841 = tail call float @llvm.maxnum.f32(float %840, float %778), !dbg !35
  %842 = tail call float @llvm.maxnum.f32(float %841, float %779), !dbg !35
  %843 = tail call float @llvm.maxnum.f32(float %842, float %780), !dbg !35
  %844 = tail call float @llvm.maxnum.f32(float %843, float %781), !dbg !35
  %845 = tail call float @llvm.maxnum.f32(float %844, float %782), !dbg !35
  %846 = bitcast float %845 to i32, !dbg !42
  %847 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %525, i32 %846), !dbg !42
  %848 = bitcast i32 %847 to float, !dbg !42
  %849 = tail call float @llvm.maxnum.f32(float %845, float %848), !dbg !35
  %850 = tail call float @llvm.maxnum.f32(float %528, float %849), !dbg !45
  %851 = shufflevector <16 x float> %766, <16 x float> poison, <2 x i32> <i32 4, i32 5>, !dbg !47
  %852 = insertelement <2 x float> poison, float %850, i64 0, !dbg !47
  %853 = shufflevector <2 x float> %852, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %854 = fsub <2 x float> %851, %853, !dbg !47
  %855 = fcmp olt <2 x float> %854, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %856 = select <2 x i1> %855, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %857 = select <2 x i1> %855, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %858 = fadd <2 x float> %854, %857, !dbg !48
  %859 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %858), !dbg !48
  %860 = fmul <2 x float> %856, %859, !dbg !48
  %861 = shufflevector <16 x float> %766, <16 x float> poison, <2 x i32> <i32 6, i32 7>, !dbg !47
  %862 = fsub <2 x float> %861, %853, !dbg !47
  %863 = fcmp olt <2 x float> %862, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %864 = select <2 x i1> %863, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %865 = select <2 x i1> %863, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %866 = fadd <2 x float> %862, %865, !dbg !48
  %867 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %866), !dbg !48
  %868 = fmul <2 x float> %864, %867, !dbg !48
  %869 = shufflevector <16 x float> %766, <16 x float> poison, <2 x i32> <i32 8, i32 9>, !dbg !47
  %870 = fsub <2 x float> %869, %853, !dbg !47
  %871 = fcmp olt <2 x float> %870, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %872 = select <2 x i1> %871, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %873 = select <2 x i1> %871, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %874 = fadd <2 x float> %870, %873, !dbg !48
  %875 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %874), !dbg !48
  %876 = fmul <2 x float> %872, %875, !dbg !48
  %877 = shufflevector <16 x float> %766, <16 x float> poison, <2 x i32> <i32 10, i32 11>, !dbg !47
  %878 = fsub <2 x float> %877, %853, !dbg !47
  %879 = fcmp olt <2 x float> %878, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %880 = select <2 x i1> %879, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %881 = select <2 x i1> %879, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %882 = fadd <2 x float> %878, %881, !dbg !48
  %883 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %882), !dbg !48
  %884 = fmul <2 x float> %880, %883, !dbg !48
  %885 = shufflevector <16 x float> %766, <16 x float> poison, <2 x i32> <i32 12, i32 13>, !dbg !47
  %886 = fsub <2 x float> %885, %853, !dbg !47
  %887 = fcmp olt <2 x float> %886, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %888 = select <2 x i1> %887, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %889 = select <2 x i1> %887, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %890 = fadd <2 x float> %886, %889, !dbg !48
  %891 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %890), !dbg !48
  %892 = fmul <2 x float> %888, %891, !dbg !48
  %893 = shufflevector <16 x float> %766, <16 x float> poison, <2 x i32> <i32 14, i32 15>, !dbg !47
  %894 = fsub <2 x float> %893, %853, !dbg !47
  %895 = fcmp olt <2 x float> %894, <float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %896 = select <2 x i1> %895, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %897 = select <2 x i1> %895, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !48
  %898 = fadd <2 x float> %894, %897, !dbg !48
  %899 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %898), !dbg !48
  %900 = fmul <2 x float> %896, %899, !dbg !48
  %901 = fsub float %528, %850, !dbg !49
  %902 = fcmp olt float %901, -1.260000e+02, !dbg !50
  %903 = select i1 %902, float 0x3BF0000000000000, float 1.000000e+00, !dbg !50
  %904 = select i1 %902, float 6.400000e+01, float 0.000000e+00, !dbg !50
  %905 = fadd float %901, %904, !dbg !50
  %906 = tail call float @llvm.exp2.f32(float %905), !dbg !50
  %907 = fmul float %903, %906, !dbg !50
  %908 = insertelement <16 x float> poison, float %907, i64 0, !dbg !51
  %909 = shufflevector <16 x float> %908, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !51
  %910 = fmul <16 x float> %534, %909, !dbg !51
  %911 = fmul <16 x float> %533, %909, !dbg !51
  %912 = fmul <16 x float> %532, %909, !dbg !51
  %913 = fmul <16 x float> %531, %909, !dbg !51
  %914 = or i64 %527, %64, !dbg !31
  %915 = getelementptr half, ptr addrspace(1) %52, i64 %914, !dbg !31
  %916 = getelementptr half, ptr addrspace(1) %915, i64 %322, !dbg !31
  %917 = getelementptr half, ptr addrspace(1) %915, i64 %323, !dbg !31
  %918 = getelementptr half, ptr addrspace(1) %915, i64 %324, !dbg !31
  %919 = getelementptr half, ptr addrspace(1) %915, i64 %325, !dbg !31
  %920 = getelementptr half, ptr addrspace(1) %915, i64 %326, !dbg !31
  %921 = getelementptr half, ptr addrspace(1) %915, i64 %327, !dbg !31
  %922 = getelementptr half, ptr addrspace(1) %915, i64 %328, !dbg !31
  %923 = getelementptr half, ptr addrspace(1) %915, i64 %329, !dbg !31
  %924 = addrspacecast ptr addrspace(1) %916 to ptr, !dbg !31
  %925 = load <8 x half>, ptr %924, align 16, !dbg !31
  %926 = addrspacecast ptr addrspace(1) %917 to ptr, !dbg !31
  %927 = load <8 x half>, ptr %926, align 16, !dbg !31
  %928 = addrspacecast ptr addrspace(1) %918 to ptr, !dbg !31
  %929 = load <8 x half>, ptr %928, align 16, !dbg !31
  %930 = addrspacecast ptr addrspace(1) %919 to ptr, !dbg !31
  %931 = load <8 x half>, ptr %930, align 16, !dbg !31
  %932 = addrspacecast ptr addrspace(1) %920 to ptr, !dbg !31
  %933 = load <8 x half>, ptr %932, align 16, !dbg !31
  %934 = addrspacecast ptr addrspace(1) %921 to ptr, !dbg !31
  %935 = load <8 x half>, ptr %934, align 16, !dbg !31
  %936 = addrspacecast ptr addrspace(1) %922 to ptr, !dbg !31
  %937 = load <8 x half>, ptr %936, align 16, !dbg !31
  %938 = addrspacecast ptr addrspace(1) %923 to ptr, !dbg !31
  %939 = load <8 x half>, ptr %938, align 16, !dbg !31
  fence syncscope("workgroup") release, !dbg !31
  tail call void @llvm.amdgcn.s.barrier(), !dbg !31
  fence syncscope("workgroup") acquire, !dbg !31
  %940 = shufflevector <8 x half> %925, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !31
  store <4 x half> %940, ptr addrspace(3) %185, align 8, !dbg !31
  %941 = shufflevector <8 x half> %925, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !31
  store <4 x half> %941, ptr addrspace(3) %191, align 8, !dbg !31
  %942 = shufflevector <8 x half> %927, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !31
  store <4 x half> %942, ptr addrspace(3) %192, align 8, !dbg !31
  %943 = shufflevector <8 x half> %927, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !31
  store <4 x half> %943, ptr addrspace(3) %193, align 8, !dbg !31
  %944 = shufflevector <8 x half> %929, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !31
  store <4 x half> %944, ptr addrspace(3) %194, align 8, !dbg !31
  %945 = shufflevector <8 x half> %929, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !31
  store <4 x half> %945, ptr addrspace(3) %195, align 8, !dbg !31
  %946 = shufflevector <8 x half> %931, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !31
  store <4 x half> %946, ptr addrspace(3) %196, align 8, !dbg !31
  %947 = shufflevector <8 x half> %931, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !31
  store <4 x half> %947, ptr addrspace(3) %197, align 8, !dbg !31
  %948 = shufflevector <8 x half> %933, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !31
  store <4 x half> %948, ptr addrspace(3) %198, align 8, !dbg !31
  %949 = shufflevector <8 x half> %933, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !31
  store <4 x half> %949, ptr addrspace(3) %199, align 8, !dbg !31
  %950 = shufflevector <8 x half> %935, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !31
  store <4 x half> %950, ptr addrspace(3) %200, align 8, !dbg !31
  %951 = shufflevector <8 x half> %935, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !31
  store <4 x half> %951, ptr addrspace(3) %201, align 8, !dbg !31
  %952 = shufflevector <8 x half> %937, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !31
  store <4 x half> %952, ptr addrspace(3) %202, align 8, !dbg !31
  %953 = shufflevector <8 x half> %937, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !31
  store <4 x half> %953, ptr addrspace(3) %203, align 8, !dbg !31
  %954 = shufflevector <8 x half> %939, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !31
  store <4 x half> %954, ptr addrspace(3) %204, align 8, !dbg !31
  %955 = shufflevector <8 x half> %939, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !31
  store <4 x half> %955, ptr addrspace(3) %205, align 8, !dbg !31
  fence syncscope("workgroup") release, !dbg !31
  tail call void @llvm.amdgcn.s.barrier(), !dbg !31
  fence syncscope("workgroup") acquire, !dbg !31
  %956 = load <4 x half>, ptr addrspace(3) %397, align 8, !dbg !31
  %957 = load <4 x half>, ptr addrspace(3) %399, align 8, !dbg !31
  %958 = load <4 x half>, ptr addrspace(3) %401, align 8, !dbg !31
  %959 = load <4 x half>, ptr addrspace(3) %403, align 8, !dbg !31
  %960 = load <4 x half>, ptr addrspace(3) %405, align 8, !dbg !31
  %961 = load <4 x half>, ptr addrspace(3) %407, align 8, !dbg !31
  %962 = load <4 x half>, ptr addrspace(3) %409, align 8, !dbg !31
  %963 = load <4 x half>, ptr addrspace(3) %411, align 8, !dbg !31
  %964 = load <4 x half>, ptr addrspace(3) %413, align 8, !dbg !31
  %965 = load <4 x half>, ptr addrspace(3) %415, align 8, !dbg !31
  %966 = load <4 x half>, ptr addrspace(3) %417, align 8, !dbg !31
  %967 = load <4 x half>, ptr addrspace(3) %419, align 8, !dbg !31
  %968 = load <4 x half>, ptr addrspace(3) %421, align 8, !dbg !31
  %969 = load <4 x half>, ptr addrspace(3) %423, align 8, !dbg !31
  %970 = load <4 x half>, ptr addrspace(3) %425, align 8, !dbg !31
  %971 = load <4 x half>, ptr addrspace(3) %427, align 8, !dbg !31
  %972 = load <4 x half>, ptr addrspace(3) %429, align 8, !dbg !31
  %973 = load <4 x half>, ptr addrspace(3) %431, align 8, !dbg !31
  %974 = load <4 x half>, ptr addrspace(3) %433, align 8, !dbg !31
  %975 = load <4 x half>, ptr addrspace(3) %435, align 8, !dbg !31
  %976 = load <4 x half>, ptr addrspace(3) %437, align 8, !dbg !31
  %977 = load <4 x half>, ptr addrspace(3) %439, align 8, !dbg !31
  %978 = load <4 x half>, ptr addrspace(3) %441, align 8, !dbg !31
  %979 = load <4 x half>, ptr addrspace(3) %443, align 8, !dbg !31
  %980 = load <4 x half>, ptr addrspace(3) %445, align 8, !dbg !31
  %981 = load <4 x half>, ptr addrspace(3) %447, align 8, !dbg !31
  %982 = load <4 x half>, ptr addrspace(3) %449, align 8, !dbg !31
  %983 = load <4 x half>, ptr addrspace(3) %451, align 8, !dbg !31
  %984 = load <4 x half>, ptr addrspace(3) %453, align 8, !dbg !31
  %985 = load <4 x half>, ptr addrspace(3) %455, align 8, !dbg !31
  %986 = load <4 x half>, ptr addrspace(3) %457, align 8, !dbg !31
  %987 = load <4 x half>, ptr addrspace(3) %459, align 8, !dbg !31
  %988 = load <4 x half>, ptr addrspace(3) %461, align 8, !dbg !31
  %989 = load <4 x half>, ptr addrspace(3) %463, align 8, !dbg !31
  %990 = load <4 x half>, ptr addrspace(3) %465, align 8, !dbg !31
  %991 = load <4 x half>, ptr addrspace(3) %467, align 8, !dbg !31
  %992 = load <4 x half>, ptr addrspace(3) %469, align 8, !dbg !31
  %993 = load <4 x half>, ptr addrspace(3) %471, align 8, !dbg !31
  %994 = load <4 x half>, ptr addrspace(3) %473, align 8, !dbg !31
  %995 = load <4 x half>, ptr addrspace(3) %475, align 8, !dbg !31
  %996 = load <4 x half>, ptr addrspace(3) %477, align 8, !dbg !31
  %997 = load <4 x half>, ptr addrspace(3) %479, align 8, !dbg !31
  %998 = load <4 x half>, ptr addrspace(3) %481, align 8, !dbg !31
  %999 = load <4 x half>, ptr addrspace(3) %483, align 8, !dbg !31
  %1000 = load <4 x half>, ptr addrspace(3) %485, align 8, !dbg !31
  %1001 = load <4 x half>, ptr addrspace(3) %487, align 8, !dbg !31
  %1002 = load <4 x half>, ptr addrspace(3) %489, align 8, !dbg !31
  %1003 = load <4 x half>, ptr addrspace(3) %491, align 8, !dbg !31
  %1004 = load <4 x half>, ptr addrspace(3) %493, align 8, !dbg !31
  %1005 = load <4 x half>, ptr addrspace(3) %495, align 8, !dbg !31
  %1006 = load <4 x half>, ptr addrspace(3) %497, align 8, !dbg !31
  %1007 = load <4 x half>, ptr addrspace(3) %499, align 8, !dbg !31
  %1008 = load <4 x half>, ptr addrspace(3) %501, align 8, !dbg !31
  %1009 = load <4 x half>, ptr addrspace(3) %503, align 8, !dbg !31
  %1010 = load <4 x half>, ptr addrspace(3) %505, align 8, !dbg !31
  %1011 = load <4 x half>, ptr addrspace(3) %507, align 8, !dbg !31
  %1012 = load <4 x half>, ptr addrspace(3) %509, align 8, !dbg !31
  %1013 = load <4 x half>, ptr addrspace(3) %511, align 8, !dbg !31
  %1014 = load <4 x half>, ptr addrspace(3) %513, align 8, !dbg !31
  %1015 = load <4 x half>, ptr addrspace(3) %515, align 8, !dbg !31
  %1016 = load <4 x half>, ptr addrspace(3) %517, align 8, !dbg !31
  %1017 = load <4 x half>, ptr addrspace(3) %519, align 8, !dbg !31
  %1018 = load <4 x half>, ptr addrspace(3) %521, align 8, !dbg !31
  %1019 = load <4 x half>, ptr addrspace(3) %523, align 8, !dbg !31
  %1020 = shufflevector <16 x float> %670, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !47
  %1021 = insertelement <4 x float> poison, float %850, i64 0, !dbg !47
  %1022 = shufflevector <4 x float> %1021, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !47
  %1023 = fsub <4 x float> %1020, %1022, !dbg !47
  %1024 = fcmp olt <4 x float> %1023, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1025 = select <4 x i1> %1024, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1026 = select <4 x i1> %1024, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1027 = fadd <4 x float> %1023, %1026, !dbg !48
  %1028 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1027), !dbg !48
  %1029 = fmul <4 x float> %1025, %1028, !dbg !48
  %1030 = fptrunc <4 x float> %1029 to <4 x half>, !dbg !52
  %1031 = shufflevector <16 x float> %670, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !47
  %1032 = fsub <4 x float> %1031, %1022, !dbg !47
  %1033 = fcmp olt <4 x float> %1032, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1034 = select <4 x i1> %1033, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1035 = select <4 x i1> %1033, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1036 = fadd <4 x float> %1032, %1035, !dbg !48
  %1037 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1036), !dbg !48
  %1038 = fmul <4 x float> %1034, %1037, !dbg !48
  %1039 = fptrunc <4 x float> %1038 to <4 x half>, !dbg !52
  %1040 = shufflevector <16 x float> %670, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !47
  %1041 = fsub <4 x float> %1040, %1022, !dbg !47
  %1042 = fcmp olt <4 x float> %1041, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1043 = select <4 x i1> %1042, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1044 = select <4 x i1> %1042, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1045 = fadd <4 x float> %1041, %1044, !dbg !48
  %1046 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1045), !dbg !48
  %1047 = fmul <4 x float> %1043, %1046, !dbg !48
  %1048 = fptrunc <4 x float> %1047 to <4 x half>, !dbg !52
  %1049 = shufflevector <16 x float> %670, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !47
  %1050 = fsub <4 x float> %1049, %1022, !dbg !47
  %1051 = fcmp olt <4 x float> %1050, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1052 = select <4 x i1> %1051, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1053 = select <4 x i1> %1051, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1054 = fadd <4 x float> %1050, %1053, !dbg !48
  %1055 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1054), !dbg !48
  %1056 = fmul <4 x float> %1052, %1055, !dbg !48
  %1057 = fptrunc <4 x float> %1056 to <4 x half>, !dbg !52
  %1058 = shufflevector <16 x float> %702, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !47
  %1059 = fsub <4 x float> %1058, %1022, !dbg !47
  %1060 = fcmp olt <4 x float> %1059, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1061 = select <4 x i1> %1060, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1062 = select <4 x i1> %1060, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1063 = fadd <4 x float> %1059, %1062, !dbg !48
  %1064 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1063), !dbg !48
  %1065 = fmul <4 x float> %1061, %1064, !dbg !48
  %1066 = fptrunc <4 x float> %1065 to <4 x half>, !dbg !52
  %1067 = shufflevector <16 x float> %702, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !47
  %1068 = fsub <4 x float> %1067, %1022, !dbg !47
  %1069 = fcmp olt <4 x float> %1068, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1070 = select <4 x i1> %1069, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1071 = select <4 x i1> %1069, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1072 = fadd <4 x float> %1068, %1071, !dbg !48
  %1073 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1072), !dbg !48
  %1074 = fmul <4 x float> %1070, %1073, !dbg !48
  %1075 = fptrunc <4 x float> %1074 to <4 x half>, !dbg !52
  %1076 = shufflevector <16 x float> %702, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !47
  %1077 = fsub <4 x float> %1076, %1022, !dbg !47
  %1078 = fcmp olt <4 x float> %1077, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1079 = select <4 x i1> %1078, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1080 = select <4 x i1> %1078, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1081 = fadd <4 x float> %1077, %1080, !dbg !48
  %1082 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1081), !dbg !48
  %1083 = fmul <4 x float> %1079, %1082, !dbg !48
  %1084 = fptrunc <4 x float> %1083 to <4 x half>, !dbg !52
  %1085 = shufflevector <16 x float> %702, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !47
  %1086 = fsub <4 x float> %1085, %1022, !dbg !47
  %1087 = fcmp olt <4 x float> %1086, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1088 = select <4 x i1> %1087, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1089 = select <4 x i1> %1087, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1090 = fadd <4 x float> %1086, %1089, !dbg !48
  %1091 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1090), !dbg !48
  %1092 = fmul <4 x float> %1088, %1091, !dbg !48
  %1093 = fptrunc <4 x float> %1092 to <4 x half>, !dbg !52
  %1094 = shufflevector <16 x float> %734, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !47
  %1095 = fsub <4 x float> %1094, %1022, !dbg !47
  %1096 = fcmp olt <4 x float> %1095, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1097 = select <4 x i1> %1096, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1098 = select <4 x i1> %1096, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1099 = fadd <4 x float> %1095, %1098, !dbg !48
  %1100 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1099), !dbg !48
  %1101 = fmul <4 x float> %1097, %1100, !dbg !48
  %1102 = fptrunc <4 x float> %1101 to <4 x half>, !dbg !52
  %1103 = shufflevector <16 x float> %734, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !47
  %1104 = fsub <4 x float> %1103, %1022, !dbg !47
  %1105 = fcmp olt <4 x float> %1104, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1106 = select <4 x i1> %1105, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1107 = select <4 x i1> %1105, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1108 = fadd <4 x float> %1104, %1107, !dbg !48
  %1109 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1108), !dbg !48
  %1110 = fmul <4 x float> %1106, %1109, !dbg !48
  %1111 = fptrunc <4 x float> %1110 to <4 x half>, !dbg !52
  %1112 = shufflevector <16 x float> %734, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !47
  %1113 = fsub <4 x float> %1112, %1022, !dbg !47
  %1114 = fcmp olt <4 x float> %1113, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1115 = select <4 x i1> %1114, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1116 = select <4 x i1> %1114, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1117 = fadd <4 x float> %1113, %1116, !dbg !48
  %1118 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1117), !dbg !48
  %1119 = fmul <4 x float> %1115, %1118, !dbg !48
  %1120 = fptrunc <4 x float> %1119 to <4 x half>, !dbg !52
  %1121 = shufflevector <16 x float> %734, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !47
  %1122 = fsub <4 x float> %1121, %1022, !dbg !47
  %1123 = fcmp olt <4 x float> %1122, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1124 = select <4 x i1> %1123, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1125 = select <4 x i1> %1123, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1126 = fadd <4 x float> %1122, %1125, !dbg !48
  %1127 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1126), !dbg !48
  %1128 = fmul <4 x float> %1124, %1127, !dbg !48
  %1129 = fptrunc <4 x float> %1128 to <4 x half>, !dbg !52
  %1130 = shufflevector <16 x float> %766, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !47
  %1131 = fsub <4 x float> %1130, %1022, !dbg !47
  %1132 = fcmp olt <4 x float> %1131, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !48
  %1133 = select <4 x i1> %1132, <4 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !48
  %1134 = select <4 x i1> %1132, <4 x float> <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>, <4 x float> zeroinitializer, !dbg !48
  %1135 = fadd <4 x float> %1131, %1134, !dbg !48
  %1136 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1135), !dbg !48
  %1137 = fmul <4 x float> %1133, %1136, !dbg !48
  %1138 = fptrunc <4 x float> %1137 to <4 x half>, !dbg !52
  %1139 = extractelement <2 x float> %868, i64 0, !dbg !52
  %1140 = extractelement <2 x float> %868, i64 1, !dbg !52
  %1141 = shufflevector <2 x float> %868, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !52
  %1142 = shufflevector <2 x float> %860, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %1143 = shufflevector <4 x float> %1142, <4 x float> %1141, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !52
  %1144 = fptrunc <4 x float> %1143 to <4 x half>, !dbg !52
  %1145 = extractelement <2 x float> %876, i64 0, !dbg !52
  %1146 = extractelement <2 x float> %876, i64 1, !dbg !52
  %1147 = extractelement <2 x float> %884, i64 0, !dbg !52
  %1148 = extractelement <2 x float> %884, i64 1, !dbg !52
  %1149 = shufflevector <2 x float> %876, <2 x float> %884, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !52
  %1150 = fptrunc <4 x float> %1149 to <4 x half>, !dbg !52
  %1151 = extractelement <2 x float> %892, i64 0, !dbg !52
  %1152 = extractelement <2 x float> %892, i64 1, !dbg !52
  %1153 = extractelement <2 x float> %900, i64 0, !dbg !52
  %1154 = extractelement <2 x float> %900, i64 1, !dbg !52
  %1155 = shufflevector <2 x float> %892, <2 x float> %900, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !52
  %1156 = fptrunc <4 x float> %1155 to <4 x half>, !dbg !52
  fence syncscope("workgroup") release, !dbg !52
  tail call void @llvm.amdgcn.s.barrier(), !dbg !52
  fence syncscope("workgroup") acquire, !dbg !52
  %1157 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %956, <4 x half> %1030, <16 x float> %910, i32 0, i32 0, i32 0), !dbg !53
  %1158 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %957, <4 x half> %1039, <16 x float> %1157, i32 0, i32 0, i32 0), !dbg !53
  %1159 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %958, <4 x half> %1048, <16 x float> %1158, i32 0, i32 0, i32 0), !dbg !53
  %1160 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %959, <4 x half> %1057, <16 x float> %1159, i32 0, i32 0, i32 0), !dbg !53
  %1161 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %960, <4 x half> %1066, <16 x float> %1160, i32 0, i32 0, i32 0), !dbg !53
  %1162 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %961, <4 x half> %1075, <16 x float> %1161, i32 0, i32 0, i32 0), !dbg !53
  %1163 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %962, <4 x half> %1084, <16 x float> %1162, i32 0, i32 0, i32 0), !dbg !53
  %1164 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %963, <4 x half> %1093, <16 x float> %1163, i32 0, i32 0, i32 0), !dbg !53
  %1165 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %964, <4 x half> %1102, <16 x float> %1164, i32 0, i32 0, i32 0), !dbg !53
  %1166 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %965, <4 x half> %1111, <16 x float> %1165, i32 0, i32 0, i32 0), !dbg !53
  %1167 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %966, <4 x half> %1120, <16 x float> %1166, i32 0, i32 0, i32 0), !dbg !53
  %1168 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %967, <4 x half> %1129, <16 x float> %1167, i32 0, i32 0, i32 0), !dbg !53
  %1169 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %968, <4 x half> %1138, <16 x float> %1168, i32 0, i32 0, i32 0), !dbg !53
  %1170 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %969, <4 x half> %1144, <16 x float> %1169, i32 0, i32 0, i32 0), !dbg !53
  %1171 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %970, <4 x half> %1150, <16 x float> %1170, i32 0, i32 0, i32 0), !dbg !53
  %1172 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %971, <4 x half> %1156, <16 x float> %1171, i32 0, i32 0, i32 0), !dbg !53
  %1173 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %972, <4 x half> %1030, <16 x float> %911, i32 0, i32 0, i32 0), !dbg !53
  %1174 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %973, <4 x half> %1039, <16 x float> %1173, i32 0, i32 0, i32 0), !dbg !53
  %1175 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %974, <4 x half> %1048, <16 x float> %1174, i32 0, i32 0, i32 0), !dbg !53
  %1176 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %975, <4 x half> %1057, <16 x float> %1175, i32 0, i32 0, i32 0), !dbg !53
  %1177 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %976, <4 x half> %1066, <16 x float> %1176, i32 0, i32 0, i32 0), !dbg !53
  %1178 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %977, <4 x half> %1075, <16 x float> %1177, i32 0, i32 0, i32 0), !dbg !53
  %1179 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %978, <4 x half> %1084, <16 x float> %1178, i32 0, i32 0, i32 0), !dbg !53
  %1180 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %979, <4 x half> %1093, <16 x float> %1179, i32 0, i32 0, i32 0), !dbg !53
  %1181 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %980, <4 x half> %1102, <16 x float> %1180, i32 0, i32 0, i32 0), !dbg !53
  %1182 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %981, <4 x half> %1111, <16 x float> %1181, i32 0, i32 0, i32 0), !dbg !53
  %1183 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %982, <4 x half> %1120, <16 x float> %1182, i32 0, i32 0, i32 0), !dbg !53
  %1184 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %983, <4 x half> %1129, <16 x float> %1183, i32 0, i32 0, i32 0), !dbg !53
  %1185 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %984, <4 x half> %1138, <16 x float> %1184, i32 0, i32 0, i32 0), !dbg !53
  %1186 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %985, <4 x half> %1144, <16 x float> %1185, i32 0, i32 0, i32 0), !dbg !53
  %1187 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %986, <4 x half> %1150, <16 x float> %1186, i32 0, i32 0, i32 0), !dbg !53
  %1188 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %987, <4 x half> %1156, <16 x float> %1187, i32 0, i32 0, i32 0), !dbg !53
  %1189 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %988, <4 x half> %1030, <16 x float> %912, i32 0, i32 0, i32 0), !dbg !53
  %1190 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %989, <4 x half> %1039, <16 x float> %1189, i32 0, i32 0, i32 0), !dbg !53
  %1191 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %990, <4 x half> %1048, <16 x float> %1190, i32 0, i32 0, i32 0), !dbg !53
  %1192 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %991, <4 x half> %1057, <16 x float> %1191, i32 0, i32 0, i32 0), !dbg !53
  %1193 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %992, <4 x half> %1066, <16 x float> %1192, i32 0, i32 0, i32 0), !dbg !53
  %1194 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %993, <4 x half> %1075, <16 x float> %1193, i32 0, i32 0, i32 0), !dbg !53
  %1195 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %994, <4 x half> %1084, <16 x float> %1194, i32 0, i32 0, i32 0), !dbg !53
  %1196 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %995, <4 x half> %1093, <16 x float> %1195, i32 0, i32 0, i32 0), !dbg !53
  %1197 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %996, <4 x half> %1102, <16 x float> %1196, i32 0, i32 0, i32 0), !dbg !53
  %1198 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %997, <4 x half> %1111, <16 x float> %1197, i32 0, i32 0, i32 0), !dbg !53
  %1199 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %998, <4 x half> %1120, <16 x float> %1198, i32 0, i32 0, i32 0), !dbg !53
  %1200 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %999, <4 x half> %1129, <16 x float> %1199, i32 0, i32 0, i32 0), !dbg !53
  %1201 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1000, <4 x half> %1138, <16 x float> %1200, i32 0, i32 0, i32 0), !dbg !53
  %1202 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1001, <4 x half> %1144, <16 x float> %1201, i32 0, i32 0, i32 0), !dbg !53
  %1203 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1002, <4 x half> %1150, <16 x float> %1202, i32 0, i32 0, i32 0), !dbg !53
  %1204 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1003, <4 x half> %1156, <16 x float> %1203, i32 0, i32 0, i32 0), !dbg !53
  %1205 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1004, <4 x half> %1030, <16 x float> %913, i32 0, i32 0, i32 0), !dbg !53
  %1206 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1005, <4 x half> %1039, <16 x float> %1205, i32 0, i32 0, i32 0), !dbg !53
  %1207 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1006, <4 x half> %1048, <16 x float> %1206, i32 0, i32 0, i32 0), !dbg !53
  %1208 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1007, <4 x half> %1057, <16 x float> %1207, i32 0, i32 0, i32 0), !dbg !53
  %1209 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1008, <4 x half> %1066, <16 x float> %1208, i32 0, i32 0, i32 0), !dbg !53
  %1210 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1009, <4 x half> %1075, <16 x float> %1209, i32 0, i32 0, i32 0), !dbg !53
  %1211 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1010, <4 x half> %1084, <16 x float> %1210, i32 0, i32 0, i32 0), !dbg !53
  %1212 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1011, <4 x half> %1093, <16 x float> %1211, i32 0, i32 0, i32 0), !dbg !53
  %1213 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1012, <4 x half> %1102, <16 x float> %1212, i32 0, i32 0, i32 0), !dbg !53
  %1214 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1013, <4 x half> %1111, <16 x float> %1213, i32 0, i32 0, i32 0), !dbg !53
  %1215 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1014, <4 x half> %1120, <16 x float> %1214, i32 0, i32 0, i32 0), !dbg !53
  %1216 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1015, <4 x half> %1129, <16 x float> %1215, i32 0, i32 0, i32 0), !dbg !53
  %1217 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1016, <4 x half> %1138, <16 x float> %1216, i32 0, i32 0, i32 0), !dbg !53
  %1218 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1017, <4 x half> %1144, <16 x float> %1217, i32 0, i32 0, i32 0), !dbg !53
  %1219 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1018, <4 x half> %1150, <16 x float> %1218, i32 0, i32 0, i32 0), !dbg !53
  %1220 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1019, <4 x half> %1156, <16 x float> %1219, i32 0, i32 0, i32 0), !dbg !53
  %shift = shufflevector <4 x float> %1029, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1221 = fadd <4 x float> %1029, %shift, !dbg !54
  %shift78 = shufflevector <4 x float> %1029, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1222 = fadd <4 x float> %shift78, %1221, !dbg !54
  %shift79 = shufflevector <4 x float> %1029, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1223 = fadd <4 x float> %shift79, %1222, !dbg !54
  %1224 = fadd <4 x float> %1038, %1223, !dbg !54
  %shift80 = shufflevector <4 x float> %1038, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1225 = fadd <4 x float> %shift80, %1224, !dbg !54
  %shift81 = shufflevector <4 x float> %1038, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1226 = fadd <4 x float> %shift81, %1225, !dbg !54
  %shift82 = shufflevector <4 x float> %1038, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1227 = fadd <4 x float> %shift82, %1226, !dbg !54
  %1228 = fadd <4 x float> %1047, %1227, !dbg !54
  %shift83 = shufflevector <4 x float> %1047, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1229 = fadd <4 x float> %shift83, %1228, !dbg !54
  %shift84 = shufflevector <4 x float> %1047, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1230 = fadd <4 x float> %shift84, %1229, !dbg !54
  %shift85 = shufflevector <4 x float> %1047, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1231 = fadd <4 x float> %shift85, %1230, !dbg !54
  %1232 = fadd <4 x float> %1056, %1231, !dbg !54
  %shift86 = shufflevector <4 x float> %1056, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1233 = fadd <4 x float> %shift86, %1232, !dbg !54
  %shift87 = shufflevector <4 x float> %1056, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1234 = fadd <4 x float> %shift87, %1233, !dbg !54
  %shift88 = shufflevector <4 x float> %1056, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1235 = fadd <4 x float> %shift88, %1234, !dbg !54
  %1236 = fadd <4 x float> %1065, %1235, !dbg !54
  %shift89 = shufflevector <4 x float> %1065, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1237 = fadd <4 x float> %shift89, %1236, !dbg !54
  %shift90 = shufflevector <4 x float> %1065, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1238 = fadd <4 x float> %shift90, %1237, !dbg !54
  %shift91 = shufflevector <4 x float> %1065, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1239 = fadd <4 x float> %shift91, %1238, !dbg !54
  %1240 = fadd <4 x float> %1074, %1239, !dbg !54
  %shift92 = shufflevector <4 x float> %1074, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1241 = fadd <4 x float> %shift92, %1240, !dbg !54
  %shift93 = shufflevector <4 x float> %1074, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1242 = fadd <4 x float> %shift93, %1241, !dbg !54
  %shift94 = shufflevector <4 x float> %1074, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1243 = fadd <4 x float> %shift94, %1242, !dbg !54
  %1244 = fadd <4 x float> %1083, %1243, !dbg !54
  %shift95 = shufflevector <4 x float> %1083, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1245 = fadd <4 x float> %shift95, %1244, !dbg !54
  %shift96 = shufflevector <4 x float> %1083, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1246 = fadd <4 x float> %shift96, %1245, !dbg !54
  %shift97 = shufflevector <4 x float> %1083, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1247 = fadd <4 x float> %shift97, %1246, !dbg !54
  %1248 = fadd <4 x float> %1092, %1247, !dbg !54
  %shift98 = shufflevector <4 x float> %1092, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1249 = fadd <4 x float> %shift98, %1248, !dbg !54
  %shift99 = shufflevector <4 x float> %1092, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1250 = fadd <4 x float> %shift99, %1249, !dbg !54
  %shift100 = shufflevector <4 x float> %1092, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1251 = fadd <4 x float> %shift100, %1250, !dbg !54
  %1252 = fadd <4 x float> %1101, %1251, !dbg !54
  %shift101 = shufflevector <4 x float> %1101, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1253 = fadd <4 x float> %shift101, %1252, !dbg !54
  %shift102 = shufflevector <4 x float> %1101, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1254 = fadd <4 x float> %shift102, %1253, !dbg !54
  %shift103 = shufflevector <4 x float> %1101, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1255 = fadd <4 x float> %shift103, %1254, !dbg !54
  %1256 = fadd <4 x float> %1110, %1255, !dbg !54
  %shift104 = shufflevector <4 x float> %1110, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1257 = fadd <4 x float> %shift104, %1256, !dbg !54
  %shift105 = shufflevector <4 x float> %1110, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1258 = fadd <4 x float> %shift105, %1257, !dbg !54
  %shift106 = shufflevector <4 x float> %1110, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1259 = fadd <4 x float> %shift106, %1258, !dbg !54
  %1260 = fadd <4 x float> %1119, %1259, !dbg !54
  %shift107 = shufflevector <4 x float> %1119, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1261 = fadd <4 x float> %shift107, %1260, !dbg !54
  %shift108 = shufflevector <4 x float> %1119, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1262 = fadd <4 x float> %shift108, %1261, !dbg !54
  %shift109 = shufflevector <4 x float> %1119, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1263 = fadd <4 x float> %shift109, %1262, !dbg !54
  %1264 = fadd <4 x float> %1128, %1263, !dbg !54
  %shift110 = shufflevector <4 x float> %1128, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1265 = fadd <4 x float> %shift110, %1264, !dbg !54
  %shift111 = shufflevector <4 x float> %1128, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1266 = fadd <4 x float> %shift111, %1265, !dbg !54
  %shift112 = shufflevector <4 x float> %1128, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1267 = fadd <4 x float> %shift112, %1266, !dbg !54
  %1268 = fadd <4 x float> %1137, %1267, !dbg !54
  %shift113 = shufflevector <4 x float> %1137, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1269 = fadd <4 x float> %shift113, %1268, !dbg !54
  %shift114 = shufflevector <4 x float> %1137, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1270 = fadd <4 x float> %shift114, %1269, !dbg !54
  %shift115 = shufflevector <4 x float> %1137, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1271 = fadd <4 x float> %shift115, %1270, !dbg !54
  %1272 = extractelement <4 x float> %1271, i64 0, !dbg !54
  %1273 = extractelement <2 x float> %860, i64 0, !dbg !54
  %1274 = fadd float %1273, %1272, !dbg !54
  %1275 = extractelement <2 x float> %860, i64 1, !dbg !54
  %1276 = fadd float %1275, %1274, !dbg !54
  %1277 = fadd float %1139, %1276, !dbg !54
  %1278 = fadd float %1140, %1277, !dbg !54
  %1279 = fadd float %1145, %1278, !dbg !54
  %1280 = fadd float %1146, %1279, !dbg !54
  %1281 = fadd float %1147, %1280, !dbg !54
  %1282 = fadd float %1148, %1281, !dbg !54
  %1283 = fadd float %1151, %1282, !dbg !54
  %1284 = fadd float %1152, %1283, !dbg !54
  %1285 = fadd float %1153, %1284, !dbg !54
  %1286 = fadd float %1154, %1285, !dbg !54
  %1287 = bitcast float %1286 to i32, !dbg !57
  %1288 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %525, i32 %1287), !dbg !57
  %1289 = bitcast i32 %1288 to float, !dbg !57
  %1290 = fadd float %1286, %1289, !dbg !54
  %1291 = fmul float %529, %907, !dbg !59
  %1292 = fadd float %1291, %1290, !dbg !60
  %1293 = add i64 %527, 128, !dbg !61
  %1294 = add i32 %530, 128, !dbg !32
  %1295 = icmp slt i32 %1294, %20, !dbg !32
  br i1 %1295, label %526, label %._crit_edge.loopexit, !dbg !32

._crit_edge.loopexit:                             ; preds = %526
  %1296 = shufflevector <16 x float> %1220, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1297 = shufflevector <16 x float> %1220, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1298 = shufflevector <16 x float> %1220, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1299 = shufflevector <16 x float> %1220, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1300 = shufflevector <16 x float> %1220, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1301 = shufflevector <16 x float> %1220, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1302 = shufflevector <16 x float> %1220, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1303 = shufflevector <16 x float> %1220, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1304 = shufflevector <16 x float> %1204, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1305 = shufflevector <16 x float> %1204, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1306 = shufflevector <16 x float> %1204, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1307 = shufflevector <16 x float> %1204, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1308 = shufflevector <16 x float> %1204, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1309 = shufflevector <16 x float> %1204, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1310 = shufflevector <16 x float> %1204, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1311 = shufflevector <16 x float> %1204, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1312 = shufflevector <16 x float> %1188, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1313 = shufflevector <16 x float> %1188, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1314 = shufflevector <16 x float> %1188, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1315 = shufflevector <16 x float> %1188, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1316 = shufflevector <16 x float> %1188, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1317 = shufflevector <16 x float> %1188, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1318 = shufflevector <16 x float> %1188, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1319 = shufflevector <16 x float> %1188, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1320 = shufflevector <16 x float> %1172, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1321 = shufflevector <16 x float> %1172, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1322 = shufflevector <16 x float> %1172, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1323 = shufflevector <16 x float> %1172, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1324 = shufflevector <16 x float> %1172, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1325 = shufflevector <16 x float> %1172, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1326 = shufflevector <16 x float> %1172, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1327 = shufflevector <16 x float> %1172, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  br label %._crit_edge, !dbg !62

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %21
  %.lcssa2 = phi float [ 1.000000e+00, %21 ], [ %1292, %._crit_edge.loopexit ]
  %.lcssa = phi float [ 0xFFF0000000000000, %21 ], [ %850, %._crit_edge.loopexit ]
  %1328 = phi <2 x float> [ zeroinitializer, %21 ], [ %1327, %._crit_edge.loopexit ]
  %1329 = phi <2 x float> [ zeroinitializer, %21 ], [ %1326, %._crit_edge.loopexit ]
  %1330 = phi <2 x float> [ zeroinitializer, %21 ], [ %1325, %._crit_edge.loopexit ]
  %1331 = phi <2 x float> [ zeroinitializer, %21 ], [ %1324, %._crit_edge.loopexit ]
  %1332 = phi <2 x float> [ zeroinitializer, %21 ], [ %1323, %._crit_edge.loopexit ]
  %1333 = phi <2 x float> [ zeroinitializer, %21 ], [ %1322, %._crit_edge.loopexit ]
  %1334 = phi <2 x float> [ zeroinitializer, %21 ], [ %1321, %._crit_edge.loopexit ]
  %1335 = phi <2 x float> [ zeroinitializer, %21 ], [ %1320, %._crit_edge.loopexit ]
  %1336 = phi <2 x float> [ zeroinitializer, %21 ], [ %1319, %._crit_edge.loopexit ]
  %1337 = phi <2 x float> [ zeroinitializer, %21 ], [ %1318, %._crit_edge.loopexit ]
  %1338 = phi <2 x float> [ zeroinitializer, %21 ], [ %1317, %._crit_edge.loopexit ]
  %1339 = phi <2 x float> [ zeroinitializer, %21 ], [ %1316, %._crit_edge.loopexit ]
  %1340 = phi <2 x float> [ zeroinitializer, %21 ], [ %1315, %._crit_edge.loopexit ]
  %1341 = phi <2 x float> [ zeroinitializer, %21 ], [ %1314, %._crit_edge.loopexit ]
  %1342 = phi <2 x float> [ zeroinitializer, %21 ], [ %1313, %._crit_edge.loopexit ]
  %1343 = phi <2 x float> [ zeroinitializer, %21 ], [ %1312, %._crit_edge.loopexit ]
  %1344 = phi <2 x float> [ zeroinitializer, %21 ], [ %1311, %._crit_edge.loopexit ]
  %1345 = phi <2 x float> [ zeroinitializer, %21 ], [ %1310, %._crit_edge.loopexit ]
  %1346 = phi <2 x float> [ zeroinitializer, %21 ], [ %1309, %._crit_edge.loopexit ]
  %1347 = phi <2 x float> [ zeroinitializer, %21 ], [ %1308, %._crit_edge.loopexit ]
  %1348 = phi <2 x float> [ zeroinitializer, %21 ], [ %1307, %._crit_edge.loopexit ]
  %1349 = phi <2 x float> [ zeroinitializer, %21 ], [ %1306, %._crit_edge.loopexit ]
  %1350 = phi <2 x float> [ zeroinitializer, %21 ], [ %1305, %._crit_edge.loopexit ]
  %1351 = phi <2 x float> [ zeroinitializer, %21 ], [ %1304, %._crit_edge.loopexit ]
  %1352 = phi <2 x float> [ zeroinitializer, %21 ], [ %1303, %._crit_edge.loopexit ]
  %1353 = phi <2 x float> [ zeroinitializer, %21 ], [ %1302, %._crit_edge.loopexit ]
  %1354 = phi <2 x float> [ zeroinitializer, %21 ], [ %1301, %._crit_edge.loopexit ]
  %1355 = phi <2 x float> [ zeroinitializer, %21 ], [ %1300, %._crit_edge.loopexit ]
  %1356 = phi <2 x float> [ zeroinitializer, %21 ], [ %1299, %._crit_edge.loopexit ]
  %1357 = phi <2 x float> [ zeroinitializer, %21 ], [ %1298, %._crit_edge.loopexit ]
  %1358 = phi <2 x float> [ zeroinitializer, %21 ], [ %1297, %._crit_edge.loopexit ]
  %1359 = phi <2 x float> [ zeroinitializer, %21 ], [ %1296, %._crit_edge.loopexit ]
  %1360 = tail call i1 @llvm.amdgcn.class.f32(float %.lcssa2, i32 144), !dbg !62
  %1361 = select i1 %1360, float 0x41F0000000000000, float 1.000000e+00, !dbg !62
  %1362 = fmul float %.lcssa2, %1361, !dbg !62
  %1363 = tail call float @llvm.log2.f32(float %1362), !dbg !62
  %1364 = select i1 %1360, float 3.200000e+01, float 0.000000e+00, !dbg !62
  %1365 = fsub float %1363, %1364, !dbg !62
  %1366 = fadd float %.lcssa, %1365, !dbg !63
  fence syncscope("workgroup") release, !dbg !64
  tail call void @llvm.amdgcn.s.barrier(), !dbg !64
  fence syncscope("workgroup") acquire, !dbg !64
  %1367 = zext i32 %38 to i64, !dbg !64
  %1368 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1367, !dbg !64
  %1369 = insertelement <1 x float> undef, float %1366, i64 0, !dbg !64
  store <1 x float> %1369, ptr addrspace(3) %1368, align 4, !dbg !64
  fence syncscope("workgroup") release, !dbg !64
  tail call void @llvm.amdgcn.s.barrier(), !dbg !64
  fence syncscope("workgroup") acquire, !dbg !64
  %urem = and i32 %22, 128, !dbg !64
  %.not.not = icmp eq i32 %urem, 0, !dbg !64
  br i1 %.not.not, label %1370, label %1379, !dbg !64

1370:                                             ; preds = %._crit_edge
  %1371 = zext i32 %41 to i64, !dbg !64
  %1372 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1371, !dbg !64
  %1373 = load i32, ptr addrspace(3) %1372, align 4, !dbg !64
  %1374 = mul i32 %43, %20, !dbg !65
  %1375 = sext i32 %1374 to i64, !dbg !66
  %1376 = getelementptr float, ptr addrspace(1) %4, i64 %1375, !dbg !66
  %1377 = sext i32 %54 to i64, !dbg !67
  %1378 = getelementptr float, ptr addrspace(1) %1376, i64 %1377, !dbg !67
  store i32 %1373, ptr addrspace(1) %1378, align 4, !dbg !64
  br label %1379, !dbg !64

1379:                                             ; preds = %1370, %._crit_edge
  %1380 = insertelement <2 x float> poison, float %.lcssa2, i64 0, !dbg !68
  %1381 = shufflevector <2 x float> %1380, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %1382 = fdiv <2 x float> %1359, %1381, !dbg !68
  %1383 = fdiv <2 x float> %1358, %1381, !dbg !68
  %1384 = fdiv <2 x float> %1357, %1381, !dbg !68
  %1385 = fdiv <2 x float> %1356, %1381, !dbg !68
  %1386 = fdiv <2 x float> %1355, %1381, !dbg !68
  %1387 = fdiv <2 x float> %1354, %1381, !dbg !68
  %1388 = fdiv <2 x float> %1353, %1381, !dbg !68
  %1389 = fdiv <2 x float> %1352, %1381, !dbg !68
  %1390 = fdiv <2 x float> %1351, %1381, !dbg !68
  %1391 = fdiv <2 x float> %1350, %1381, !dbg !68
  %1392 = fdiv <2 x float> %1349, %1381, !dbg !68
  %1393 = fdiv <2 x float> %1348, %1381, !dbg !68
  %1394 = fdiv <2 x float> %1347, %1381, !dbg !68
  %1395 = fdiv <2 x float> %1346, %1381, !dbg !68
  %1396 = fdiv <2 x float> %1345, %1381, !dbg !68
  %1397 = fdiv <2 x float> %1344, %1381, !dbg !68
  %1398 = fdiv <2 x float> %1343, %1381, !dbg !68
  %1399 = fdiv <2 x float> %1342, %1381, !dbg !68
  %1400 = fdiv <2 x float> %1341, %1381, !dbg !68
  %1401 = fdiv <2 x float> %1340, %1381, !dbg !68
  %1402 = fdiv <2 x float> %1339, %1381, !dbg !68
  %1403 = fdiv <2 x float> %1338, %1381, !dbg !68
  %1404 = fdiv <2 x float> %1337, %1381, !dbg !68
  %1405 = fdiv <2 x float> %1336, %1381, !dbg !68
  %1406 = fdiv <2 x float> %1335, %1381, !dbg !68
  %1407 = fdiv <2 x float> %1334, %1381, !dbg !68
  %1408 = fdiv <2 x float> %1333, %1381, !dbg !68
  %1409 = fdiv <2 x float> %1332, %1381, !dbg !68
  %1410 = fdiv <2 x float> %1331, %1381, !dbg !68
  %1411 = fdiv <2 x float> %1330, %1381, !dbg !68
  %1412 = fdiv <2 x float> %1329, %1381, !dbg !68
  %1413 = fdiv <2 x float> %1328, %1381, !dbg !68
  %1414 = or i64 %1367, %49, !dbg !25
  %1415 = lshr i32 %22, 3, !dbg !12
  %1416 = and i32 %1415, 4, !dbg !12
  %1417 = or i32 %1416, 122, !dbg !12
  %1418 = zext i32 %1417 to i64
  %1419 = or i32 %1416, 120, !dbg !12
  %1420 = zext i32 %1419 to i64
  %1421 = or i32 %1416, 114, !dbg !12
  %1422 = zext i32 %1421 to i64
  %1423 = or i32 %1416, 112, !dbg !12
  %1424 = zext i32 %1423 to i64
  %1425 = or i32 %1416, 106, !dbg !12
  %1426 = zext i32 %1425 to i64
  %1427 = or i32 %1416, 104, !dbg !12
  %1428 = zext i32 %1427 to i64
  %1429 = or i32 %1416, 98, !dbg !12
  %1430 = zext i32 %1429 to i64
  %1431 = or i32 %1416, 96, !dbg !12
  %1432 = zext i32 %1431 to i64
  %1433 = or i32 %1416, 90, !dbg !12
  %1434 = zext i32 %1433 to i64
  %1435 = or i32 %1416, 88, !dbg !12
  %1436 = zext i32 %1435 to i64
  %1437 = or i32 %1416, 82, !dbg !12
  %1438 = zext i32 %1437 to i64
  %1439 = or i32 %1416, 80, !dbg !12
  %1440 = zext i32 %1439 to i64
  %1441 = or i32 %1416, 74, !dbg !12
  %1442 = zext i32 %1441 to i64
  %1443 = or i32 %1416, 72, !dbg !12
  %1444 = zext i32 %1443 to i64
  %1445 = or i32 %1416, 66, !dbg !12
  %1446 = zext i32 %1445 to i64
  %1447 = or i32 %1416, 64, !dbg !12
  %1448 = zext i32 %1447 to i64
  %1449 = or i32 %1416, 58, !dbg !12
  %1450 = zext i32 %1449 to i64
  %1451 = or i32 %1416, 56, !dbg !12
  %1452 = zext i32 %1451 to i64
  %1453 = or i32 %1416, 50, !dbg !12
  %1454 = zext i32 %1453 to i64
  %1455 = or i32 %1416, 48, !dbg !12
  %1456 = zext i32 %1455 to i64
  %1457 = or i32 %1416, 42, !dbg !12
  %1458 = zext i32 %1457 to i64
  %1459 = or i32 %1416, 40, !dbg !12
  %1460 = zext i32 %1459 to i64
  %1461 = or i32 %1416, 34, !dbg !12
  %1462 = zext i32 %1461 to i64
  %1463 = or i32 %1416, 32, !dbg !12
  %1464 = zext i32 %1463 to i64
  %1465 = or i32 %1416, 26, !dbg !12
  %1466 = zext i32 %1465 to i64
  %1467 = or i32 %1416, 24, !dbg !12
  %1468 = zext i32 %1467 to i64
  %1469 = or i32 %1416, 18, !dbg !12
  %1470 = zext i32 %1469 to i64
  %1471 = or i32 %1416, 16, !dbg !12
  %1472 = zext i32 %1471 to i64
  %1473 = or i32 %1416, 10, !dbg !12
  %1474 = zext i32 %1473 to i64
  %1475 = or i32 %1416, 8, !dbg !12
  %1476 = zext i32 %1475 to i64
  %1477 = or i32 %1416, 2, !dbg !12
  %1478 = zext i32 %1477 to i64
  %1479 = zext i32 %1416 to i64
  %1480 = getelementptr half, ptr addrspace(1) %5, i64 %45, !dbg !69
  %1481 = sext i32 %17 to i64, !dbg !70
  %1482 = fptrunc <2 x float> %1413 to <2 x half>, !dbg !71
  %1483 = fptrunc <2 x float> %1412 to <2 x half>, !dbg !71
  %1484 = fptrunc <2 x float> %1411 to <2 x half>, !dbg !71
  %1485 = fptrunc <2 x float> %1410 to <2 x half>, !dbg !71
  %1486 = fptrunc <2 x float> %1409 to <2 x half>, !dbg !71
  %1487 = fptrunc <2 x float> %1408 to <2 x half>, !dbg !71
  %1488 = fptrunc <2 x float> %1407 to <2 x half>, !dbg !71
  %1489 = fptrunc <2 x float> %1406 to <2 x half>, !dbg !71
  %1490 = fptrunc <2 x float> %1405 to <2 x half>, !dbg !71
  %1491 = fptrunc <2 x float> %1404 to <2 x half>, !dbg !71
  %1492 = fptrunc <2 x float> %1403 to <2 x half>, !dbg !71
  %1493 = fptrunc <2 x float> %1402 to <2 x half>, !dbg !71
  %1494 = fptrunc <2 x float> %1401 to <2 x half>, !dbg !71
  %1495 = fptrunc <2 x float> %1400 to <2 x half>, !dbg !71
  %1496 = fptrunc <2 x float> %1399 to <2 x half>, !dbg !71
  %1497 = fptrunc <2 x float> %1398 to <2 x half>, !dbg !71
  %1498 = fptrunc <2 x float> %1397 to <2 x half>, !dbg !71
  %1499 = fptrunc <2 x float> %1396 to <2 x half>, !dbg !71
  %1500 = fptrunc <2 x float> %1395 to <2 x half>, !dbg !71
  %1501 = fptrunc <2 x float> %1394 to <2 x half>, !dbg !71
  %1502 = fptrunc <2 x float> %1393 to <2 x half>, !dbg !71
  %1503 = fptrunc <2 x float> %1392 to <2 x half>, !dbg !71
  %1504 = fptrunc <2 x float> %1391 to <2 x half>, !dbg !71
  %1505 = fptrunc <2 x float> %1390 to <2 x half>, !dbg !71
  %1506 = fptrunc <2 x float> %1389 to <2 x half>, !dbg !71
  %1507 = fptrunc <2 x float> %1388 to <2 x half>, !dbg !71
  %1508 = fptrunc <2 x float> %1387 to <2 x half>, !dbg !71
  %1509 = fptrunc <2 x float> %1386 to <2 x half>, !dbg !71
  %1510 = fptrunc <2 x float> %1385 to <2 x half>, !dbg !71
  %1511 = fptrunc <2 x float> %1384 to <2 x half>, !dbg !71
  %1512 = fptrunc <2 x float> %1383 to <2 x half>, !dbg !71
  %1513 = fptrunc <2 x float> %1382 to <2 x half>, !dbg !71
  %1514 = mul nsw i64 %1414, %1481, !dbg !72
  %1515 = getelementptr half, ptr addrspace(1) %1480, i64 %1514, !dbg !72
  %1516 = getelementptr half, ptr addrspace(1) %1515, i64 %1479, !dbg !72
  %1517 = getelementptr half, ptr addrspace(1) %1515, i64 %1478, !dbg !72
  %1518 = getelementptr half, ptr addrspace(1) %1515, i64 %1476, !dbg !72
  %1519 = getelementptr half, ptr addrspace(1) %1515, i64 %1474, !dbg !72
  %1520 = getelementptr half, ptr addrspace(1) %1515, i64 %1472, !dbg !72
  %1521 = getelementptr half, ptr addrspace(1) %1515, i64 %1470, !dbg !72
  %1522 = getelementptr half, ptr addrspace(1) %1515, i64 %1468, !dbg !72
  %1523 = getelementptr half, ptr addrspace(1) %1515, i64 %1466, !dbg !72
  %1524 = getelementptr half, ptr addrspace(1) %1515, i64 %1464, !dbg !72
  %1525 = getelementptr half, ptr addrspace(1) %1515, i64 %1462, !dbg !72
  %1526 = getelementptr half, ptr addrspace(1) %1515, i64 %1460, !dbg !72
  %1527 = getelementptr half, ptr addrspace(1) %1515, i64 %1458, !dbg !72
  %1528 = getelementptr half, ptr addrspace(1) %1515, i64 %1456, !dbg !72
  %1529 = getelementptr half, ptr addrspace(1) %1515, i64 %1454, !dbg !72
  %1530 = getelementptr half, ptr addrspace(1) %1515, i64 %1452, !dbg !72
  %1531 = getelementptr half, ptr addrspace(1) %1515, i64 %1450, !dbg !72
  %1532 = getelementptr half, ptr addrspace(1) %1515, i64 %1448, !dbg !72
  %1533 = getelementptr half, ptr addrspace(1) %1515, i64 %1446, !dbg !72
  %1534 = getelementptr half, ptr addrspace(1) %1515, i64 %1444, !dbg !72
  %1535 = getelementptr half, ptr addrspace(1) %1515, i64 %1442, !dbg !72
  %1536 = getelementptr half, ptr addrspace(1) %1515, i64 %1440, !dbg !72
  %1537 = getelementptr half, ptr addrspace(1) %1515, i64 %1438, !dbg !72
  %1538 = getelementptr half, ptr addrspace(1) %1515, i64 %1436, !dbg !72
  %1539 = getelementptr half, ptr addrspace(1) %1515, i64 %1434, !dbg !72
  %1540 = getelementptr half, ptr addrspace(1) %1515, i64 %1432, !dbg !72
  %1541 = getelementptr half, ptr addrspace(1) %1515, i64 %1430, !dbg !72
  %1542 = getelementptr half, ptr addrspace(1) %1515, i64 %1428, !dbg !72
  %1543 = getelementptr half, ptr addrspace(1) %1515, i64 %1426, !dbg !72
  %1544 = getelementptr half, ptr addrspace(1) %1515, i64 %1424, !dbg !72
  %1545 = getelementptr half, ptr addrspace(1) %1515, i64 %1422, !dbg !72
  %1546 = getelementptr half, ptr addrspace(1) %1515, i64 %1420, !dbg !72
  %1547 = getelementptr half, ptr addrspace(1) %1515, i64 %1418, !dbg !72
  store <2 x half> %1482, ptr addrspace(1) %1516, align 4, !dbg !72
  store <2 x half> %1483, ptr addrspace(1) %1517, align 4, !dbg !72
  store <2 x half> %1484, ptr addrspace(1) %1518, align 4, !dbg !72
  store <2 x half> %1485, ptr addrspace(1) %1519, align 4, !dbg !72
  store <2 x half> %1486, ptr addrspace(1) %1520, align 4, !dbg !72
  store <2 x half> %1487, ptr addrspace(1) %1521, align 4, !dbg !72
  store <2 x half> %1488, ptr addrspace(1) %1522, align 4, !dbg !72
  store <2 x half> %1489, ptr addrspace(1) %1523, align 4, !dbg !72
  store <2 x half> %1490, ptr addrspace(1) %1524, align 4, !dbg !72
  store <2 x half> %1491, ptr addrspace(1) %1525, align 4, !dbg !72
  store <2 x half> %1492, ptr addrspace(1) %1526, align 4, !dbg !72
  store <2 x half> %1493, ptr addrspace(1) %1527, align 4, !dbg !72
  store <2 x half> %1494, ptr addrspace(1) %1528, align 4, !dbg !72
  store <2 x half> %1495, ptr addrspace(1) %1529, align 4, !dbg !72
  store <2 x half> %1496, ptr addrspace(1) %1530, align 4, !dbg !72
  store <2 x half> %1497, ptr addrspace(1) %1531, align 4, !dbg !72
  store <2 x half> %1498, ptr addrspace(1) %1532, align 4, !dbg !72
  store <2 x half> %1499, ptr addrspace(1) %1533, align 4, !dbg !72
  store <2 x half> %1500, ptr addrspace(1) %1534, align 4, !dbg !72
  store <2 x half> %1501, ptr addrspace(1) %1535, align 4, !dbg !72
  store <2 x half> %1502, ptr addrspace(1) %1536, align 4, !dbg !72
  store <2 x half> %1503, ptr addrspace(1) %1537, align 4, !dbg !72
  store <2 x half> %1504, ptr addrspace(1) %1538, align 4, !dbg !72
  store <2 x half> %1505, ptr addrspace(1) %1539, align 4, !dbg !72
  store <2 x half> %1506, ptr addrspace(1) %1540, align 4, !dbg !72
  store <2 x half> %1507, ptr addrspace(1) %1541, align 4, !dbg !72
  store <2 x half> %1508, ptr addrspace(1) %1542, align 4, !dbg !72
  store <2 x half> %1509, ptr addrspace(1) %1543, align 4, !dbg !72
  store <2 x half> %1510, ptr addrspace(1) %1544, align 4, !dbg !72
  store <2 x half> %1511, ptr addrspace(1) %1545, align 4, !dbg !72
  store <2 x half> %1512, ptr addrspace(1) %1546, align 4, !dbg !72
  store <2 x half> %1513, ptr addrspace(1) %1547, align 4, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.y() #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.exp2.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.log2.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i1 @llvm.amdgcn.class.f32(float, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.exp2.v2f32(<2 x float>) #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.exp2.v4f32(<4 x float>) #5

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1, 256" "amdgpu-unsafe-fp-atomics"="true" "amdgpu-waves-per-eu"="2" "denormal-fp-math-f32"="preserve-sign" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2}
!llvm.dbg.cu = !{!3}
!nvvm.annotations = !{!5}
!opencl.ocl.version = !{}
!llvm.ident = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 0}
!3 = distinct !DICompileUnit(language: DW_LANG_C, file: !4, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!4 = !DIFile(filename: "06-fused-attention-transV.py", directory: "/triton/python/perf-kernels")
!5 = !{ptr @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de, !"kernel", i32 1}
!6 = !{i32 2, i32 0}
!7 = !{!"clang version 14.0.0"}
!8 = !{!"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"}
!9 = distinct !DISubprogram(name: "_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de", linkageName: "_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de", scope: !4, file: !4, line: 86, type: !10, scopeLine: 86, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !3)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DILocation(line: 128, column: 46, scope: !9)
!13 = !DILocation(line: 100, column: 28, scope: !9)
!14 = !DILocation(line: 101, column: 27, scope: !9)
!15 = !DILocation(line: 102, column: 26, scope: !9)
!16 = !DILocation(line: 104, column: 17, scope: !9)
!17 = !DILocation(line: 107, column: 27, scope: !9)
!18 = !DILocation(line: 103, column: 18, scope: !9)
!19 = !DILocation(line: 112, column: 17, scope: !9)
!20 = !DILocation(line: 111, column: 18, scope: !9)
!21 = !DILocation(line: 120, column: 17, scope: !9)
!22 = !DILocation(line: 119, column: 18, scope: !9)
!23 = !DILocation(line: 128, column: 33, scope: !9)
!24 = !DILocation(line: 137, column: 26, scope: !9)
!25 = !DILocation(line: 139, column: 16, scope: !9)
!26 = !DILocation(line: 140, column: 13, scope: !9)
!27 = !DILocation(line: 140, column: 26, scope: !9)
!28 = !DILocation(line: 58, column: 20, scope: !29, inlinedAt: !30)
!29 = distinct !DILexicalBlockFile(scope: !9, file: !4, discriminator: 0)
!30 = !DILocation(line: 150, column: 19, scope: !29)
!31 = !DILocation(line: 73, column: 24, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 55, column: 33, scope: !29, inlinedAt: !30)
!33 = !DILocation(line: 65, scope: !9, inlinedAt: !34)
!34 = !DILocation(line: 150, column: 19, scope: !9)
!35 = !DILocation(line: 124, column: 23, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/triton/python/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !29, file: !37, discriminator: 0)
!39 = !DILocation(line: 168, column: 40, scope: !36, inlinedAt: !40)
!40 = !DILocation(line: 66, column: 42, scope: !36, inlinedAt: !41)
!41 = !DILocation(line: 150, column: 19, scope: !36)
!42 = !DILocation(line: 168, column: 40, scope: !38, inlinedAt: !43)
!43 = !DILocation(line: 66, column: 42, scope: !38, inlinedAt: !44)
!44 = !DILocation(line: 150, column: 19, scope: !38)
!45 = !DILocation(line: 124, column: 23, scope: !38, inlinedAt: !46)
!46 = !DILocation(line: 66, column: 31, scope: !38, inlinedAt: !44)
!47 = !DILocation(line: 67, column: 18, scope: !29, inlinedAt: !30)
!48 = !DILocation(line: 68, column: 25, scope: !29, inlinedAt: !30)
!49 = !DILocation(line: 70, column: 35, scope: !29, inlinedAt: !30)
!50 = !DILocation(line: 70, column: 29, scope: !29, inlinedAt: !30)
!51 = !DILocation(line: 71, column: 20, scope: !29, inlinedAt: !30)
!52 = !DILocation(line: 74, column: 27, scope: !29, inlinedAt: !30)
!53 = !DILocation(line: 74, scope: !9, inlinedAt: !34)
!54 = !DILocation(line: 233, column: 15, scope: !36, inlinedAt: !55)
!55 = !DILocation(line: 243, column: 36, scope: !36, inlinedAt: !56)
!56 = !DILocation(line: 76, column: 25, scope: !36, inlinedAt: !41)
!57 = !DILocation(line: 243, column: 36, scope: !38, inlinedAt: !58)
!58 = !DILocation(line: 76, column: 25, scope: !38, inlinedAt: !44)
!59 = !DILocation(line: 77, column: 20, scope: !29, inlinedAt: !30)
!60 = !DILocation(line: 77, column: 28, scope: !29, inlinedAt: !30)
!61 = !DILocation(line: 81, column: 46, scope: !29, inlinedAt: !30)
!62 = !DILocation(line: 168, column: 40, scope: !9)
!63 = !DILocation(line: 168, column: 27, scope: !9)
!64 = !DILocation(line: 168, column: 21, scope: !9)
!65 = !DILocation(line: 167, column: 26, scope: !9)
!66 = !DILocation(line: 167, column: 17, scope: !9)
!67 = !DILocation(line: 167, column: 34, scope: !9)
!68 = !DILocation(line: 166, column: 16, scope: !9)
!69 = !DILocation(line: 171, column: 19, scope: !9)
!70 = !DILocation(line: 170, column: 18, scope: !9)
!71 = !DILocation(line: 178, column: 33, scope: !9)
!72 = !DILocation(line: 178, column: 26, scope: !9)
!73 = !DILocation(line: 178, column: 4, scope: !9)
