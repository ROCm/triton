module {
  tt.func public @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg12: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg14: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg15: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg16: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg17: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg18: i32, %arg19: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg20: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}) attributes {noinline = false} {
    %c0_i64 = arith.constant 0 : i64
    %c128_i64 = arith.constant 128 : i64
    %cst = arith.constant dense<1.000000e+00> : tensor<128xf32>
    %cst_0 = arith.constant dense<0xFF800000> : tensor<128xf32>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x128xf32>
    %cst_2 = arith.constant 1.44269502 : f32
    %c0_i32 = arith.constant 0 : i32
    %c128_i32 = arith.constant 128 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.muli %1, %arg7 : i32
    %3 = tt.addptr %arg0, %2 : !tt.ptr<f16, 1>, i32
    %4 = arith.muli %0, %c128_i32 : i32
    %5 = arith.extsi %arg8 : i32 to i64
    %6 = arith.extsi %4 : i32 to i64
    %7 = tt.addptr %arg1, %2 : !tt.ptr<f16, 1>, i32
    %8 = arith.extsi %arg11 : i32 to i64
    %9 = tt.addptr %arg2, %2 : !tt.ptr<f16, 1>, i32
    %10 = arith.extsi %arg14 : i32 to i64
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>
    %12 = tt.splat %4 : (i32) -> tensor<128xi32>
    %13 = arith.addi %12, %11 : tensor<128xi32>
    %14 = arith.mulf %arg3, %cst_2 : f32
    %15 = tt.splat %6 : (i64) -> tensor<128xi64>
    %16 = arith.extsi %11 : tensor<128xi32> to tensor<128xi64>
    %17 = arith.addi %15, %16 : tensor<128xi64>
    %18 = tt.expand_dims %17 {axis = 1 : i32} : (tensor<128xi64>) -> tensor<128x1xi64>
    %19 = tt.splat %5 : (i64) -> tensor<128x1xi64>
    %20 = arith.muli %18, %19 : tensor<128x1xi64>
    %21 = tt.splat %3 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>>
    %22 = tt.addptr %21, %20 : tensor<128x1x!tt.ptr<f16, 1>>, tensor<128x1xi64>
    %23 = tt.broadcast %22 : (tensor<128x1x!tt.ptr<f16, 1>>) -> tensor<128x128x!tt.ptr<f16, 1>>
    %24 = tt.expand_dims %16 {axis = 0 : i32} : (tensor<128xi64>) -> tensor<1x128xi64>
    %25 = tt.broadcast %24 : (tensor<1x128xi64>) -> tensor<128x128xi64>
    %26 = tt.addptr %23, %25 : tensor<128x128x!tt.ptr<f16, 1>>, tensor<128x128xi64>
    %27 = tt.load %26 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x128xf16>
    %28 = tt.splat %14 : (f32) -> tensor<128x128xf32>
    %29 = arith.extf %27 : tensor<128x128xf16> to tensor<128x128xf32>
    %30 = arith.mulf %29, %28 : tensor<128x128xf32>
    %31 = arith.truncf %30 : tensor<128x128xf32> to tensor<128x128xf16>
    %32 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<128xi64>) -> tensor<128x1xi64>
    %33 = tt.splat %7 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>>
    %34 = tt.addptr %33, %32 : tensor<128x1x!tt.ptr<f16, 1>>, tensor<128x1xi64>
    %35 = tt.broadcast %34 : (tensor<128x1x!tt.ptr<f16, 1>>) -> tensor<128x128x!tt.ptr<f16, 1>>
    %36 = tt.splat %8 : (i64) -> tensor<1x128xi64>
    %37 = tt.splat %9 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>>
    %38 = tt.splat %10 : (i64) -> tensor<1x128xi64>
    %39 = arith.muli %24, %38 : tensor<1x128xi64>
    %40 = tt.broadcast %39 : (tensor<1x128xi64>) -> tensor<128x128xi64>
    %41:5 = scf.for %arg21 = %c0_i32 to %arg20 step %c128_i32 iter_args(%arg22 = %cst_1, %arg23 = %cst, %arg24 = %cst_0, %arg25 = %c0_i64, %arg26 = %c0_i64) -> (tensor<128x128xf32>, tensor<128xf32>, tensor<128xf32>, i64, i64)  : i32 {
      %60 = tt.splat %arg26 : (i64) -> tensor<128xi64>
      %61 = arith.addi %60, %16 : tensor<128xi64>
      %62 = tt.expand_dims %61 {axis = 0 : i32} : (tensor<128xi64>) -> tensor<1x128xi64>
      %63 = arith.muli %62, %36 : tensor<1x128xi64>
      %64 = tt.broadcast %63 : (tensor<1x128xi64>) -> tensor<128x128xi64>
      %65 = tt.addptr %35, %64 : tensor<128x128x!tt.ptr<f16, 1>>, tensor<128x128xi64>
      %66 = tt.load %65 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x128xf16>
      %67 = tt.dot %31, %66, %cst_1 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x128xf16> * tensor<128x128xf16> -> tensor<128x128xf32>
      %68 = "tt.reduce"(%67) <{axis = 1 : i32}> ({
      ^bb0(%arg27: f32, %arg28: f32):
        %93 = arith.maximumf %arg27, %arg28 : f32
        tt.reduce.return %93 : f32
      }) : (tensor<128x128xf32>) -> tensor<128xf32>
      %69 = arith.maximumf %arg24, %68 : tensor<128xf32>
      %70 = tt.expand_dims %69 {axis = 1 : i32} : (tensor<128xf32>) -> tensor<128x1xf32>
      %71 = tt.broadcast %70 : (tensor<128x1xf32>) -> tensor<128x128xf32>
      %72 = arith.subf %67, %71 : tensor<128x128xf32>
      %73 = tt.extern_elementwise %72 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
      %74 = arith.subf %arg24, %69 : tensor<128xf32>
      %75 = tt.extern_elementwise %74 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<128xf32>) -> tensor<128xf32>
      %76 = tt.expand_dims %75 {axis = 1 : i32} : (tensor<128xf32>) -> tensor<128x1xf32>
      %77 = tt.broadcast %76 : (tensor<128x1xf32>) -> tensor<128x128xf32>
      %78 = arith.mulf %arg22, %77 : tensor<128x128xf32>
      %79 = tt.splat %arg25 : (i64) -> tensor<128xi64>
      %80 = arith.addi %79, %16 : tensor<128xi64>
      %81 = tt.expand_dims %80 {axis = 1 : i32} : (tensor<128xi64>) -> tensor<128x1xi64>
      %82 = tt.addptr %37, %81 : tensor<128x1x!tt.ptr<f16, 1>>, tensor<128x1xi64>
      %83 = tt.broadcast %82 : (tensor<128x1x!tt.ptr<f16, 1>>) -> tensor<128x128x!tt.ptr<f16, 1>>
      %84 = tt.addptr %83, %40 : tensor<128x128x!tt.ptr<f16, 1>>, tensor<128x128xi64>
      %85 = tt.load %84 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x128xf16>
      %86 = arith.truncf %73 : tensor<128x128xf32> to tensor<128x128xf16>
      %87 = tt.dot %86, %85, %78 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x128xf16> * tensor<128x128xf16> -> tensor<128x128xf32>
      %88 = "tt.reduce"(%73) <{axis = 1 : i32}> ({
      ^bb0(%arg27: f32, %arg28: f32):
        %93 = arith.addf %arg27, %arg28 : f32
        tt.reduce.return %93 : f32
      }) : (tensor<128x128xf32>) -> tensor<128xf32>
      %89 = arith.mulf %arg23, %75 : tensor<128xf32>
      %90 = arith.addf %89, %88 : tensor<128xf32>
      %91 = arith.addi %arg25, %c128_i64 : i64
      %92 = arith.addi %arg26, %c128_i64 : i64
      scf.yield %87, %90, %69, %91, %92 : tensor<128x128xf32>, tensor<128xf32>, tensor<128xf32>, i64, i64
    }
    %42 = tt.expand_dims %41#1 {axis = 1 : i32} : (tensor<128xf32>) -> tensor<128x1xf32>
    %43 = tt.broadcast %42 : (tensor<128x1xf32>) -> tensor<128x128xf32>
    %44 = arith.divf %41#0, %43 : tensor<128x128xf32>
    %45 = arith.muli %1, %arg20 : i32
    %46 = tt.addptr %arg4, %45 : !tt.ptr<f32, 1>, i32
    %47 = tt.splat %46 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>>
    %48 = tt.addptr %47, %13 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %49 = tt.extern_elementwise %41#1 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_log2f"} : (tensor<128xf32>) -> tensor<128xf32>
    %50 = arith.addf %41#2, %49 : tensor<128xf32>
    tt.store %48, %50 {cache = 1 : i32, evict = 1 : i32} : tensor<128xf32>
    %51 = tt.addptr %arg5, %2 : !tt.ptr<f16, 1>, i32
    %52 = arith.extsi %arg17 : i32 to i64
    %53 = arith.truncf %44 : tensor<128x128xf32> to tensor<128x128xf16>
    %54 = tt.splat %52 : (i64) -> tensor<128x1xi64>
    %55 = arith.muli %18, %54 : tensor<128x1xi64>
    %56 = tt.splat %51 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>>
    %57 = tt.addptr %56, %55 : tensor<128x1x!tt.ptr<f16, 1>>, tensor<128x1xi64>
    %58 = tt.broadcast %57 : (tensor<128x1x!tt.ptr<f16, 1>>) -> tensor<128x128x!tt.ptr<f16, 1>>
    %59 = tt.addptr %58, %25 : tensor<128x128x!tt.ptr<f16, 1>>, tensor<128x128xi64>
    tt.store %59, %53 {cache = 1 : i32, evict = 1 : i32} : tensor<128x128xf16>
    tt.return
  }
}
