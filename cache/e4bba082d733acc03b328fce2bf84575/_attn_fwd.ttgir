#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [16, 4], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
#mfma = #triton_gpu.mfma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg12: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg14: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg15: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg16: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg17: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg18: i32, %arg19: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg20: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %cst_0 = arith.constant dense<0xFF800000> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mfma>
    %c128_i64 = arith.constant 128 : i64
    %c0_i64 = arith.constant 0 : i64
    %cst_2 = arith.constant 1.44269502 : f32
    %c0_i32 = arith.constant 0 : i32
    %c128_i32 = arith.constant 128 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.muli %1, %arg7 : i32
    %3 = tt.addptr %arg0, %2 : !tt.ptr<f16, 1>, i32
    %4 = arith.muli %0, %c128_i32 : i32
    %5 = arith.extsi %arg8 : i32 to i64
    %6 = arith.extsi %4 : i32 to i64
    %7 = tt.addptr %arg1, %2 : !tt.ptr<f16, 1>, i32
    %8 = arith.extsi %arg11 : i32 to i64
    %9 = tt.addptr %arg2, %2 : !tt.ptr<f16, 1>, i32
    %10 = arith.extsi %arg14 : i32 to i64
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %12 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %13 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %14 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>>
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %16 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %17 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked2>
    %18 = tt.splat %4 : (i32) -> tensor<128xi32, #blocked2>
    %19 = arith.addi %18, %17 : tensor<128xi32, #blocked2>
    %20 = arith.mulf %arg3, %cst_2 : f32
    %21 = tt.splat %6 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %22 = tt.splat %6 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %23 = arith.extsi %11 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %24 = arith.extsi %12 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %25 = arith.extsi %13 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %26 = arith.extsi %14 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #mfma}>>
    %27 = arith.extsi %15 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %28 = arith.extsi %16 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %29 = arith.addi %21, %23 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %30 = arith.addi %22, %24 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %31 = tt.expand_dims %29 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<128x1xi64, #blocked>
    %32 = tt.expand_dims %30 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xi64, #mfma>
    %33 = tt.splat %5 : (i64) -> tensor<128x1xi64, #blocked>
    %34 = arith.muli %31, %33 : tensor<128x1xi64, #blocked>
    %35 = tt.splat %3 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #blocked>
    %36 = tt.addptr %35, %34 : tensor<128x1x!tt.ptr<f16, 1>, #blocked>, tensor<128x1xi64, #blocked>
    %37 = tt.broadcast %36 : (tensor<128x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<128x128x!tt.ptr<f16, 1>, #blocked>
    %38 = tt.expand_dims %25 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x128xi64, #blocked>
    %39 = tt.expand_dims %26 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #mfma}>>) -> tensor<1x128xi64, #mfma>
    %40 = tt.expand_dims %27 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x128xi64, #blocked1>
    %41 = tt.broadcast %38 : (tensor<1x128xi64, #blocked>) -> tensor<128x128xi64, #blocked>
    %42 = tt.broadcast %39 : (tensor<1x128xi64, #mfma>) -> tensor<128x128xi64, #mfma>
    %43 = tt.addptr %37, %41 : tensor<128x128x!tt.ptr<f16, 1>, #blocked>, tensor<128x128xi64, #blocked>
    %44 = tt.load %43 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x128xf16, #blocked>
    %45 = tt.splat %20 : (f32) -> tensor<128x128xf32, #blocked>
    %46 = arith.extf %44 : tensor<128x128xf16, #blocked> to tensor<128x128xf32, #blocked>
    %47 = arith.mulf %46, %45 : tensor<128x128xf32, #blocked>
    %48 = arith.truncf %47 : tensor<128x128xf32, #blocked> to tensor<128x128xf16, #blocked>
    %49 = triton_gpu.convert_layout %48 : (tensor<128x128xf16, #blocked>) -> tensor<128x128xf16, #shared>
    %50 = triton_gpu.convert_layout %49 : (tensor<128x128xf16, #shared>) -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
    %51 = tt.expand_dims %28 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi64, #blocked1>
    %52 = tt.splat %7 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #blocked1>
    %53 = tt.addptr %52, %51 : tensor<128x1x!tt.ptr<f16, 1>, #blocked1>, tensor<128x1xi64, #blocked1>
    %54 = tt.broadcast %53 : (tensor<128x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<128x128x!tt.ptr<f16, 1>, #blocked1>
    %55 = tt.splat %8 : (i64) -> tensor<1x128xi64, #blocked1>
    %56 = tt.splat %9 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #blocked1>
    %57 = tt.splat %10 : (i64) -> tensor<1x128xi64, #blocked1>
    %58 = arith.muli %40, %57 : tensor<1x128xi64, #blocked1>
    %59 = tt.broadcast %58 : (tensor<1x128xi64, #blocked1>) -> tensor<128x128xi64, #blocked1>
    %60:5 = scf.for %arg21 = %c0_i32 to %arg20 step %c128_i32 iter_args(%arg22 = %cst_1, %arg23 = %cst, %arg24 = %cst_0, %arg25 = %c0_i64, %arg26 = %c0_i64) -> (tensor<128x128xf32, #mfma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, i64, i64)  : i32 {
      %80 = tt.splat %arg26 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
      %81 = arith.addi %80, %27 : tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
      %82 = tt.expand_dims %81 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x128xi64, #blocked1>
      %83 = arith.muli %82, %55 : tensor<1x128xi64, #blocked1>
      %84 = tt.broadcast %83 : (tensor<1x128xi64, #blocked1>) -> tensor<128x128xi64, #blocked1>
      %85 = tt.addptr %54, %84 : tensor<128x128x!tt.ptr<f16, 1>, #blocked1>, tensor<128x128xi64, #blocked1>
      %86 = tt.load %85 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x128xf16, #blocked1>
      %87 = triton_gpu.convert_layout %86 : (tensor<128x128xf16, #blocked1>) -> tensor<128x128xf16, #shared1>
      %88 = triton_gpu.convert_layout %87 : (tensor<128x128xf16, #shared1>) -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %89 = tt.dot %50, %88, %cst_1 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %90 = "tt.reduce"(%89) <{axis = 1 : i32}> ({
      ^bb0(%arg27: f32, %arg28: f32):
        %118 = arith.maximumf %arg27, %arg28 : f32
        tt.reduce.return %118 : f32
      }) : (tensor<128x128xf32, #mfma>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %91 = arith.maximumf %arg24, %90 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %92 = tt.expand_dims %91 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xf32, #mfma>
      %93 = tt.broadcast %92 : (tensor<128x1xf32, #mfma>) -> tensor<128x128xf32, #mfma>
      %94 = arith.subf %89, %93 : tensor<128x128xf32, #mfma>
      %95 = tt.extern_elementwise %94 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<128x128xf32, #mfma>) -> tensor<128x128xf32, #mfma>
      %96 = arith.subf %arg24, %91 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %97 = tt.extern_elementwise %96 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %98 = tt.expand_dims %97 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xf32, #mfma>
      %99 = tt.broadcast %98 : (tensor<128x1xf32, #mfma>) -> tensor<128x128xf32, #mfma>
      %100 = arith.mulf %arg22, %99 : tensor<128x128xf32, #mfma>
      %101 = tt.splat %arg25 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
      %102 = arith.addi %101, %28 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
      %103 = tt.expand_dims %102 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi64, #blocked1>
      %104 = tt.addptr %56, %103 : tensor<128x1x!tt.ptr<f16, 1>, #blocked1>, tensor<128x1xi64, #blocked1>
      %105 = tt.broadcast %104 : (tensor<128x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<128x128x!tt.ptr<f16, 1>, #blocked1>
      %106 = tt.addptr %105, %59 : tensor<128x128x!tt.ptr<f16, 1>, #blocked1>, tensor<128x128xi64, #blocked1>
      %107 = tt.load %106 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x128xf16, #blocked1>
      %108 = triton_gpu.convert_layout %107 : (tensor<128x128xf16, #blocked1>) -> tensor<128x128xf16, #shared1>
      %109 = triton_gpu.convert_layout %108 : (tensor<128x128xf16, #shared1>) -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %110 = arith.truncf %95 : tensor<128x128xf32, #mfma> to tensor<128x128xf16, #mfma>
      %111 = triton_gpu.convert_layout %110 : (tensor<128x128xf16, #mfma>) -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
      %112 = tt.dot %111, %109, %100 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %113 = "tt.reduce"(%95) <{axis = 1 : i32}> ({
      ^bb0(%arg27: f32, %arg28: f32):
        %118 = arith.addf %arg27, %arg28 : f32
        tt.reduce.return %118 : f32
      }) : (tensor<128x128xf32, #mfma>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %114 = arith.mulf %arg23, %97 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %115 = arith.addf %114, %113 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %116 = arith.addi %arg25, %c128_i64 : i64
      %117 = arith.addi %arg26, %c128_i64 : i64
      scf.yield %112, %115, %91, %116, %117 : tensor<128x128xf32, #mfma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, i64, i64
    }
    %61 = tt.expand_dims %60#1 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xf32, #mfma>
    %62 = tt.broadcast %61 : (tensor<128x1xf32, #mfma>) -> tensor<128x128xf32, #mfma>
    %63 = arith.divf %60#0, %62 : tensor<128x128xf32, #mfma>
    %64 = arith.muli %1, %arg20 : i32
    %65 = tt.addptr %arg4, %64 : !tt.ptr<f32, 1>, i32
    %66 = tt.splat %65 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>, #blocked2>
    %67 = tt.addptr %66, %19 : tensor<128x!tt.ptr<f32, 1>, #blocked2>, tensor<128xi32, #blocked2>
    %68 = tt.extern_elementwise %60#1 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_log2f"} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %69 = arith.addf %60#2, %68 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %70 = triton_gpu.convert_layout %69 : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128xf32, #blocked2>
    tt.store %67, %70 {cache = 1 : i32, evict = 1 : i32} : tensor<128xf32, #blocked2>
    %71 = tt.addptr %arg5, %2 : !tt.ptr<f16, 1>, i32
    %72 = arith.extsi %arg17 : i32 to i64
    %73 = arith.truncf %63 : tensor<128x128xf32, #mfma> to tensor<128x128xf16, #mfma>
    %74 = tt.splat %72 : (i64) -> tensor<128x1xi64, #mfma>
    %75 = arith.muli %32, %74 : tensor<128x1xi64, #mfma>
    %76 = tt.splat %71 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #mfma>
    %77 = tt.addptr %76, %75 : tensor<128x1x!tt.ptr<f16, 1>, #mfma>, tensor<128x1xi64, #mfma>
    %78 = tt.broadcast %77 : (tensor<128x1x!tt.ptr<f16, 1>, #mfma>) -> tensor<128x128x!tt.ptr<f16, 1>, #mfma>
    %79 = tt.addptr %78, %42 : tensor<128x128x!tt.ptr<f16, 1>, #mfma>, tensor<128x128xi64, #mfma>
    tt.store %79, %73 {cache = 1 : i32, evict = 1 : i32} : tensor<128x128xf16, #mfma>
    tt.return
  }
}
