; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define amdgpu_kernel void @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture readonly %1, ptr addrspace(1) nocapture readonly %2, float %3, ptr addrspace(1) nocapture readnone %4, ptr addrspace(1) nocapture writeonly %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19, i32 %20) local_unnamed_addr #0 !dbg !9 {
  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !12
  %23 = and i32 %22, 63, !dbg !12
  %24 = lshr i32 %22, 6, !dbg !12
  %25 = and i32 %24, 3, !dbg !12
  %26 = lshr i32 %23, 3, !dbg !12
  %27 = shl nuw nsw i32 %25, 3, !dbg !12
  %28 = or i32 %27, %26, !dbg !12
  %29 = or i32 %28, 32, !dbg !12
  %30 = shl i32 %22, 3, !dbg !12
  %31 = and i32 %30, 56, !dbg !12
  %32 = or i32 %31, 2, !dbg !12
  %33 = or i32 %31, 4, !dbg !12
  %34 = or i32 %31, 6, !dbg !12
  %35 = shl nuw nsw i32 %25, 4, !dbg !13
  %36 = lshr i32 %23, 4, !dbg !13
  %37 = shl nuw nsw i32 %36, 2, !dbg !13
  %38 = and i32 %22, 15, !dbg !13
  %39 = or i32 %35, %38, !dbg !13
  %40 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !16
  %41 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !17
  %42 = mul i32 %41, %7, !dbg !18
  %43 = sext i32 %42 to i64, !dbg !19
  %44 = getelementptr half, ptr addrspace(1) %0, i64 %43, !dbg !19
  %45 = shl i32 %40, 7, !dbg !20
  %46 = sext i32 %8 to i64, !dbg !21
  %47 = sext i32 %45 to i64, !dbg !21
  %48 = getelementptr half, ptr addrspace(1) %2, i64 %43, !dbg !22
  %49 = sext i32 %14 to i64, !dbg !23
  %50 = getelementptr half, ptr addrspace(1) %1, i64 %43, !dbg !24
  %51 = sext i32 %11 to i64, !dbg !25
  %52 = fmul float %3, 0x3FF7154760000000, !dbg !26
  %53 = zext i32 %28 to i64
  %54 = zext i32 %29 to i64
  %55 = zext i32 %31 to i64
  %56 = zext i32 %32 to i64
  %57 = zext i32 %33 to i64
  %58 = zext i32 %34 to i64
  %59 = or i64 %53, %47, !dbg !12
  %60 = or i64 %54, %47, !dbg !12
  %61 = mul nsw i64 %59, %46, !dbg !12
  %62 = mul nsw i64 %60, %46, !dbg !12
  %63 = getelementptr half, ptr addrspace(1) %44, i64 %61, !dbg !12
  %64 = getelementptr half, ptr addrspace(1) %44, i64 %62, !dbg !12
  %65 = getelementptr half, ptr addrspace(1) %63, i64 %55, !dbg !12
  %66 = getelementptr half, ptr addrspace(1) %63, i64 %56, !dbg !12
  %67 = getelementptr half, ptr addrspace(1) %63, i64 %57, !dbg !12
  %68 = getelementptr half, ptr addrspace(1) %63, i64 %58, !dbg !12
  %69 = getelementptr half, ptr addrspace(1) %64, i64 %55, !dbg !12
  %70 = getelementptr half, ptr addrspace(1) %64, i64 %56, !dbg !12
  %71 = getelementptr half, ptr addrspace(1) %64, i64 %57, !dbg !12
  %72 = getelementptr half, ptr addrspace(1) %64, i64 %58, !dbg !12
  %73 = addrspacecast ptr addrspace(1) %65 to ptr, !dbg !12
  %74 = load <2 x half>, ptr %73, align 4, !dbg !12
  %75 = addrspacecast ptr addrspace(1) %66 to ptr, !dbg !12
  %76 = load half, ptr %75, align 4, !dbg !12
  %77 = getelementptr inbounds <2 x half>, ptr %75, i64 0, i64 1, !dbg !12
  %78 = load half, ptr %77, align 2, !dbg !12
  %79 = addrspacecast ptr addrspace(1) %67 to ptr, !dbg !12
  %80 = load <2 x half>, ptr %79, align 4, !dbg !12
  %81 = addrspacecast ptr addrspace(1) %68 to ptr, !dbg !12
  %82 = load half, ptr %81, align 4, !dbg !12
  %83 = getelementptr inbounds <2 x half>, ptr %81, i64 0, i64 1, !dbg !12
  %84 = load half, ptr %83, align 2, !dbg !12
  %85 = addrspacecast ptr addrspace(1) %69 to ptr, !dbg !12
  %86 = load <2 x half>, ptr %85, align 4, !dbg !12
  %87 = addrspacecast ptr addrspace(1) %70 to ptr, !dbg !12
  %88 = load half, ptr %87, align 4, !dbg !12
  %89 = getelementptr inbounds <2 x half>, ptr %87, i64 0, i64 1, !dbg !12
  %90 = load half, ptr %89, align 2, !dbg !12
  %91 = addrspacecast ptr addrspace(1) %71 to ptr, !dbg !12
  %92 = load <2 x half>, ptr %91, align 4, !dbg !12
  %93 = addrspacecast ptr addrspace(1) %72 to ptr, !dbg !12
  %94 = load half, ptr %93, align 4, !dbg !12
  %95 = getelementptr inbounds <2 x half>, ptr %93, i64 0, i64 1, !dbg !12
  %96 = load half, ptr %95, align 2, !dbg !12
  %97 = or i64 %47, 64, !dbg !27
  %98 = or i64 %97, %53, !dbg !28
  %99 = or i64 %97, %54, !dbg !28
  %100 = mul nsw i64 %98, %46, !dbg !28
  %101 = mul nsw i64 %99, %46, !dbg !28
  %102 = getelementptr half, ptr addrspace(1) %44, i64 %100, !dbg !28
  %103 = getelementptr half, ptr addrspace(1) %44, i64 %101, !dbg !28
  %104 = getelementptr half, ptr addrspace(1) %102, i64 %55, !dbg !28
  %105 = getelementptr half, ptr addrspace(1) %102, i64 %56, !dbg !28
  %106 = getelementptr half, ptr addrspace(1) %102, i64 %57, !dbg !28
  %107 = getelementptr half, ptr addrspace(1) %102, i64 %58, !dbg !28
  %108 = getelementptr half, ptr addrspace(1) %103, i64 %55, !dbg !28
  %109 = getelementptr half, ptr addrspace(1) %103, i64 %56, !dbg !28
  %110 = getelementptr half, ptr addrspace(1) %103, i64 %57, !dbg !28
  %111 = getelementptr half, ptr addrspace(1) %103, i64 %58, !dbg !28
  %112 = addrspacecast ptr addrspace(1) %104 to ptr, !dbg !28
  %113 = load <2 x half>, ptr %112, align 4, !dbg !28
  %114 = addrspacecast ptr addrspace(1) %105 to ptr, !dbg !28
  %115 = load half, ptr %114, align 4, !dbg !28
  %116 = getelementptr inbounds <2 x half>, ptr %114, i64 0, i64 1, !dbg !28
  %117 = load half, ptr %116, align 2, !dbg !28
  %118 = addrspacecast ptr addrspace(1) %106 to ptr, !dbg !28
  %119 = load <2 x half>, ptr %118, align 4, !dbg !28
  %120 = addrspacecast ptr addrspace(1) %107 to ptr, !dbg !28
  %121 = load half, ptr %120, align 4, !dbg !28
  %122 = getelementptr inbounds <2 x half>, ptr %120, i64 0, i64 1, !dbg !28
  %123 = load half, ptr %122, align 2, !dbg !28
  %124 = addrspacecast ptr addrspace(1) %108 to ptr, !dbg !28
  %125 = load <2 x half>, ptr %124, align 4, !dbg !28
  %126 = addrspacecast ptr addrspace(1) %109 to ptr, !dbg !28
  %127 = load half, ptr %126, align 4, !dbg !28
  %128 = getelementptr inbounds <2 x half>, ptr %126, i64 0, i64 1, !dbg !28
  %129 = load half, ptr %128, align 2, !dbg !28
  %130 = addrspacecast ptr addrspace(1) %110 to ptr, !dbg !28
  %131 = load <2 x half>, ptr %130, align 4, !dbg !28
  %132 = addrspacecast ptr addrspace(1) %111 to ptr, !dbg !28
  %133 = load half, ptr %132, align 4, !dbg !28
  %134 = getelementptr inbounds <2 x half>, ptr %132, i64 0, i64 1, !dbg !28
  %135 = load half, ptr %134, align 2, !dbg !28
  %136 = shufflevector <2 x half> %74, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !29
  %137 = insertelement <4 x half> %136, half %76, i64 2, !dbg !29
  %138 = insertelement <4 x half> %137, half %78, i64 3, !dbg !29
  %139 = fpext <4 x half> %138 to <4 x float>, !dbg !29
  %140 = insertelement <4 x float> poison, float %52, i64 0, !dbg !29
  %141 = shufflevector <4 x float> %140, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !29
  %142 = fmul <4 x float> %141, %139, !dbg !29
  %143 = fptrunc <4 x float> %142 to <4 x half>, !dbg !30
  %144 = shufflevector <2 x half> %80, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !29
  %145 = insertelement <4 x half> %144, half %82, i64 2, !dbg !29
  %146 = insertelement <4 x half> %145, half %84, i64 3, !dbg !29
  %147 = fpext <4 x half> %146 to <4 x float>, !dbg !29
  %148 = fmul <4 x float> %141, %147, !dbg !29
  %149 = fptrunc <4 x float> %148 to <4 x half>, !dbg !30
  %150 = shufflevector <2 x half> %86, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !29
  %151 = insertelement <4 x half> %150, half %88, i64 2, !dbg !29
  %152 = insertelement <4 x half> %151, half %90, i64 3, !dbg !29
  %153 = fpext <4 x half> %152 to <4 x float>, !dbg !29
  %154 = fmul <4 x float> %141, %153, !dbg !29
  %155 = fptrunc <4 x float> %154 to <4 x half>, !dbg !30
  %156 = shufflevector <2 x half> %92, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !29
  %157 = insertelement <4 x half> %156, half %94, i64 2, !dbg !29
  %158 = insertelement <4 x half> %157, half %96, i64 3, !dbg !29
  %159 = fpext <4 x half> %158 to <4 x float>, !dbg !29
  %160 = fmul <4 x float> %141, %159, !dbg !29
  %161 = fptrunc <4 x float> %160 to <4 x half>, !dbg !30
  %162 = shl nuw nsw i32 %28, 6, !dbg !30
  %163 = shl nuw nsw i32 %28, 2, !dbg !30
  %164 = and i32 %163, 60, !dbg !30
  %165 = xor i32 %164, %31, !dbg !30
  %166 = or i32 %165, %162, !dbg !30
  %167 = zext i32 %166 to i64, !dbg !30
  %168 = getelementptr half, ptr addrspace(3) @global_smem, i64 %167, !dbg !30
  %169 = xor i32 %164, %33, !dbg !30
  %170 = or i32 %169, %162, !dbg !30
  %171 = zext i32 %170 to i64, !dbg !30
  %172 = getelementptr half, ptr addrspace(3) @global_smem, i64 %171, !dbg !30
  %173 = getelementptr half, ptr addrspace(3) %168, i64 2048, !dbg !30
  %174 = getelementptr half, ptr addrspace(3) %172, i64 2048, !dbg !30
  store <4 x half> %143, ptr addrspace(3) %168, align 8, !dbg !30
  store <4 x half> %149, ptr addrspace(3) %172, align 8, !dbg !30
  store <4 x half> %155, ptr addrspace(3) %173, align 8, !dbg !30
  store <4 x half> %161, ptr addrspace(3) %174, align 8, !dbg !30
  fence syncscope("workgroup") release, !dbg !30
  tail call void @llvm.amdgcn.s.barrier(), !dbg !30
  fence syncscope("workgroup") acquire, !dbg !30
  %175 = or i32 %37, 16, !dbg !30
  %176 = or i32 %37, 32, !dbg !30
  %177 = or i32 %37, 48, !dbg !30
  %178 = xor i32 %36, %38, !dbg !30
  %179 = shl nuw nsw i32 %178, 2, !dbg !30
  %180 = shl nuw nsw i32 %39, 6, !dbg !30
  %181 = or i32 %180, %179, !dbg !30
  %182 = shl nuw nsw i32 %38, 2, !dbg !30
  %183 = xor i32 %175, %182, !dbg !30
  %184 = or i32 %180, %183, !dbg !30
  %185 = xor i32 %176, %182, !dbg !30
  %186 = or i32 %180, %185, !dbg !30
  %187 = xor i32 %177, %182, !dbg !30
  %188 = or i32 %180, %187, !dbg !30
  %189 = zext i32 %181 to i64, !dbg !30
  %190 = getelementptr half, ptr addrspace(3) @global_smem, i64 %189, !dbg !30
  %191 = load <4 x half>, ptr addrspace(3) %190, align 8, !dbg !30
  %192 = zext i32 %184 to i64, !dbg !30
  %193 = getelementptr half, ptr addrspace(3) @global_smem, i64 %192, !dbg !30
  %194 = load <4 x half>, ptr addrspace(3) %193, align 8, !dbg !30
  %195 = zext i32 %186 to i64, !dbg !30
  %196 = getelementptr half, ptr addrspace(3) @global_smem, i64 %195, !dbg !30
  %197 = load <4 x half>, ptr addrspace(3) %196, align 8, !dbg !30
  %198 = zext i32 %188 to i64, !dbg !30
  %199 = getelementptr half, ptr addrspace(3) @global_smem, i64 %198, !dbg !30
  %200 = load <4 x half>, ptr addrspace(3) %199, align 8, !dbg !30
  %201 = shufflevector <2 x half> %113, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !31
  %202 = insertelement <4 x half> %201, half %115, i64 2, !dbg !31
  %203 = insertelement <4 x half> %202, half %117, i64 3, !dbg !31
  %204 = fpext <4 x half> %203 to <4 x float>, !dbg !31
  %205 = fmul <4 x float> %141, %204, !dbg !31
  %206 = fptrunc <4 x float> %205 to <4 x half>, !dbg !32
  %207 = shufflevector <2 x half> %119, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !31
  %208 = insertelement <4 x half> %207, half %121, i64 2, !dbg !31
  %209 = insertelement <4 x half> %208, half %123, i64 3, !dbg !31
  %210 = fpext <4 x half> %209 to <4 x float>, !dbg !31
  %211 = fmul <4 x float> %141, %210, !dbg !31
  %212 = fptrunc <4 x float> %211 to <4 x half>, !dbg !32
  %213 = shufflevector <2 x half> %125, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !31
  %214 = insertelement <4 x half> %213, half %127, i64 2, !dbg !31
  %215 = insertelement <4 x half> %214, half %129, i64 3, !dbg !31
  %216 = fpext <4 x half> %215 to <4 x float>, !dbg !31
  %217 = fmul <4 x float> %141, %216, !dbg !31
  %218 = fptrunc <4 x float> %217 to <4 x half>, !dbg !32
  %219 = shufflevector <2 x half> %131, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !31
  %220 = insertelement <4 x half> %219, half %133, i64 2, !dbg !31
  %221 = insertelement <4 x half> %220, half %135, i64 3, !dbg !31
  %222 = fpext <4 x half> %221 to <4 x float>, !dbg !31
  %223 = fmul <4 x float> %141, %222, !dbg !31
  %224 = fptrunc <4 x float> %223 to <4 x half>, !dbg !32
  fence syncscope("workgroup") release, !dbg !32
  tail call void @llvm.amdgcn.s.barrier(), !dbg !32
  fence syncscope("workgroup") acquire, !dbg !32
  store <4 x half> %206, ptr addrspace(3) %168, align 8, !dbg !32
  store <4 x half> %212, ptr addrspace(3) %172, align 8, !dbg !32
  store <4 x half> %218, ptr addrspace(3) %173, align 8, !dbg !32
  store <4 x half> %224, ptr addrspace(3) %174, align 8, !dbg !32
  fence syncscope("workgroup") release, !dbg !32
  tail call void @llvm.amdgcn.s.barrier(), !dbg !32
  fence syncscope("workgroup") acquire, !dbg !32
  %225 = load <4 x half>, ptr addrspace(3) %190, align 8, !dbg !32
  %226 = load <4 x half>, ptr addrspace(3) %193, align 8, !dbg !32
  %227 = load <4 x half>, ptr addrspace(3) %196, align 8, !dbg !32
  %228 = load <4 x half>, ptr addrspace(3) %199, align 8, !dbg !32
  %229 = getelementptr half, ptr addrspace(1) %50, i64 %55, !dbg !33
  %230 = getelementptr half, ptr addrspace(1) %50, i64 %56, !dbg !33
  %231 = getelementptr half, ptr addrspace(1) %50, i64 %57, !dbg !33
  %232 = getelementptr half, ptr addrspace(1) %50, i64 %58, !dbg !33
  %233 = icmp sgt i32 %20, 0, !dbg !34
  br i1 %233, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !34

.._crit_edge_crit_edge:                           ; preds = %21
  %.pre = or i32 %37, 1, !dbg !35
  %.pre41 = or i32 %37, 2, !dbg !35
  %.pre43 = or i32 %37, 3, !dbg !35
  %.pre45 = or i32 %37, 17, !dbg !35
  %.pre47 = or i32 %37, 18, !dbg !35
  %.pre49 = or i32 %37, 19, !dbg !35
  %.pre51 = or i32 %37, 33, !dbg !35
  %.pre53 = or i32 %37, 34, !dbg !35
  %.pre55 = or i32 %37, 35, !dbg !35
  %.pre57 = or i32 %37, 49, !dbg !35
  %.pre59 = or i32 %37, 50, !dbg !35
  %.pre61 = or i32 %37, 51, !dbg !35
  br label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %21
  %234 = shl nuw nsw i32 %25, 2, !dbg !13
  %235 = or i32 %234, %36, !dbg !13
  %236 = or i32 %38, 16
  %237 = or i32 %38, 32
  %238 = or i32 %38, 48
  %239 = shl nuw nsw i32 %38, 6
  %240 = or i32 %179, %239
  %241 = or i32 %183, %239
  %242 = or i32 %185, %239
  %243 = or i32 %187, %239
  %244 = shl nuw nsw i32 %236, 6
  %245 = or i32 %179, %244
  %246 = or i32 %183, %244
  %247 = or i32 %185, %244
  %248 = or i32 %187, %244
  %249 = shl nuw nsw i32 %237, 6
  %250 = or i32 %179, %249
  %251 = or i32 %183, %249
  %252 = or i32 %185, %249
  %253 = or i32 %187, %249
  %254 = shl nuw nsw i32 %238, 6
  %255 = or i32 %179, %254
  %256 = or i32 %183, %254
  %257 = or i32 %185, %254
  %258 = or i32 %187, %254
  %259 = zext i32 %240 to i64
  %260 = getelementptr half, ptr addrspace(3) @global_smem, i64 %259
  %261 = zext i32 %241 to i64
  %262 = getelementptr half, ptr addrspace(3) @global_smem, i64 %261
  %263 = zext i32 %242 to i64
  %264 = getelementptr half, ptr addrspace(3) @global_smem, i64 %263
  %265 = zext i32 %243 to i64
  %266 = getelementptr half, ptr addrspace(3) @global_smem, i64 %265
  %267 = zext i32 %245 to i64
  %268 = getelementptr half, ptr addrspace(3) @global_smem, i64 %267
  %269 = zext i32 %246 to i64
  %270 = getelementptr half, ptr addrspace(3) @global_smem, i64 %269
  %271 = zext i32 %247 to i64
  %272 = getelementptr half, ptr addrspace(3) @global_smem, i64 %271
  %273 = zext i32 %248 to i64
  %274 = getelementptr half, ptr addrspace(3) @global_smem, i64 %273
  %275 = zext i32 %250 to i64
  %276 = getelementptr half, ptr addrspace(3) @global_smem, i64 %275
  %277 = zext i32 %251 to i64
  %278 = getelementptr half, ptr addrspace(3) @global_smem, i64 %277
  %279 = zext i32 %252 to i64
  %280 = getelementptr half, ptr addrspace(3) @global_smem, i64 %279
  %281 = zext i32 %253 to i64
  %282 = getelementptr half, ptr addrspace(3) @global_smem, i64 %281
  %283 = zext i32 %255 to i64
  %284 = getelementptr half, ptr addrspace(3) @global_smem, i64 %283
  %285 = zext i32 %256 to i64
  %286 = getelementptr half, ptr addrspace(3) @global_smem, i64 %285
  %287 = zext i32 %257 to i64
  %288 = getelementptr half, ptr addrspace(3) @global_smem, i64 %287
  %289 = zext i32 %258 to i64
  %290 = getelementptr half, ptr addrspace(3) @global_smem, i64 %289
  %291 = shl i32 %22, 2
  %292 = add i32 %291, 128
  %293 = or i32 %162, %31
  %294 = zext i32 %293 to i64
  %295 = getelementptr half, ptr addrspace(3) @global_smem, i64 %294
  %296 = getelementptr half, ptr addrspace(3) %295, i64 1
  %297 = getelementptr half, ptr addrspace(3) %295, i64 2
  %298 = getelementptr half, ptr addrspace(3) %295, i64 3
  %299 = getelementptr half, ptr addrspace(3) %295, i64 4
  %300 = getelementptr half, ptr addrspace(3) %295, i64 5
  %301 = getelementptr half, ptr addrspace(3) %295, i64 6
  %302 = getelementptr half, ptr addrspace(3) %295, i64 7
  %303 = getelementptr half, ptr addrspace(3) %295, i64 2048
  %304 = getelementptr half, ptr addrspace(3) %295, i64 2049
  %305 = getelementptr half, ptr addrspace(3) %295, i64 2050
  %306 = getelementptr half, ptr addrspace(3) %295, i64 2051
  %307 = getelementptr half, ptr addrspace(3) %295, i64 2052
  %308 = getelementptr half, ptr addrspace(3) %295, i64 2053
  %309 = getelementptr half, ptr addrspace(3) %295, i64 2054
  %310 = getelementptr half, ptr addrspace(3) %295, i64 2055
  %311 = or i32 %37, 1
  %312 = or i32 %37, 2
  %313 = or i32 %37, 3
  %314 = shl nuw nsw i32 %36, 8
  %315 = or i32 %314, %38
  %316 = shl nuw nsw i32 %311, 6
  %317 = or i32 %316, %38
  %318 = shl nuw nsw i32 %312, 6
  %319 = or i32 %318, %38
  %320 = shl nuw nsw i32 %313, 6
  %321 = or i32 %320, %38
  %322 = shl nuw nsw i32 %175, 6
  %323 = or i32 %322, %38
  %324 = or i32 %314, 1088
  %325 = or i32 %324, %38
  %326 = or i32 %314, 1152
  %327 = or i32 %326, %38
  %328 = or i32 %314, 1216
  %329 = or i32 %328, %38
  %330 = shl nuw nsw i32 %176, 6
  %331 = or i32 %330, %38
  %332 = or i32 %314, 2112
  %333 = or i32 %332, %38
  %334 = or i32 %314, 2176
  %335 = or i32 %334, %38
  %336 = or i32 %314, 2240
  %337 = or i32 %336, %38
  %338 = shl nuw nsw i32 %177, 6
  %339 = or i32 %338, %38
  %340 = or i32 %314, 3136
  %341 = or i32 %340, %38
  %342 = or i32 %314, 3200
  %343 = or i32 %342, %38
  %344 = or i32 %314, 3264
  %345 = or i32 %344, %38
  %346 = or i32 %314, %236
  %347 = or i32 %316, %236
  %348 = or i32 %318, %236
  %349 = or i32 %320, %236
  %350 = or i32 %322, %236
  %351 = or i32 %324, %236
  %352 = or i32 %326, %236
  %353 = or i32 %328, %236
  %354 = or i32 %330, %236
  %355 = or i32 %332, %236
  %356 = or i32 %334, %236
  %357 = or i32 %336, %236
  %358 = or i32 %338, %236
  %359 = or i32 %340, %236
  %360 = or i32 %342, %236
  %361 = or i32 %344, %236
  %362 = or i32 %314, %237
  %363 = or i32 %316, %237
  %364 = or i32 %318, %237
  %365 = or i32 %320, %237
  %366 = or i32 %322, %237
  %367 = or i32 %324, %237
  %368 = or i32 %326, %237
  %369 = or i32 %328, %237
  %370 = or i32 %330, %237
  %371 = or i32 %332, %237
  %372 = or i32 %334, %237
  %373 = or i32 %336, %237
  %374 = or i32 %338, %237
  %375 = or i32 %340, %237
  %376 = or i32 %342, %237
  %377 = or i32 %344, %237
  %378 = or i32 %314, %238
  %379 = or i32 %316, %238
  %380 = or i32 %318, %238
  %381 = or i32 %320, %238
  %382 = or i32 %322, %238
  %383 = or i32 %324, %238
  %384 = or i32 %326, %238
  %385 = or i32 %328, %238
  %386 = or i32 %330, %238
  %387 = or i32 %332, %238
  %388 = or i32 %334, %238
  %389 = or i32 %336, %238
  %390 = or i32 %338, %238
  %391 = or i32 %340, %238
  %392 = or i32 %342, %238
  %393 = or i32 %344, %238
  %394 = zext i32 %315 to i64
  %395 = getelementptr half, ptr addrspace(3) @global_smem, i64 %394
  %396 = zext i32 %317 to i64
  %397 = getelementptr half, ptr addrspace(3) @global_smem, i64 %396
  %398 = zext i32 %319 to i64
  %399 = getelementptr half, ptr addrspace(3) @global_smem, i64 %398
  %400 = zext i32 %321 to i64
  %401 = getelementptr half, ptr addrspace(3) @global_smem, i64 %400
  %402 = zext i32 %323 to i64
  %403 = getelementptr half, ptr addrspace(3) @global_smem, i64 %402
  %404 = zext i32 %325 to i64
  %405 = getelementptr half, ptr addrspace(3) @global_smem, i64 %404
  %406 = zext i32 %327 to i64
  %407 = getelementptr half, ptr addrspace(3) @global_smem, i64 %406
  %408 = zext i32 %329 to i64
  %409 = getelementptr half, ptr addrspace(3) @global_smem, i64 %408
  %410 = zext i32 %331 to i64
  %411 = getelementptr half, ptr addrspace(3) @global_smem, i64 %410
  %412 = zext i32 %333 to i64
  %413 = getelementptr half, ptr addrspace(3) @global_smem, i64 %412
  %414 = zext i32 %335 to i64
  %415 = getelementptr half, ptr addrspace(3) @global_smem, i64 %414
  %416 = zext i32 %337 to i64
  %417 = getelementptr half, ptr addrspace(3) @global_smem, i64 %416
  %418 = zext i32 %339 to i64
  %419 = getelementptr half, ptr addrspace(3) @global_smem, i64 %418
  %420 = zext i32 %341 to i64
  %421 = getelementptr half, ptr addrspace(3) @global_smem, i64 %420
  %422 = zext i32 %343 to i64
  %423 = getelementptr half, ptr addrspace(3) @global_smem, i64 %422
  %424 = zext i32 %345 to i64
  %425 = getelementptr half, ptr addrspace(3) @global_smem, i64 %424
  %426 = zext i32 %346 to i64
  %427 = getelementptr half, ptr addrspace(3) @global_smem, i64 %426
  %428 = zext i32 %347 to i64
  %429 = getelementptr half, ptr addrspace(3) @global_smem, i64 %428
  %430 = zext i32 %348 to i64
  %431 = getelementptr half, ptr addrspace(3) @global_smem, i64 %430
  %432 = zext i32 %349 to i64
  %433 = getelementptr half, ptr addrspace(3) @global_smem, i64 %432
  %434 = zext i32 %350 to i64
  %435 = getelementptr half, ptr addrspace(3) @global_smem, i64 %434
  %436 = zext i32 %351 to i64
  %437 = getelementptr half, ptr addrspace(3) @global_smem, i64 %436
  %438 = zext i32 %352 to i64
  %439 = getelementptr half, ptr addrspace(3) @global_smem, i64 %438
  %440 = zext i32 %353 to i64
  %441 = getelementptr half, ptr addrspace(3) @global_smem, i64 %440
  %442 = zext i32 %354 to i64
  %443 = getelementptr half, ptr addrspace(3) @global_smem, i64 %442
  %444 = zext i32 %355 to i64
  %445 = getelementptr half, ptr addrspace(3) @global_smem, i64 %444
  %446 = zext i32 %356 to i64
  %447 = getelementptr half, ptr addrspace(3) @global_smem, i64 %446
  %448 = zext i32 %357 to i64
  %449 = getelementptr half, ptr addrspace(3) @global_smem, i64 %448
  %450 = zext i32 %358 to i64
  %451 = getelementptr half, ptr addrspace(3) @global_smem, i64 %450
  %452 = zext i32 %359 to i64
  %453 = getelementptr half, ptr addrspace(3) @global_smem, i64 %452
  %454 = zext i32 %360 to i64
  %455 = getelementptr half, ptr addrspace(3) @global_smem, i64 %454
  %456 = zext i32 %361 to i64
  %457 = getelementptr half, ptr addrspace(3) @global_smem, i64 %456
  %458 = zext i32 %362 to i64
  %459 = getelementptr half, ptr addrspace(3) @global_smem, i64 %458
  %460 = zext i32 %363 to i64
  %461 = getelementptr half, ptr addrspace(3) @global_smem, i64 %460
  %462 = zext i32 %364 to i64
  %463 = getelementptr half, ptr addrspace(3) @global_smem, i64 %462
  %464 = zext i32 %365 to i64
  %465 = getelementptr half, ptr addrspace(3) @global_smem, i64 %464
  %466 = zext i32 %366 to i64
  %467 = getelementptr half, ptr addrspace(3) @global_smem, i64 %466
  %468 = zext i32 %367 to i64
  %469 = getelementptr half, ptr addrspace(3) @global_smem, i64 %468
  %470 = zext i32 %368 to i64
  %471 = getelementptr half, ptr addrspace(3) @global_smem, i64 %470
  %472 = zext i32 %369 to i64
  %473 = getelementptr half, ptr addrspace(3) @global_smem, i64 %472
  %474 = zext i32 %370 to i64
  %475 = getelementptr half, ptr addrspace(3) @global_smem, i64 %474
  %476 = zext i32 %371 to i64
  %477 = getelementptr half, ptr addrspace(3) @global_smem, i64 %476
  %478 = zext i32 %372 to i64
  %479 = getelementptr half, ptr addrspace(3) @global_smem, i64 %478
  %480 = zext i32 %373 to i64
  %481 = getelementptr half, ptr addrspace(3) @global_smem, i64 %480
  %482 = zext i32 %374 to i64
  %483 = getelementptr half, ptr addrspace(3) @global_smem, i64 %482
  %484 = zext i32 %375 to i64
  %485 = getelementptr half, ptr addrspace(3) @global_smem, i64 %484
  %486 = zext i32 %376 to i64
  %487 = getelementptr half, ptr addrspace(3) @global_smem, i64 %486
  %488 = zext i32 %377 to i64
  %489 = getelementptr half, ptr addrspace(3) @global_smem, i64 %488
  %490 = zext i32 %378 to i64
  %491 = getelementptr half, ptr addrspace(3) @global_smem, i64 %490
  %492 = zext i32 %379 to i64
  %493 = getelementptr half, ptr addrspace(3) @global_smem, i64 %492
  %494 = zext i32 %380 to i64
  %495 = getelementptr half, ptr addrspace(3) @global_smem, i64 %494
  %496 = zext i32 %381 to i64
  %497 = getelementptr half, ptr addrspace(3) @global_smem, i64 %496
  %498 = zext i32 %382 to i64
  %499 = getelementptr half, ptr addrspace(3) @global_smem, i64 %498
  %500 = zext i32 %383 to i64
  %501 = getelementptr half, ptr addrspace(3) @global_smem, i64 %500
  %502 = zext i32 %384 to i64
  %503 = getelementptr half, ptr addrspace(3) @global_smem, i64 %502
  %504 = zext i32 %385 to i64
  %505 = getelementptr half, ptr addrspace(3) @global_smem, i64 %504
  %506 = zext i32 %386 to i64
  %507 = getelementptr half, ptr addrspace(3) @global_smem, i64 %506
  %508 = zext i32 %387 to i64
  %509 = getelementptr half, ptr addrspace(3) @global_smem, i64 %508
  %510 = zext i32 %388 to i64
  %511 = getelementptr half, ptr addrspace(3) @global_smem, i64 %510
  %512 = zext i32 %389 to i64
  %513 = getelementptr half, ptr addrspace(3) @global_smem, i64 %512
  %514 = zext i32 %390 to i64
  %515 = getelementptr half, ptr addrspace(3) @global_smem, i64 %514
  %516 = zext i32 %391 to i64
  %517 = getelementptr half, ptr addrspace(3) @global_smem, i64 %516
  %518 = zext i32 %392 to i64
  %519 = getelementptr half, ptr addrspace(3) @global_smem, i64 %518
  %520 = zext i32 %393 to i64
  %521 = getelementptr half, ptr addrspace(3) @global_smem, i64 %520
  %522 = mul nuw nsw i32 %39, 68
  %523 = add nuw nsw i32 %522, %37
  %524 = zext i32 %523 to i64
  %525 = getelementptr half, ptr addrspace(3) @global_smem, i64 %524
  %526 = add nuw nsw i32 %522, %311
  %527 = zext i32 %526 to i64
  %528 = getelementptr half, ptr addrspace(3) @global_smem, i64 %527
  %529 = add nuw nsw i32 %522, %312
  %530 = zext i32 %529 to i64
  %531 = getelementptr half, ptr addrspace(3) @global_smem, i64 %530
  %532 = add nuw nsw i32 %522, %313
  %533 = zext i32 %532 to i64
  %534 = getelementptr half, ptr addrspace(3) @global_smem, i64 %533
  %535 = add nuw nsw i32 %522, %175
  %536 = zext i32 %535 to i64
  %537 = getelementptr half, ptr addrspace(3) @global_smem, i64 %536
  %538 = or i32 %37, 17
  %539 = add nuw nsw i32 %538, %522
  %540 = zext i32 %539 to i64
  %541 = getelementptr half, ptr addrspace(3) @global_smem, i64 %540
  %542 = or i32 %37, 18
  %543 = add nuw nsw i32 %542, %522
  %544 = zext i32 %543 to i64
  %545 = getelementptr half, ptr addrspace(3) @global_smem, i64 %544
  %546 = or i32 %37, 19
  %547 = add nuw nsw i32 %546, %522
  %548 = zext i32 %547 to i64
  %549 = getelementptr half, ptr addrspace(3) @global_smem, i64 %548
  %550 = add nuw nsw i32 %522, %176
  %551 = zext i32 %550 to i64
  %552 = getelementptr half, ptr addrspace(3) @global_smem, i64 %551
  %553 = or i32 %37, 33
  %554 = add nuw nsw i32 %553, %522
  %555 = zext i32 %554 to i64
  %556 = getelementptr half, ptr addrspace(3) @global_smem, i64 %555
  %557 = or i32 %37, 34
  %558 = add nuw nsw i32 %557, %522
  %559 = zext i32 %558 to i64
  %560 = getelementptr half, ptr addrspace(3) @global_smem, i64 %559
  %561 = or i32 %37, 35
  %562 = add nuw nsw i32 %561, %522
  %563 = zext i32 %562 to i64
  %564 = getelementptr half, ptr addrspace(3) @global_smem, i64 %563
  %565 = add nuw nsw i32 %522, %177
  %566 = zext i32 %565 to i64
  %567 = getelementptr half, ptr addrspace(3) @global_smem, i64 %566
  %568 = or i32 %37, 49
  %569 = add nuw nsw i32 %568, %522
  %570 = zext i32 %569 to i64
  %571 = getelementptr half, ptr addrspace(3) @global_smem, i64 %570
  %572 = or i32 %37, 50
  %573 = add nuw nsw i32 %572, %522
  %574 = zext i32 %573 to i64
  %575 = getelementptr half, ptr addrspace(3) @global_smem, i64 %574
  %576 = or i32 %37, 51
  %577 = add nuw nsw i32 %576, %522
  %578 = zext i32 %577 to i64
  %579 = getelementptr half, ptr addrspace(3) @global_smem, i64 %578
  %580 = mul nuw nsw i32 %235, 68
  %581 = add nuw nsw i32 %580, %182
  %582 = zext i32 %581 to i64
  %583 = getelementptr half, ptr addrspace(3) @global_smem, i64 %582
  %584 = or i32 %182, 1088
  %585 = add nuw nsw i32 %584, %580
  %586 = zext i32 %585 to i64
  %587 = getelementptr half, ptr addrspace(3) @global_smem, i64 %586
  %588 = or i32 %182, 2176
  %589 = add nuw nsw i32 %588, %580
  %590 = zext i32 %589 to i64
  %591 = getelementptr half, ptr addrspace(3) @global_smem, i64 %590
  %592 = or i32 %182, 3264
  %593 = add nuw nsw i32 %592, %580
  %594 = zext i32 %593 to i64
  %595 = getelementptr half, ptr addrspace(3) @global_smem, i64 %594
  %596 = shl nuw nsw i32 %235, 6
  %597 = xor i32 %235, %38
  %598 = shl nuw nsw i32 %597, 2
  %599 = or i32 %598, %596
  %600 = zext i32 %599 to i64
  %601 = getelementptr half, ptr addrspace(3) @global_smem, i64 %600
  %602 = getelementptr half, ptr addrspace(3) %601, i64 1024
  %603 = getelementptr half, ptr addrspace(3) %601, i64 2048
  %604 = getelementptr half, ptr addrspace(3) %601, i64 3072
  br label %605, !dbg !34

605:                                              ; preds = %.lr.ph, %605
  %606 = phi i64 [ 0, %.lr.ph ], [ %1321, %605 ]
  %607 = phi i32 [ 0, %.lr.ph ], [ %1322, %605 ]
  %608 = phi <2 x float> [ <float 1.000000e+00, float 1.000000e+00>, %.lr.ph ], [ %1320, %605 ]
  %609 = phi <2 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000>, %.lr.ph ], [ %1112, %605 ]
  %610 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %1140, %605 ]
  %611 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %1136, %605 ]
  %612 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %1132, %605 ]
  %613 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %1128, %605 ]
  %614 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %1319, %605 ]
  %615 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %1315, %605 ]
  %616 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %1311, %605 ]
  %617 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %1307, %605 ]
  %618 = or i64 %606, %53, !dbg !33
  %619 = or i64 %606, %54, !dbg !33
  %620 = mul i64 %618, %51, !dbg !33
  %621 = mul i64 %619, %51, !dbg !33
  %622 = getelementptr half, ptr addrspace(1) %229, i64 %620, !dbg !33
  %623 = getelementptr half, ptr addrspace(1) %230, i64 %620, !dbg !33
  %624 = getelementptr half, ptr addrspace(1) %231, i64 %620, !dbg !33
  %625 = getelementptr half, ptr addrspace(1) %232, i64 %620, !dbg !33
  %626 = getelementptr half, ptr addrspace(1) %229, i64 %621, !dbg !33
  %627 = getelementptr half, ptr addrspace(1) %230, i64 %621, !dbg !33
  %628 = getelementptr half, ptr addrspace(1) %231, i64 %621, !dbg !33
  %629 = getelementptr half, ptr addrspace(1) %232, i64 %621, !dbg !33
  %630 = addrspacecast ptr addrspace(1) %622 to ptr, !dbg !33
  %631 = load <2 x half>, ptr %630, align 4, !dbg !33
  %632 = addrspacecast ptr addrspace(1) %623 to ptr, !dbg !33
  %633 = load <2 x half>, ptr %632, align 4, !dbg !33
  %634 = addrspacecast ptr addrspace(1) %624 to ptr, !dbg !33
  %635 = load <2 x half>, ptr %634, align 4, !dbg !33
  %636 = addrspacecast ptr addrspace(1) %625 to ptr, !dbg !33
  %637 = load <2 x half>, ptr %636, align 4, !dbg !33
  %638 = addrspacecast ptr addrspace(1) %626 to ptr, !dbg !33
  %639 = load <2 x half>, ptr %638, align 4, !dbg !33
  %640 = addrspacecast ptr addrspace(1) %627 to ptr, !dbg !33
  %641 = load <2 x half>, ptr %640, align 4, !dbg !33
  %642 = addrspacecast ptr addrspace(1) %628 to ptr, !dbg !33
  %643 = load <2 x half>, ptr %642, align 4, !dbg !33
  %644 = addrspacecast ptr addrspace(1) %629 to ptr, !dbg !33
  %645 = load <2 x half>, ptr %644, align 4, !dbg !33
  fence syncscope("workgroup") release, !dbg !33
  tail call void @llvm.amdgcn.s.barrier(), !dbg !33
  fence syncscope("workgroup") acquire, !dbg !33
  %646 = shufflevector <2 x half> %631, <2 x half> %633, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !33
  store <4 x half> %646, ptr addrspace(3) %168, align 8, !dbg !33
  %647 = shufflevector <2 x half> %635, <2 x half> %637, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !33
  store <4 x half> %647, ptr addrspace(3) %172, align 8, !dbg !33
  %648 = shufflevector <2 x half> %639, <2 x half> %641, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !33
  store <4 x half> %648, ptr addrspace(3) %173, align 8, !dbg !33
  %649 = shufflevector <2 x half> %643, <2 x half> %645, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !33
  store <4 x half> %649, ptr addrspace(3) %174, align 8, !dbg !33
  fence syncscope("workgroup") release, !dbg !33
  tail call void @llvm.amdgcn.s.barrier(), !dbg !33
  fence syncscope("workgroup") acquire, !dbg !33
  %650 = load <4 x half>, ptr addrspace(3) %260, align 8, !dbg !33
  %651 = load <4 x half>, ptr addrspace(3) %262, align 8, !dbg !33
  %652 = load <4 x half>, ptr addrspace(3) %264, align 8, !dbg !33
  %653 = load <4 x half>, ptr addrspace(3) %266, align 8, !dbg !33
  %654 = load <4 x half>, ptr addrspace(3) %268, align 8, !dbg !33
  %655 = load <4 x half>, ptr addrspace(3) %270, align 8, !dbg !33
  %656 = load <4 x half>, ptr addrspace(3) %272, align 8, !dbg !33
  %657 = load <4 x half>, ptr addrspace(3) %274, align 8, !dbg !33
  %658 = load <4 x half>, ptr addrspace(3) %276, align 8, !dbg !33
  %659 = load <4 x half>, ptr addrspace(3) %278, align 8, !dbg !33
  %660 = load <4 x half>, ptr addrspace(3) %280, align 8, !dbg !33
  %661 = load <4 x half>, ptr addrspace(3) %282, align 8, !dbg !33
  %662 = load <4 x half>, ptr addrspace(3) %284, align 8, !dbg !33
  %663 = load <4 x half>, ptr addrspace(3) %286, align 8, !dbg !33
  %664 = load <4 x half>, ptr addrspace(3) %288, align 8, !dbg !33
  %665 = load <4 x half>, ptr addrspace(3) %290, align 8, !dbg !33
  %666 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %650, <4 x half> %191, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !36
  %667 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %651, <4 x half> %194, <4 x float> %666, i32 0, i32 0, i32 0), !dbg !36
  %668 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %652, <4 x half> %197, <4 x float> %667, i32 0, i32 0, i32 0), !dbg !36
  %669 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %653, <4 x half> %200, <4 x float> %668, i32 0, i32 0, i32 0), !dbg !36
  %670 = extractelement <4 x float> %669, i64 0, !dbg !36
  %671 = extractelement <4 x float> %669, i64 1, !dbg !36
  %672 = extractelement <4 x float> %669, i64 2, !dbg !36
  %673 = extractelement <4 x float> %669, i64 3, !dbg !36
  %674 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %654, <4 x half> %191, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !36
  %675 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %655, <4 x half> %194, <4 x float> %674, i32 0, i32 0, i32 0), !dbg !36
  %676 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %656, <4 x half> %197, <4 x float> %675, i32 0, i32 0, i32 0), !dbg !36
  %677 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %657, <4 x half> %200, <4 x float> %676, i32 0, i32 0, i32 0), !dbg !36
  %678 = extractelement <4 x float> %677, i64 0, !dbg !36
  %679 = extractelement <4 x float> %677, i64 1, !dbg !36
  %680 = extractelement <4 x float> %677, i64 2, !dbg !36
  %681 = extractelement <4 x float> %677, i64 3, !dbg !36
  %682 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %658, <4 x half> %191, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !36
  %683 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %659, <4 x half> %194, <4 x float> %682, i32 0, i32 0, i32 0), !dbg !36
  %684 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %660, <4 x half> %197, <4 x float> %683, i32 0, i32 0, i32 0), !dbg !36
  %685 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %661, <4 x half> %200, <4 x float> %684, i32 0, i32 0, i32 0), !dbg !36
  %686 = extractelement <4 x float> %685, i64 0, !dbg !36
  %687 = extractelement <4 x float> %685, i64 1, !dbg !36
  %688 = extractelement <4 x float> %685, i64 2, !dbg !36
  %689 = extractelement <4 x float> %685, i64 3, !dbg !36
  %690 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %662, <4 x half> %191, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !36
  %691 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %663, <4 x half> %194, <4 x float> %690, i32 0, i32 0, i32 0), !dbg !36
  %692 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %664, <4 x half> %197, <4 x float> %691, i32 0, i32 0, i32 0), !dbg !36
  %693 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %665, <4 x half> %200, <4 x float> %692, i32 0, i32 0, i32 0), !dbg !36
  %694 = extractelement <4 x float> %693, i64 0, !dbg !36
  %695 = extractelement <4 x float> %693, i64 1, !dbg !36
  %696 = extractelement <4 x float> %693, i64 2, !dbg !36
  %697 = extractelement <4 x float> %693, i64 3, !dbg !36
  %698 = tail call float @llvm.maxnum.f32(float %670, float %671), !dbg !38
  %699 = tail call float @llvm.maxnum.f32(float %698, float %672), !dbg !38
  %700 = tail call float @llvm.maxnum.f32(float %699, float %673), !dbg !38
  %701 = tail call float @llvm.maxnum.f32(float %700, float %678), !dbg !38
  %702 = tail call float @llvm.maxnum.f32(float %701, float %679), !dbg !38
  %703 = tail call float @llvm.maxnum.f32(float %702, float %680), !dbg !38
  %704 = tail call float @llvm.maxnum.f32(float %703, float %681), !dbg !38
  %705 = tail call float @llvm.maxnum.f32(float %704, float %686), !dbg !38
  %706 = tail call float @llvm.maxnum.f32(float %705, float %687), !dbg !38
  %707 = tail call float @llvm.maxnum.f32(float %706, float %688), !dbg !38
  %708 = tail call float @llvm.maxnum.f32(float %707, float %689), !dbg !38
  %709 = tail call float @llvm.maxnum.f32(float %708, float %694), !dbg !38
  %710 = tail call float @llvm.maxnum.f32(float %709, float %695), !dbg !38
  %711 = tail call float @llvm.maxnum.f32(float %710, float %696), !dbg !38
  %712 = tail call float @llvm.maxnum.f32(float %711, float %697), !dbg !38
  %713 = tail call float asm sideeffect "ds_swizzle_b32 $0, $1, offset:16415\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %712) #5, !dbg !45
  %714 = tail call float @llvm.maxnum.f32(float %712, float %713), !dbg !38
  %715 = tail call float asm sideeffect "ds_permute_b32 $0, $1, $2\0A\09s_waitcnt lgkmcnt(0) ", "=v,v,v"(i32 %292, float %714) #5, !dbg !45
  %716 = tail call float @llvm.maxnum.f32(float %714, float %715), !dbg !38
  %717 = mul i64 %618, %49, !dbg !48
  %718 = mul i64 %619, %49, !dbg !48
  %719 = getelementptr half, ptr addrspace(1) %48, i64 %717, !dbg !48
  %720 = getelementptr half, ptr addrspace(1) %48, i64 %718, !dbg !48
  %721 = getelementptr half, ptr addrspace(1) %719, i64 %55, !dbg !48
  %722 = getelementptr half, ptr addrspace(1) %719, i64 %56, !dbg !48
  %723 = getelementptr half, ptr addrspace(1) %719, i64 %57, !dbg !48
  %724 = getelementptr half, ptr addrspace(1) %719, i64 %58, !dbg !48
  %725 = getelementptr half, ptr addrspace(1) %720, i64 %55, !dbg !48
  %726 = getelementptr half, ptr addrspace(1) %720, i64 %56, !dbg !48
  %727 = getelementptr half, ptr addrspace(1) %720, i64 %57, !dbg !48
  %728 = getelementptr half, ptr addrspace(1) %720, i64 %58, !dbg !48
  %729 = addrspacecast ptr addrspace(1) %721 to ptr, !dbg !48
  %730 = load <2 x half>, ptr %729, align 4, !dbg !48
  %731 = addrspacecast ptr addrspace(1) %722 to ptr, !dbg !48
  %732 = load <2 x half>, ptr %731, align 4, !dbg !48
  %733 = addrspacecast ptr addrspace(1) %723 to ptr, !dbg !48
  %734 = load <2 x half>, ptr %733, align 4, !dbg !48
  %735 = addrspacecast ptr addrspace(1) %724 to ptr, !dbg !48
  %736 = load <2 x half>, ptr %735, align 4, !dbg !48
  %737 = addrspacecast ptr addrspace(1) %725 to ptr, !dbg !48
  %738 = load <2 x half>, ptr %737, align 4, !dbg !48
  %739 = addrspacecast ptr addrspace(1) %726 to ptr, !dbg !48
  %740 = load <2 x half>, ptr %739, align 4, !dbg !48
  %741 = addrspacecast ptr addrspace(1) %727 to ptr, !dbg !48
  %742 = load <2 x half>, ptr %741, align 4, !dbg !48
  %743 = addrspacecast ptr addrspace(1) %728 to ptr, !dbg !48
  %744 = load <2 x half>, ptr %743, align 4, !dbg !48
  fence syncscope("workgroup") release, !dbg !48
  tail call void @llvm.amdgcn.s.barrier(), !dbg !48
  fence syncscope("workgroup") acquire, !dbg !48
  %745 = shufflevector <2 x half> %730, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !48
  store <1 x half> %745, ptr addrspace(3) %295, align 2, !dbg !48
  %746 = shufflevector <2 x half> %730, <2 x half> undef, <1 x i32> <i32 1>, !dbg !48
  store <1 x half> %746, ptr addrspace(3) %296, align 2, !dbg !48
  %747 = shufflevector <2 x half> %732, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !48
  store <1 x half> %747, ptr addrspace(3) %297, align 2, !dbg !48
  %748 = shufflevector <2 x half> %732, <2 x half> undef, <1 x i32> <i32 1>, !dbg !48
  store <1 x half> %748, ptr addrspace(3) %298, align 2, !dbg !48
  %749 = shufflevector <2 x half> %734, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !48
  store <1 x half> %749, ptr addrspace(3) %299, align 2, !dbg !48
  %750 = shufflevector <2 x half> %734, <2 x half> undef, <1 x i32> <i32 1>, !dbg !48
  store <1 x half> %750, ptr addrspace(3) %300, align 2, !dbg !48
  %751 = shufflevector <2 x half> %736, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !48
  store <1 x half> %751, ptr addrspace(3) %301, align 2, !dbg !48
  %752 = shufflevector <2 x half> %736, <2 x half> undef, <1 x i32> <i32 1>, !dbg !48
  store <1 x half> %752, ptr addrspace(3) %302, align 2, !dbg !48
  %753 = shufflevector <2 x half> %738, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !48
  store <1 x half> %753, ptr addrspace(3) %303, align 2, !dbg !48
  %754 = shufflevector <2 x half> %738, <2 x half> undef, <1 x i32> <i32 1>, !dbg !48
  store <1 x half> %754, ptr addrspace(3) %304, align 2, !dbg !48
  %755 = shufflevector <2 x half> %740, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !48
  store <1 x half> %755, ptr addrspace(3) %305, align 2, !dbg !48
  %756 = shufflevector <2 x half> %740, <2 x half> undef, <1 x i32> <i32 1>, !dbg !48
  store <1 x half> %756, ptr addrspace(3) %306, align 2, !dbg !48
  %757 = shufflevector <2 x half> %742, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !48
  store <1 x half> %757, ptr addrspace(3) %307, align 2, !dbg !48
  %758 = shufflevector <2 x half> %742, <2 x half> undef, <1 x i32> <i32 1>, !dbg !48
  store <1 x half> %758, ptr addrspace(3) %308, align 2, !dbg !48
  %759 = shufflevector <2 x half> %744, <2 x half> undef, <1 x i32> zeroinitializer, !dbg !48
  store <1 x half> %759, ptr addrspace(3) %309, align 2, !dbg !48
  %760 = shufflevector <2 x half> %744, <2 x half> undef, <1 x i32> <i32 1>, !dbg !48
  store <1 x half> %760, ptr addrspace(3) %310, align 2, !dbg !48
  fence syncscope("workgroup") release, !dbg !48
  tail call void @llvm.amdgcn.s.barrier(), !dbg !48
  fence syncscope("workgroup") acquire, !dbg !48
  %761 = load <1 x half>, ptr addrspace(3) %395, align 2, !dbg !48
  %762 = load <1 x half>, ptr addrspace(3) %397, align 2, !dbg !48
  %763 = shufflevector <1 x half> %761, <1 x half> %762, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %764 = load <1 x half>, ptr addrspace(3) %399, align 2, !dbg !48
  %765 = shufflevector <1 x half> %764, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %766 = shufflevector <4 x half> %763, <4 x half> %765, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %767 = load <1 x half>, ptr addrspace(3) %401, align 2, !dbg !48
  %768 = shufflevector <1 x half> %767, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %769 = shufflevector <4 x half> %766, <4 x half> %768, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %770 = load <1 x half>, ptr addrspace(3) %403, align 2, !dbg !48
  %771 = load <1 x half>, ptr addrspace(3) %405, align 2, !dbg !48
  %772 = shufflevector <1 x half> %770, <1 x half> %771, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %773 = load <1 x half>, ptr addrspace(3) %407, align 2, !dbg !48
  %774 = shufflevector <1 x half> %773, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %775 = shufflevector <4 x half> %772, <4 x half> %774, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %776 = load <1 x half>, ptr addrspace(3) %409, align 2, !dbg !48
  %777 = shufflevector <1 x half> %776, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %778 = shufflevector <4 x half> %775, <4 x half> %777, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %779 = load <1 x half>, ptr addrspace(3) %411, align 2, !dbg !48
  %780 = load <1 x half>, ptr addrspace(3) %413, align 2, !dbg !48
  %781 = shufflevector <1 x half> %779, <1 x half> %780, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %782 = load <1 x half>, ptr addrspace(3) %415, align 2, !dbg !48
  %783 = shufflevector <1 x half> %782, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %784 = shufflevector <4 x half> %781, <4 x half> %783, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %785 = load <1 x half>, ptr addrspace(3) %417, align 2, !dbg !48
  %786 = shufflevector <1 x half> %785, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %787 = shufflevector <4 x half> %784, <4 x half> %786, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %788 = load <1 x half>, ptr addrspace(3) %419, align 2, !dbg !48
  %789 = load <1 x half>, ptr addrspace(3) %421, align 2, !dbg !48
  %790 = shufflevector <1 x half> %788, <1 x half> %789, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %791 = load <1 x half>, ptr addrspace(3) %423, align 2, !dbg !48
  %792 = shufflevector <1 x half> %791, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %793 = shufflevector <4 x half> %790, <4 x half> %792, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %794 = load <1 x half>, ptr addrspace(3) %425, align 2, !dbg !48
  %795 = shufflevector <1 x half> %794, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %796 = shufflevector <4 x half> %793, <4 x half> %795, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %797 = load <1 x half>, ptr addrspace(3) %427, align 2, !dbg !48
  %798 = load <1 x half>, ptr addrspace(3) %429, align 2, !dbg !48
  %799 = shufflevector <1 x half> %797, <1 x half> %798, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %800 = load <1 x half>, ptr addrspace(3) %431, align 2, !dbg !48
  %801 = shufflevector <1 x half> %800, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %802 = shufflevector <4 x half> %799, <4 x half> %801, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %803 = load <1 x half>, ptr addrspace(3) %433, align 2, !dbg !48
  %804 = shufflevector <1 x half> %803, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %805 = shufflevector <4 x half> %802, <4 x half> %804, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %806 = load <1 x half>, ptr addrspace(3) %435, align 2, !dbg !48
  %807 = load <1 x half>, ptr addrspace(3) %437, align 2, !dbg !48
  %808 = shufflevector <1 x half> %806, <1 x half> %807, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %809 = load <1 x half>, ptr addrspace(3) %439, align 2, !dbg !48
  %810 = shufflevector <1 x half> %809, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %811 = shufflevector <4 x half> %808, <4 x half> %810, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %812 = load <1 x half>, ptr addrspace(3) %441, align 2, !dbg !48
  %813 = shufflevector <1 x half> %812, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %814 = shufflevector <4 x half> %811, <4 x half> %813, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %815 = load <1 x half>, ptr addrspace(3) %443, align 2, !dbg !48
  %816 = load <1 x half>, ptr addrspace(3) %445, align 2, !dbg !48
  %817 = shufflevector <1 x half> %815, <1 x half> %816, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %818 = load <1 x half>, ptr addrspace(3) %447, align 2, !dbg !48
  %819 = shufflevector <1 x half> %818, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %820 = shufflevector <4 x half> %817, <4 x half> %819, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %821 = load <1 x half>, ptr addrspace(3) %449, align 2, !dbg !48
  %822 = shufflevector <1 x half> %821, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %823 = shufflevector <4 x half> %820, <4 x half> %822, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %824 = load <1 x half>, ptr addrspace(3) %451, align 2, !dbg !48
  %825 = load <1 x half>, ptr addrspace(3) %453, align 2, !dbg !48
  %826 = shufflevector <1 x half> %824, <1 x half> %825, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %827 = load <1 x half>, ptr addrspace(3) %455, align 2, !dbg !48
  %828 = shufflevector <1 x half> %827, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %829 = shufflevector <4 x half> %826, <4 x half> %828, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %830 = load <1 x half>, ptr addrspace(3) %457, align 2, !dbg !48
  %831 = shufflevector <1 x half> %830, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %832 = shufflevector <4 x half> %829, <4 x half> %831, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %833 = load <1 x half>, ptr addrspace(3) %459, align 2, !dbg !48
  %834 = load <1 x half>, ptr addrspace(3) %461, align 2, !dbg !48
  %835 = shufflevector <1 x half> %833, <1 x half> %834, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %836 = load <1 x half>, ptr addrspace(3) %463, align 2, !dbg !48
  %837 = shufflevector <1 x half> %836, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %838 = shufflevector <4 x half> %835, <4 x half> %837, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %839 = load <1 x half>, ptr addrspace(3) %465, align 2, !dbg !48
  %840 = shufflevector <1 x half> %839, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %841 = shufflevector <4 x half> %838, <4 x half> %840, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %842 = load <1 x half>, ptr addrspace(3) %467, align 2, !dbg !48
  %843 = load <1 x half>, ptr addrspace(3) %469, align 2, !dbg !48
  %844 = shufflevector <1 x half> %842, <1 x half> %843, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %845 = load <1 x half>, ptr addrspace(3) %471, align 2, !dbg !48
  %846 = shufflevector <1 x half> %845, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %847 = shufflevector <4 x half> %844, <4 x half> %846, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %848 = load <1 x half>, ptr addrspace(3) %473, align 2, !dbg !48
  %849 = shufflevector <1 x half> %848, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %850 = shufflevector <4 x half> %847, <4 x half> %849, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %851 = load <1 x half>, ptr addrspace(3) %475, align 2, !dbg !48
  %852 = load <1 x half>, ptr addrspace(3) %477, align 2, !dbg !48
  %853 = shufflevector <1 x half> %851, <1 x half> %852, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %854 = load <1 x half>, ptr addrspace(3) %479, align 2, !dbg !48
  %855 = shufflevector <1 x half> %854, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %856 = shufflevector <4 x half> %853, <4 x half> %855, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %857 = load <1 x half>, ptr addrspace(3) %481, align 2, !dbg !48
  %858 = shufflevector <1 x half> %857, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %859 = shufflevector <4 x half> %856, <4 x half> %858, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %860 = load <1 x half>, ptr addrspace(3) %483, align 2, !dbg !48
  %861 = load <1 x half>, ptr addrspace(3) %485, align 2, !dbg !48
  %862 = shufflevector <1 x half> %860, <1 x half> %861, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %863 = load <1 x half>, ptr addrspace(3) %487, align 2, !dbg !48
  %864 = shufflevector <1 x half> %863, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %865 = shufflevector <4 x half> %862, <4 x half> %864, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %866 = load <1 x half>, ptr addrspace(3) %489, align 2, !dbg !48
  %867 = shufflevector <1 x half> %866, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %868 = shufflevector <4 x half> %865, <4 x half> %867, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %869 = load <1 x half>, ptr addrspace(3) %491, align 2, !dbg !48
  %870 = load <1 x half>, ptr addrspace(3) %493, align 2, !dbg !48
  %871 = shufflevector <1 x half> %869, <1 x half> %870, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %872 = load <1 x half>, ptr addrspace(3) %495, align 2, !dbg !48
  %873 = shufflevector <1 x half> %872, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %874 = shufflevector <4 x half> %871, <4 x half> %873, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %875 = load <1 x half>, ptr addrspace(3) %497, align 2, !dbg !48
  %876 = shufflevector <1 x half> %875, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %877 = shufflevector <4 x half> %874, <4 x half> %876, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %878 = load <1 x half>, ptr addrspace(3) %499, align 2, !dbg !48
  %879 = load <1 x half>, ptr addrspace(3) %501, align 2, !dbg !48
  %880 = shufflevector <1 x half> %878, <1 x half> %879, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %881 = load <1 x half>, ptr addrspace(3) %503, align 2, !dbg !48
  %882 = shufflevector <1 x half> %881, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %883 = shufflevector <4 x half> %880, <4 x half> %882, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %884 = load <1 x half>, ptr addrspace(3) %505, align 2, !dbg !48
  %885 = shufflevector <1 x half> %884, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %886 = shufflevector <4 x half> %883, <4 x half> %885, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %887 = load <1 x half>, ptr addrspace(3) %507, align 2, !dbg !48
  %888 = load <1 x half>, ptr addrspace(3) %509, align 2, !dbg !48
  %889 = shufflevector <1 x half> %887, <1 x half> %888, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %890 = load <1 x half>, ptr addrspace(3) %511, align 2, !dbg !48
  %891 = shufflevector <1 x half> %890, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %892 = shufflevector <4 x half> %889, <4 x half> %891, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %893 = load <1 x half>, ptr addrspace(3) %513, align 2, !dbg !48
  %894 = shufflevector <1 x half> %893, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %895 = shufflevector <4 x half> %892, <4 x half> %894, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  %896 = load <1 x half>, ptr addrspace(3) %515, align 2, !dbg !48
  %897 = load <1 x half>, ptr addrspace(3) %517, align 2, !dbg !48
  %898 = shufflevector <1 x half> %896, <1 x half> %897, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !48
  %899 = load <1 x half>, ptr addrspace(3) %519, align 2, !dbg !48
  %900 = shufflevector <1 x half> %899, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %901 = shufflevector <4 x half> %898, <4 x half> %900, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !48
  %902 = load <1 x half>, ptr addrspace(3) %521, align 2, !dbg !48
  %903 = shufflevector <1 x half> %902, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %904 = shufflevector <4 x half> %901, <4 x half> %903, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !48
  fence syncscope("workgroup") release, !dbg !13
  tail call void @llvm.amdgcn.s.barrier(), !dbg !13
  fence syncscope("workgroup") acquire, !dbg !13
  %905 = extractelement <2 x float> %609, i64 0, !dbg !49
  %906 = tail call float @llvm.maxnum.f32(float %905, float %716), !dbg !49
  %907 = fsub float %670, %906, !dbg !51
  %908 = fsub float %671, %906, !dbg !51
  %909 = fsub float %672, %906, !dbg !51
  %910 = fsub float %673, %906, !dbg !51
  %911 = fsub float %678, %906, !dbg !51
  %912 = fsub float %679, %906, !dbg !51
  %913 = fcmp olt float %907, -1.260000e+02, !dbg !52
  %914 = select i1 %913, float 0x3BF0000000000000, float 1.000000e+00, !dbg !52
  %915 = select i1 %913, float 6.400000e+01, float 0.000000e+00, !dbg !52
  %916 = fadd float %907, %915, !dbg !52
  %917 = tail call float @llvm.exp2.f32(float %916), !dbg !52
  %918 = fmul float %914, %917, !dbg !52
  %919 = fcmp olt float %908, -1.260000e+02, !dbg !52
  %920 = select i1 %919, float 0x3BF0000000000000, float 1.000000e+00, !dbg !52
  %921 = select i1 %919, float 6.400000e+01, float 0.000000e+00, !dbg !52
  %922 = fadd float %908, %921, !dbg !52
  %923 = tail call float @llvm.exp2.f32(float %922), !dbg !52
  %924 = fmul float %920, %923, !dbg !52
  %925 = fcmp olt float %909, -1.260000e+02, !dbg !52
  %926 = select i1 %925, float 0x3BF0000000000000, float 1.000000e+00, !dbg !52
  %927 = select i1 %925, float 6.400000e+01, float 0.000000e+00, !dbg !52
  %928 = fadd float %909, %927, !dbg !52
  %929 = tail call float @llvm.exp2.f32(float %928), !dbg !52
  %930 = fmul float %926, %929, !dbg !52
  %931 = fcmp olt float %910, -1.260000e+02, !dbg !52
  %932 = select i1 %931, float 0x3BF0000000000000, float 1.000000e+00, !dbg !52
  %933 = select i1 %931, float 6.400000e+01, float 0.000000e+00, !dbg !52
  %934 = fadd float %910, %933, !dbg !52
  %935 = tail call float @llvm.exp2.f32(float %934), !dbg !52
  %936 = fmul float %932, %935, !dbg !52
  %937 = fcmp olt float %911, -1.260000e+02, !dbg !52
  %938 = select i1 %937, float 0x3BF0000000000000, float 1.000000e+00, !dbg !52
  %939 = select i1 %937, float 6.400000e+01, float 0.000000e+00, !dbg !52
  %940 = fadd float %911, %939, !dbg !52
  %941 = tail call float @llvm.exp2.f32(float %940), !dbg !52
  %942 = fmul float %938, %941, !dbg !52
  %943 = fcmp olt float %912, -1.260000e+02, !dbg !52
  %944 = select i1 %943, float 0x3BF0000000000000, float 1.000000e+00, !dbg !52
  %945 = select i1 %943, float 6.400000e+01, float 0.000000e+00, !dbg !52
  %946 = fadd float %912, %945, !dbg !52
  %947 = tail call float @llvm.exp2.f32(float %946), !dbg !52
  %948 = fmul float %944, %947, !dbg !52
  %949 = shufflevector <4 x float> %677, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !51
  %950 = insertelement <2 x float> poison, float %906, i64 0, !dbg !51
  %951 = shufflevector <2 x float> %950, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %952 = fsub <2 x float> %949, %951, !dbg !51
  %953 = fcmp olt <2 x float> %952, <float -1.260000e+02, float -1.260000e+02>, !dbg !52
  %954 = select <2 x i1> %953, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !52
  %955 = select <2 x i1> %953, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !52
  %956 = fadd <2 x float> %952, %955, !dbg !52
  %957 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %956), !dbg !52
  %958 = fmul <2 x float> %954, %957, !dbg !52
  %959 = shufflevector <4 x float> %685, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !51
  %960 = fsub <2 x float> %959, %951, !dbg !51
  %961 = fcmp olt <2 x float> %960, <float -1.260000e+02, float -1.260000e+02>, !dbg !52
  %962 = select <2 x i1> %961, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !52
  %963 = select <2 x i1> %961, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !52
  %964 = fadd <2 x float> %960, %963, !dbg !52
  %965 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %964), !dbg !52
  %966 = fmul <2 x float> %962, %965, !dbg !52
  %967 = shufflevector <4 x float> %685, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !51
  %968 = fsub <2 x float> %967, %951, !dbg !51
  %969 = fcmp olt <2 x float> %968, <float -1.260000e+02, float -1.260000e+02>, !dbg !52
  %970 = select <2 x i1> %969, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !52
  %971 = select <2 x i1> %969, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !52
  %972 = fadd <2 x float> %968, %971, !dbg !52
  %973 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %972), !dbg !52
  %974 = fmul <2 x float> %970, %973, !dbg !52
  %975 = shufflevector <4 x float> %693, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !51
  %976 = fsub <2 x float> %975, %951, !dbg !51
  %977 = fcmp olt <2 x float> %976, <float -1.260000e+02, float -1.260000e+02>, !dbg !52
  %978 = select <2 x i1> %977, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !52
  %979 = select <2 x i1> %977, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !52
  %980 = fadd <2 x float> %976, %979, !dbg !52
  %981 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %980), !dbg !52
  %982 = fmul <2 x float> %978, %981, !dbg !52
  %983 = shufflevector <4 x float> %693, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !51
  %984 = fsub <2 x float> %983, %951, !dbg !51
  %985 = fcmp olt <2 x float> %984, <float -1.260000e+02, float -1.260000e+02>, !dbg !52
  %986 = select <2 x i1> %985, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !52
  %987 = select <2 x i1> %985, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !52
  %988 = fadd <2 x float> %984, %987, !dbg !52
  %989 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %988), !dbg !52
  %990 = fmul <2 x float> %986, %989, !dbg !52
  %991 = fptrunc float %918 to half, !dbg !13
  %992 = fptrunc float %924 to half, !dbg !13
  %993 = fptrunc float %930 to half, !dbg !13
  %994 = fptrunc float %936 to half, !dbg !13
  %995 = fptrunc float %942 to half, !dbg !13
  %996 = fptrunc float %948 to half, !dbg !13
  %997 = extractelement <2 x float> %958, i64 0, !dbg !13
  %998 = fptrunc float %997 to half, !dbg !13
  %999 = extractelement <2 x float> %958, i64 1, !dbg !13
  %1000 = fptrunc float %999 to half, !dbg !13
  %1001 = extractelement <2 x float> %966, i64 0, !dbg !13
  %1002 = fptrunc float %1001 to half, !dbg !13
  %1003 = extractelement <2 x float> %966, i64 1, !dbg !13
  %1004 = fptrunc float %1003 to half, !dbg !13
  %1005 = extractelement <2 x float> %974, i64 0, !dbg !13
  %1006 = fptrunc float %1005 to half, !dbg !13
  %1007 = extractelement <2 x float> %974, i64 1, !dbg !13
  %1008 = fptrunc float %1007 to half, !dbg !13
  %1009 = extractelement <2 x float> %982, i64 0, !dbg !13
  %1010 = fptrunc float %1009 to half, !dbg !13
  %1011 = extractelement <2 x float> %982, i64 1, !dbg !13
  %1012 = fptrunc float %1011 to half, !dbg !13
  %1013 = extractelement <2 x float> %990, i64 0, !dbg !13
  %1014 = fptrunc float %1013 to half, !dbg !13
  %1015 = extractelement <2 x float> %990, i64 1, !dbg !13
  %1016 = fptrunc float %1015 to half, !dbg !13
  %1017 = insertelement <1 x half> undef, half %991, i64 0, !dbg !13
  store <1 x half> %1017, ptr addrspace(3) %525, align 2, !dbg !13
  %1018 = insertelement <1 x half> undef, half %992, i64 0, !dbg !13
  store <1 x half> %1018, ptr addrspace(3) %528, align 2, !dbg !13
  %1019 = insertelement <1 x half> undef, half %993, i64 0, !dbg !13
  store <1 x half> %1019, ptr addrspace(3) %531, align 2, !dbg !13
  %1020 = insertelement <1 x half> undef, half %994, i64 0, !dbg !13
  store <1 x half> %1020, ptr addrspace(3) %534, align 2, !dbg !13
  %1021 = insertelement <1 x half> undef, half %995, i64 0, !dbg !13
  store <1 x half> %1021, ptr addrspace(3) %537, align 2, !dbg !13
  %1022 = insertelement <1 x half> undef, half %996, i64 0, !dbg !13
  store <1 x half> %1022, ptr addrspace(3) %541, align 2, !dbg !13
  %1023 = insertelement <1 x half> undef, half %998, i64 0, !dbg !13
  store <1 x half> %1023, ptr addrspace(3) %545, align 2, !dbg !13
  %1024 = insertelement <1 x half> undef, half %1000, i64 0, !dbg !13
  store <1 x half> %1024, ptr addrspace(3) %549, align 2, !dbg !13
  %1025 = insertelement <1 x half> undef, half %1002, i64 0, !dbg !13
  store <1 x half> %1025, ptr addrspace(3) %552, align 2, !dbg !13
  %1026 = insertelement <1 x half> undef, half %1004, i64 0, !dbg !13
  store <1 x half> %1026, ptr addrspace(3) %556, align 2, !dbg !13
  %1027 = insertelement <1 x half> undef, half %1006, i64 0, !dbg !13
  store <1 x half> %1027, ptr addrspace(3) %560, align 2, !dbg !13
  %1028 = insertelement <1 x half> undef, half %1008, i64 0, !dbg !13
  store <1 x half> %1028, ptr addrspace(3) %564, align 2, !dbg !13
  %1029 = insertelement <1 x half> undef, half %1010, i64 0, !dbg !13
  store <1 x half> %1029, ptr addrspace(3) %567, align 2, !dbg !13
  %1030 = insertelement <1 x half> undef, half %1012, i64 0, !dbg !13
  store <1 x half> %1030, ptr addrspace(3) %571, align 2, !dbg !13
  %1031 = insertelement <1 x half> undef, half %1014, i64 0, !dbg !13
  store <1 x half> %1031, ptr addrspace(3) %575, align 2, !dbg !13
  %1032 = insertelement <1 x half> undef, half %1016, i64 0, !dbg !13
  store <1 x half> %1032, ptr addrspace(3) %579, align 2, !dbg !13
  fence syncscope("workgroup") release, !dbg !13
  tail call void @llvm.amdgcn.s.barrier(), !dbg !13
  fence syncscope("workgroup") acquire, !dbg !13
  %1033 = load <4 x half>, ptr addrspace(3) %583, align 8, !dbg !13
  %1034 = load <4 x half>, ptr addrspace(3) %587, align 8, !dbg !13
  %1035 = load <4 x half>, ptr addrspace(3) %591, align 8, !dbg !13
  %1036 = load <4 x half>, ptr addrspace(3) %595, align 8, !dbg !13
  fence syncscope("workgroup") release, !dbg !13
  tail call void @llvm.amdgcn.s.barrier(), !dbg !13
  fence syncscope("workgroup") acquire, !dbg !13
  store <4 x half> %1033, ptr addrspace(3) %601, align 8, !dbg !13
  store <4 x half> %1034, ptr addrspace(3) %602, align 8, !dbg !13
  store <4 x half> %1035, ptr addrspace(3) %603, align 8, !dbg !13
  store <4 x half> %1036, ptr addrspace(3) %604, align 8, !dbg !13
  fence syncscope("workgroup") release, !dbg !13
  tail call void @llvm.amdgcn.s.barrier(), !dbg !13
  fence syncscope("workgroup") acquire, !dbg !13
  %1037 = load <4 x half>, ptr addrspace(3) %190, align 8, !dbg !13
  %1038 = load <4 x half>, ptr addrspace(3) %193, align 8, !dbg !13
  %1039 = load <4 x half>, ptr addrspace(3) %196, align 8, !dbg !13
  %1040 = load <4 x half>, ptr addrspace(3) %199, align 8, !dbg !13
  %1041 = fadd float %918, %924, !dbg !53
  %1042 = fadd float %930, %1041, !dbg !53
  %1043 = fadd float %936, %1042, !dbg !53
  %1044 = fadd float %942, %1043, !dbg !53
  %1045 = fadd float %948, %1044, !dbg !53
  %1046 = fadd float %997, %1045, !dbg !53
  %1047 = fadd float %999, %1046, !dbg !53
  %1048 = fadd float %1001, %1047, !dbg !53
  %1049 = fadd float %1003, %1048, !dbg !53
  %1050 = fadd float %1005, %1049, !dbg !53
  %1051 = fadd float %1007, %1050, !dbg !53
  %1052 = fadd float %1009, %1051, !dbg !53
  %1053 = fadd float %1011, %1052, !dbg !53
  %1054 = fadd float %1013, %1053, !dbg !53
  %1055 = fadd float %1015, %1054, !dbg !53
  %1056 = tail call float asm sideeffect "ds_swizzle_b32 $0, $1, offset:16415\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %1055) #5, !dbg !56
  %1057 = fadd float %1055, %1056, !dbg !53
  %1058 = tail call float asm sideeffect "ds_permute_b32 $0, $1, $2\0A\09s_waitcnt lgkmcnt(0) ", "=v,v,v"(i32 %292, float %1057) #5, !dbg !56
  %1059 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %650, <4 x half> %225, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !58
  %1060 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %651, <4 x half> %226, <4 x float> %1059, i32 0, i32 0, i32 0), !dbg !58
  %1061 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %652, <4 x half> %227, <4 x float> %1060, i32 0, i32 0, i32 0), !dbg !58
  %1062 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %653, <4 x half> %228, <4 x float> %1061, i32 0, i32 0, i32 0), !dbg !58
  %1063 = extractelement <4 x float> %1062, i64 0, !dbg !58
  %1064 = extractelement <4 x float> %1062, i64 1, !dbg !58
  %1065 = extractelement <4 x float> %1062, i64 2, !dbg !58
  %1066 = extractelement <4 x float> %1062, i64 3, !dbg !58
  %1067 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %654, <4 x half> %225, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !58
  %1068 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %655, <4 x half> %226, <4 x float> %1067, i32 0, i32 0, i32 0), !dbg !58
  %1069 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %656, <4 x half> %227, <4 x float> %1068, i32 0, i32 0, i32 0), !dbg !58
  %1070 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %657, <4 x half> %228, <4 x float> %1069, i32 0, i32 0, i32 0), !dbg !58
  %1071 = extractelement <4 x float> %1070, i64 0, !dbg !58
  %1072 = extractelement <4 x float> %1070, i64 1, !dbg !58
  %1073 = extractelement <4 x float> %1070, i64 2, !dbg !58
  %1074 = extractelement <4 x float> %1070, i64 3, !dbg !58
  %1075 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %658, <4 x half> %225, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !58
  %1076 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %659, <4 x half> %226, <4 x float> %1075, i32 0, i32 0, i32 0), !dbg !58
  %1077 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %660, <4 x half> %227, <4 x float> %1076, i32 0, i32 0, i32 0), !dbg !58
  %1078 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %661, <4 x half> %228, <4 x float> %1077, i32 0, i32 0, i32 0), !dbg !58
  %1079 = extractelement <4 x float> %1078, i64 0, !dbg !58
  %1080 = extractelement <4 x float> %1078, i64 1, !dbg !58
  %1081 = extractelement <4 x float> %1078, i64 2, !dbg !58
  %1082 = extractelement <4 x float> %1078, i64 3, !dbg !58
  %1083 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %662, <4 x half> %225, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !58
  %1084 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %663, <4 x half> %226, <4 x float> %1083, i32 0, i32 0, i32 0), !dbg !58
  %1085 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %664, <4 x half> %227, <4 x float> %1084, i32 0, i32 0, i32 0), !dbg !58
  %1086 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %665, <4 x half> %228, <4 x float> %1085, i32 0, i32 0, i32 0), !dbg !58
  %1087 = extractelement <4 x float> %1086, i64 0, !dbg !58
  %1088 = extractelement <4 x float> %1086, i64 1, !dbg !58
  %1089 = extractelement <4 x float> %1086, i64 2, !dbg !58
  %1090 = extractelement <4 x float> %1086, i64 3, !dbg !58
  %1091 = tail call float @llvm.maxnum.f32(float %1063, float %1064), !dbg !59
  %1092 = tail call float @llvm.maxnum.f32(float %1091, float %1065), !dbg !59
  %1093 = tail call float @llvm.maxnum.f32(float %1092, float %1066), !dbg !59
  %1094 = tail call float @llvm.maxnum.f32(float %1093, float %1071), !dbg !59
  %1095 = tail call float @llvm.maxnum.f32(float %1094, float %1072), !dbg !59
  %1096 = tail call float @llvm.maxnum.f32(float %1095, float %1073), !dbg !59
  %1097 = tail call float @llvm.maxnum.f32(float %1096, float %1074), !dbg !59
  %1098 = tail call float @llvm.maxnum.f32(float %1097, float %1079), !dbg !59
  %1099 = tail call float @llvm.maxnum.f32(float %1098, float %1080), !dbg !59
  %1100 = tail call float @llvm.maxnum.f32(float %1099, float %1081), !dbg !59
  %1101 = tail call float @llvm.maxnum.f32(float %1100, float %1082), !dbg !59
  %1102 = tail call float @llvm.maxnum.f32(float %1101, float %1087), !dbg !59
  %1103 = tail call float @llvm.maxnum.f32(float %1102, float %1088), !dbg !59
  %1104 = tail call float @llvm.maxnum.f32(float %1103, float %1089), !dbg !59
  %1105 = tail call float @llvm.maxnum.f32(float %1104, float %1090), !dbg !59
  %1106 = tail call float asm sideeffect "ds_swizzle_b32 $0, $1, offset:16415\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %1105) #5, !dbg !62
  %1107 = tail call float @llvm.maxnum.f32(float %1105, float %1106), !dbg !59
  %1108 = tail call float asm sideeffect "ds_permute_b32 $0, $1, $2\0A\09s_waitcnt lgkmcnt(0) ", "=v,v,v"(i32 %292, float %1107) #5, !dbg !62
  %1109 = tail call float @llvm.maxnum.f32(float %1107, float %1108), !dbg !59
  %1110 = extractelement <2 x float> %609, i64 1, !dbg !64
  %1111 = tail call float @llvm.maxnum.f32(float %1110, float %1109), !dbg !64
  %1112 = insertelement <2 x float> %950, float %1111, i64 1, !dbg !66
  %1113 = fsub <2 x float> %609, %1112, !dbg !67
  %1114 = fcmp olt <2 x float> %1113, <float -1.260000e+02, float -1.260000e+02>, !dbg !68
  %1115 = select <2 x i1> %1114, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !68
  %1116 = select <2 x i1> %1114, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !68
  %1117 = fadd <2 x float> %1113, %1116, !dbg !68
  %1118 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %1117), !dbg !68
  %1119 = fmul <2 x float> %1115, %1118, !dbg !68
  %1120 = shufflevector <2 x float> %1119, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !69
  %1121 = fmul <4 x float> %613, %1120, !dbg !69
  %1122 = fmul <4 x float> %612, %1120, !dbg !69
  %1123 = fmul <4 x float> %611, %1120, !dbg !69
  %1124 = fmul <4 x float> %610, %1120, !dbg !69
  %1125 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %769, <4 x half> %1037, <4 x float> %1121, i32 0, i32 0, i32 0), !dbg !70
  %1126 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %778, <4 x half> %1038, <4 x float> %1125, i32 0, i32 0, i32 0), !dbg !70
  %1127 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %787, <4 x half> %1039, <4 x float> %1126, i32 0, i32 0, i32 0), !dbg !70
  %1128 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %796, <4 x half> %1040, <4 x float> %1127, i32 0, i32 0, i32 0), !dbg !70
  %1129 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %805, <4 x half> %1037, <4 x float> %1122, i32 0, i32 0, i32 0), !dbg !70
  %1130 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %814, <4 x half> %1038, <4 x float> %1129, i32 0, i32 0, i32 0), !dbg !70
  %1131 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %823, <4 x half> %1039, <4 x float> %1130, i32 0, i32 0, i32 0), !dbg !70
  %1132 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %832, <4 x half> %1040, <4 x float> %1131, i32 0, i32 0, i32 0), !dbg !70
  %1133 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %841, <4 x half> %1037, <4 x float> %1123, i32 0, i32 0, i32 0), !dbg !70
  %1134 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %850, <4 x half> %1038, <4 x float> %1133, i32 0, i32 0, i32 0), !dbg !70
  %1135 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %859, <4 x half> %1039, <4 x float> %1134, i32 0, i32 0, i32 0), !dbg !70
  %1136 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %868, <4 x half> %1040, <4 x float> %1135, i32 0, i32 0, i32 0), !dbg !70
  %1137 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %877, <4 x half> %1037, <4 x float> %1124, i32 0, i32 0, i32 0), !dbg !70
  %1138 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %886, <4 x half> %1038, <4 x float> %1137, i32 0, i32 0, i32 0), !dbg !70
  %1139 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %895, <4 x half> %1039, <4 x float> %1138, i32 0, i32 0, i32 0), !dbg !70
  %1140 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %904, <4 x half> %1040, <4 x float> %1139, i32 0, i32 0, i32 0), !dbg !70
  %1141 = fsub float %1063, %1111, !dbg !71
  %1142 = fsub float %1064, %1111, !dbg !71
  %1143 = fsub float %1065, %1111, !dbg !71
  %1144 = fsub float %1066, %1111, !dbg !71
  %1145 = fsub float %1071, %1111, !dbg !71
  %1146 = fsub float %1072, %1111, !dbg !71
  %1147 = fcmp olt float %1141, -1.260000e+02, !dbg !72
  %1148 = select i1 %1147, float 0x3BF0000000000000, float 1.000000e+00, !dbg !72
  %1149 = select i1 %1147, float 6.400000e+01, float 0.000000e+00, !dbg !72
  %1150 = fadd float %1141, %1149, !dbg !72
  %1151 = tail call float @llvm.exp2.f32(float %1150), !dbg !72
  %1152 = fmul float %1148, %1151, !dbg !72
  %1153 = fcmp olt float %1142, -1.260000e+02, !dbg !72
  %1154 = select i1 %1153, float 0x3BF0000000000000, float 1.000000e+00, !dbg !72
  %1155 = select i1 %1153, float 6.400000e+01, float 0.000000e+00, !dbg !72
  %1156 = fadd float %1142, %1155, !dbg !72
  %1157 = tail call float @llvm.exp2.f32(float %1156), !dbg !72
  %1158 = fmul float %1154, %1157, !dbg !72
  %1159 = fcmp olt float %1143, -1.260000e+02, !dbg !72
  %1160 = select i1 %1159, float 0x3BF0000000000000, float 1.000000e+00, !dbg !72
  %1161 = select i1 %1159, float 6.400000e+01, float 0.000000e+00, !dbg !72
  %1162 = fadd float %1143, %1161, !dbg !72
  %1163 = tail call float @llvm.exp2.f32(float %1162), !dbg !72
  %1164 = fmul float %1160, %1163, !dbg !72
  %1165 = fcmp olt float %1144, -1.260000e+02, !dbg !72
  %1166 = select i1 %1165, float 0x3BF0000000000000, float 1.000000e+00, !dbg !72
  %1167 = select i1 %1165, float 6.400000e+01, float 0.000000e+00, !dbg !72
  %1168 = fadd float %1144, %1167, !dbg !72
  %1169 = tail call float @llvm.exp2.f32(float %1168), !dbg !72
  %1170 = fmul float %1166, %1169, !dbg !72
  %1171 = fcmp olt float %1145, -1.260000e+02, !dbg !72
  %1172 = select i1 %1171, float 0x3BF0000000000000, float 1.000000e+00, !dbg !72
  %1173 = select i1 %1171, float 6.400000e+01, float 0.000000e+00, !dbg !72
  %1174 = fadd float %1145, %1173, !dbg !72
  %1175 = tail call float @llvm.exp2.f32(float %1174), !dbg !72
  %1176 = fmul float %1172, %1175, !dbg !72
  %1177 = fcmp olt float %1146, -1.260000e+02, !dbg !72
  %1178 = select i1 %1177, float 0x3BF0000000000000, float 1.000000e+00, !dbg !72
  %1179 = select i1 %1177, float 6.400000e+01, float 0.000000e+00, !dbg !72
  %1180 = fadd float %1146, %1179, !dbg !72
  %1181 = tail call float @llvm.exp2.f32(float %1180), !dbg !72
  %1182 = fmul float %1178, %1181, !dbg !72
  %1183 = shufflevector <4 x float> %1070, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !71
  %1184 = insertelement <2 x float> poison, float %1111, i64 0, !dbg !71
  %1185 = shufflevector <2 x float> %1184, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !71
  %1186 = fsub <2 x float> %1183, %1185, !dbg !71
  %1187 = fcmp olt <2 x float> %1186, <float -1.260000e+02, float -1.260000e+02>, !dbg !72
  %1188 = select <2 x i1> %1187, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !72
  %1189 = select <2 x i1> %1187, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !72
  %1190 = fadd <2 x float> %1186, %1189, !dbg !72
  %1191 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %1190), !dbg !72
  %1192 = fmul <2 x float> %1188, %1191, !dbg !72
  %1193 = shufflevector <4 x float> %1078, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !71
  %1194 = fsub <2 x float> %1193, %1185, !dbg !71
  %1195 = fcmp olt <2 x float> %1194, <float -1.260000e+02, float -1.260000e+02>, !dbg !72
  %1196 = select <2 x i1> %1195, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !72
  %1197 = select <2 x i1> %1195, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !72
  %1198 = fadd <2 x float> %1194, %1197, !dbg !72
  %1199 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %1198), !dbg !72
  %1200 = fmul <2 x float> %1196, %1199, !dbg !72
  %1201 = shufflevector <4 x float> %1078, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !71
  %1202 = fsub <2 x float> %1201, %1185, !dbg !71
  %1203 = fcmp olt <2 x float> %1202, <float -1.260000e+02, float -1.260000e+02>, !dbg !72
  %1204 = select <2 x i1> %1203, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !72
  %1205 = select <2 x i1> %1203, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !72
  %1206 = fadd <2 x float> %1202, %1205, !dbg !72
  %1207 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %1206), !dbg !72
  %1208 = fmul <2 x float> %1204, %1207, !dbg !72
  %1209 = shufflevector <4 x float> %1086, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !71
  %1210 = fsub <2 x float> %1209, %1185, !dbg !71
  %1211 = fcmp olt <2 x float> %1210, <float -1.260000e+02, float -1.260000e+02>, !dbg !72
  %1212 = select <2 x i1> %1211, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !72
  %1213 = select <2 x i1> %1211, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !72
  %1214 = fadd <2 x float> %1210, %1213, !dbg !72
  %1215 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %1214), !dbg !72
  %1216 = fmul <2 x float> %1212, %1215, !dbg !72
  %1217 = shufflevector <4 x float> %1086, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !71
  %1218 = fsub <2 x float> %1217, %1185, !dbg !71
  %1219 = fcmp olt <2 x float> %1218, <float -1.260000e+02, float -1.260000e+02>, !dbg !72
  %1220 = select <2 x i1> %1219, <2 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, !dbg !72
  %1221 = select <2 x i1> %1219, <2 x float> <float 6.400000e+01, float 6.400000e+01>, <2 x float> zeroinitializer, !dbg !72
  %1222 = fadd <2 x float> %1218, %1221, !dbg !72
  %1223 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %1222), !dbg !72
  %1224 = fmul <2 x float> %1220, %1223, !dbg !72
  %1225 = fptrunc float %1152 to half, !dbg !73
  %1226 = fptrunc float %1158 to half, !dbg !73
  %1227 = fptrunc float %1164 to half, !dbg !73
  %1228 = fptrunc float %1170 to half, !dbg !73
  %1229 = fptrunc float %1176 to half, !dbg !73
  %1230 = fptrunc float %1182 to half, !dbg !73
  %1231 = extractelement <2 x float> %1192, i64 0, !dbg !73
  %1232 = fptrunc float %1231 to half, !dbg !73
  %1233 = extractelement <2 x float> %1192, i64 1, !dbg !73
  %1234 = fptrunc float %1233 to half, !dbg !73
  %1235 = extractelement <2 x float> %1200, i64 0, !dbg !73
  %1236 = fptrunc float %1235 to half, !dbg !73
  %1237 = extractelement <2 x float> %1200, i64 1, !dbg !73
  %1238 = fptrunc float %1237 to half, !dbg !73
  %1239 = extractelement <2 x float> %1208, i64 0, !dbg !73
  %1240 = fptrunc float %1239 to half, !dbg !73
  %1241 = extractelement <2 x float> %1208, i64 1, !dbg !73
  %1242 = fptrunc float %1241 to half, !dbg !73
  %1243 = extractelement <2 x float> %1216, i64 0, !dbg !73
  %1244 = fptrunc float %1243 to half, !dbg !73
  %1245 = extractelement <2 x float> %1216, i64 1, !dbg !73
  %1246 = fptrunc float %1245 to half, !dbg !73
  %1247 = extractelement <2 x float> %1224, i64 0, !dbg !73
  %1248 = fptrunc float %1247 to half, !dbg !73
  %1249 = extractelement <2 x float> %1224, i64 1, !dbg !73
  %1250 = fptrunc float %1249 to half, !dbg !73
  fence syncscope("workgroup") release, !dbg !73
  tail call void @llvm.amdgcn.s.barrier(), !dbg !73
  fence syncscope("workgroup") acquire, !dbg !73
  %1251 = insertelement <1 x half> undef, half %1225, i64 0, !dbg !73
  store <1 x half> %1251, ptr addrspace(3) %525, align 2, !dbg !73
  %1252 = insertelement <1 x half> undef, half %1226, i64 0, !dbg !73
  store <1 x half> %1252, ptr addrspace(3) %528, align 2, !dbg !73
  %1253 = insertelement <1 x half> undef, half %1227, i64 0, !dbg !73
  store <1 x half> %1253, ptr addrspace(3) %531, align 2, !dbg !73
  %1254 = insertelement <1 x half> undef, half %1228, i64 0, !dbg !73
  store <1 x half> %1254, ptr addrspace(3) %534, align 2, !dbg !73
  %1255 = insertelement <1 x half> undef, half %1229, i64 0, !dbg !73
  store <1 x half> %1255, ptr addrspace(3) %537, align 2, !dbg !73
  %1256 = insertelement <1 x half> undef, half %1230, i64 0, !dbg !73
  store <1 x half> %1256, ptr addrspace(3) %541, align 2, !dbg !73
  %1257 = insertelement <1 x half> undef, half %1232, i64 0, !dbg !73
  store <1 x half> %1257, ptr addrspace(3) %545, align 2, !dbg !73
  %1258 = insertelement <1 x half> undef, half %1234, i64 0, !dbg !73
  store <1 x half> %1258, ptr addrspace(3) %549, align 2, !dbg !73
  %1259 = insertelement <1 x half> undef, half %1236, i64 0, !dbg !73
  store <1 x half> %1259, ptr addrspace(3) %552, align 2, !dbg !73
  %1260 = insertelement <1 x half> undef, half %1238, i64 0, !dbg !73
  store <1 x half> %1260, ptr addrspace(3) %556, align 2, !dbg !73
  %1261 = insertelement <1 x half> undef, half %1240, i64 0, !dbg !73
  store <1 x half> %1261, ptr addrspace(3) %560, align 2, !dbg !73
  %1262 = insertelement <1 x half> undef, half %1242, i64 0, !dbg !73
  store <1 x half> %1262, ptr addrspace(3) %564, align 2, !dbg !73
  %1263 = insertelement <1 x half> undef, half %1244, i64 0, !dbg !73
  store <1 x half> %1263, ptr addrspace(3) %567, align 2, !dbg !73
  %1264 = insertelement <1 x half> undef, half %1246, i64 0, !dbg !73
  store <1 x half> %1264, ptr addrspace(3) %571, align 2, !dbg !73
  %1265 = insertelement <1 x half> undef, half %1248, i64 0, !dbg !73
  store <1 x half> %1265, ptr addrspace(3) %575, align 2, !dbg !73
  %1266 = insertelement <1 x half> undef, half %1250, i64 0, !dbg !73
  store <1 x half> %1266, ptr addrspace(3) %579, align 2, !dbg !73
  fence syncscope("workgroup") release, !dbg !73
  tail call void @llvm.amdgcn.s.barrier(), !dbg !73
  fence syncscope("workgroup") acquire, !dbg !73
  %1267 = load <4 x half>, ptr addrspace(3) %583, align 8, !dbg !73
  %1268 = load <4 x half>, ptr addrspace(3) %587, align 8, !dbg !73
  %1269 = load <4 x half>, ptr addrspace(3) %591, align 8, !dbg !73
  %1270 = load <4 x half>, ptr addrspace(3) %595, align 8, !dbg !73
  fence syncscope("workgroup") release, !dbg !73
  tail call void @llvm.amdgcn.s.barrier(), !dbg !73
  fence syncscope("workgroup") acquire, !dbg !73
  store <4 x half> %1267, ptr addrspace(3) %601, align 8, !dbg !73
  store <4 x half> %1268, ptr addrspace(3) %602, align 8, !dbg !73
  store <4 x half> %1269, ptr addrspace(3) %603, align 8, !dbg !73
  store <4 x half> %1270, ptr addrspace(3) %604, align 8, !dbg !73
  fence syncscope("workgroup") release, !dbg !73
  tail call void @llvm.amdgcn.s.barrier(), !dbg !73
  fence syncscope("workgroup") acquire, !dbg !73
  %1271 = load <4 x half>, ptr addrspace(3) %190, align 8, !dbg !73
  %1272 = load <4 x half>, ptr addrspace(3) %193, align 8, !dbg !73
  %1273 = load <4 x half>, ptr addrspace(3) %196, align 8, !dbg !73
  %1274 = load <4 x half>, ptr addrspace(3) %199, align 8, !dbg !73
  %1275 = fadd float %1152, %1158, !dbg !74
  %1276 = fadd float %1164, %1275, !dbg !74
  %1277 = fadd float %1170, %1276, !dbg !74
  %1278 = fadd float %1176, %1277, !dbg !74
  %1279 = fadd float %1182, %1278, !dbg !74
  %1280 = fadd float %1231, %1279, !dbg !74
  %1281 = fadd float %1233, %1280, !dbg !74
  %1282 = fadd float %1235, %1281, !dbg !74
  %1283 = fadd float %1237, %1282, !dbg !74
  %1284 = fadd float %1239, %1283, !dbg !74
  %1285 = fadd float %1241, %1284, !dbg !74
  %1286 = fadd float %1243, %1285, !dbg !74
  %1287 = fadd float %1245, %1286, !dbg !74
  %1288 = fadd float %1247, %1287, !dbg !74
  %1289 = fadd float %1249, %1288, !dbg !74
  %1290 = tail call float asm sideeffect "ds_swizzle_b32 $0, $1, offset:16415\0A\09s_waitcnt lgkmcnt(0) ", "=v,v"(float %1289) #5, !dbg !77
  %1291 = fadd float %1289, %1290, !dbg !74
  %1292 = tail call float asm sideeffect "ds_permute_b32 $0, $1, $2\0A\09s_waitcnt lgkmcnt(0) ", "=v,v,v"(i32 %292, float %1291) #5, !dbg !77
  %1293 = insertelement <2 x float> poison, float %1057, i64 0, !dbg !74
  %1294 = insertelement <2 x float> %1293, float %1291, i64 1, !dbg !74
  %1295 = insertelement <2 x float> poison, float %1058, i64 0, !dbg !74
  %1296 = insertelement <2 x float> %1295, float %1292, i64 1, !dbg !74
  %1297 = fadd <2 x float> %1294, %1296, !dbg !53
  %1298 = fmul <2 x float> %608, %1119, !dbg !79
  %1299 = shufflevector <2 x float> %1119, <2 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>, !dbg !80
  %1300 = fmul <4 x float> %617, %1299, !dbg !80
  %1301 = fmul <4 x float> %616, %1299, !dbg !80
  %1302 = fmul <4 x float> %615, %1299, !dbg !80
  %1303 = fmul <4 x float> %614, %1299, !dbg !80
  %1304 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %769, <4 x half> %1271, <4 x float> %1300, i32 0, i32 0, i32 0), !dbg !81
  %1305 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %778, <4 x half> %1272, <4 x float> %1304, i32 0, i32 0, i32 0), !dbg !81
  %1306 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %787, <4 x half> %1273, <4 x float> %1305, i32 0, i32 0, i32 0), !dbg !81
  %1307 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %796, <4 x half> %1274, <4 x float> %1306, i32 0, i32 0, i32 0), !dbg !81
  %1308 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %805, <4 x half> %1271, <4 x float> %1301, i32 0, i32 0, i32 0), !dbg !81
  %1309 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %814, <4 x half> %1272, <4 x float> %1308, i32 0, i32 0, i32 0), !dbg !81
  %1310 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %823, <4 x half> %1273, <4 x float> %1309, i32 0, i32 0, i32 0), !dbg !81
  %1311 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %832, <4 x half> %1274, <4 x float> %1310, i32 0, i32 0, i32 0), !dbg !81
  %1312 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %841, <4 x half> %1271, <4 x float> %1302, i32 0, i32 0, i32 0), !dbg !81
  %1313 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %850, <4 x half> %1272, <4 x float> %1312, i32 0, i32 0, i32 0), !dbg !81
  %1314 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %859, <4 x half> %1273, <4 x float> %1313, i32 0, i32 0, i32 0), !dbg !81
  %1315 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %868, <4 x half> %1274, <4 x float> %1314, i32 0, i32 0, i32 0), !dbg !81
  %1316 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %877, <4 x half> %1271, <4 x float> %1303, i32 0, i32 0, i32 0), !dbg !81
  %1317 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %886, <4 x half> %1272, <4 x float> %1316, i32 0, i32 0, i32 0), !dbg !81
  %1318 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %895, <4 x half> %1273, <4 x float> %1317, i32 0, i32 0, i32 0), !dbg !81
  %1319 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %904, <4 x half> %1274, <4 x float> %1318, i32 0, i32 0, i32 0), !dbg !81
  %1320 = fadd <2 x float> %1298, %1297, !dbg !82
  %1321 = add i64 %606, 64, !dbg !83
  %1322 = add i32 %607, 64, !dbg !34
  %1323 = icmp slt i32 %1322, %20, !dbg !34
  br i1 %1323, label %605, label %._crit_edge.loopexit, !dbg !34

._crit_edge.loopexit:                             ; preds = %605
  %1324 = extractelement <4 x float> %1307, i64 3, !dbg !34
  %1325 = extractelement <4 x float> %1307, i64 2, !dbg !34
  %1326 = extractelement <4 x float> %1307, i64 1, !dbg !34
  %1327 = extractelement <4 x float> %1307, i64 0, !dbg !34
  %1328 = extractelement <4 x float> %1311, i64 3, !dbg !34
  %1329 = extractelement <4 x float> %1311, i64 2, !dbg !34
  %1330 = extractelement <4 x float> %1311, i64 1, !dbg !34
  %1331 = extractelement <4 x float> %1311, i64 0, !dbg !34
  %1332 = extractelement <4 x float> %1315, i64 3, !dbg !34
  %1333 = extractelement <4 x float> %1315, i64 2, !dbg !34
  %1334 = extractelement <4 x float> %1315, i64 1, !dbg !34
  %1335 = extractelement <4 x float> %1315, i64 0, !dbg !34
  %1336 = extractelement <4 x float> %1319, i64 3, !dbg !34
  %1337 = extractelement <4 x float> %1319, i64 2, !dbg !34
  %1338 = extractelement <4 x float> %1319, i64 1, !dbg !34
  %1339 = extractelement <4 x float> %1319, i64 0, !dbg !34
  %1340 = extractelement <4 x float> %1128, i64 3, !dbg !34
  %1341 = extractelement <4 x float> %1128, i64 2, !dbg !34
  %1342 = extractelement <4 x float> %1128, i64 1, !dbg !34
  %1343 = extractelement <4 x float> %1128, i64 0, !dbg !34
  %1344 = extractelement <4 x float> %1132, i64 3, !dbg !34
  %1345 = extractelement <4 x float> %1132, i64 2, !dbg !34
  %1346 = extractelement <4 x float> %1132, i64 1, !dbg !34
  %1347 = extractelement <4 x float> %1132, i64 0, !dbg !34
  %1348 = extractelement <4 x float> %1136, i64 3, !dbg !34
  %1349 = extractelement <4 x float> %1136, i64 2, !dbg !34
  %1350 = extractelement <4 x float> %1136, i64 1, !dbg !34
  %1351 = extractelement <4 x float> %1136, i64 0, !dbg !34
  %1352 = extractelement <4 x float> %1140, i64 3, !dbg !34
  %1353 = extractelement <4 x float> %1140, i64 2, !dbg !34
  %1354 = extractelement <4 x float> %1140, i64 1, !dbg !34
  %1355 = extractelement <4 x float> %1140, i64 0, !dbg !34
  br label %._crit_edge, !dbg !84

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi62 = phi i32 [ %.pre61, %.._crit_edge_crit_edge ], [ %576, %._crit_edge.loopexit ], !dbg !35
  %.pre-phi60 = phi i32 [ %.pre59, %.._crit_edge_crit_edge ], [ %572, %._crit_edge.loopexit ], !dbg !35
  %.pre-phi58 = phi i32 [ %.pre57, %.._crit_edge_crit_edge ], [ %568, %._crit_edge.loopexit ], !dbg !35
  %.pre-phi56 = phi i32 [ %.pre55, %.._crit_edge_crit_edge ], [ %561, %._crit_edge.loopexit ], !dbg !35
  %.pre-phi54 = phi i32 [ %.pre53, %.._crit_edge_crit_edge ], [ %557, %._crit_edge.loopexit ], !dbg !35
  %.pre-phi52 = phi i32 [ %.pre51, %.._crit_edge_crit_edge ], [ %553, %._crit_edge.loopexit ], !dbg !35
  %.pre-phi50 = phi i32 [ %.pre49, %.._crit_edge_crit_edge ], [ %546, %._crit_edge.loopexit ], !dbg !35
  %.pre-phi48 = phi i32 [ %.pre47, %.._crit_edge_crit_edge ], [ %542, %._crit_edge.loopexit ], !dbg !35
  %.pre-phi46 = phi i32 [ %.pre45, %.._crit_edge_crit_edge ], [ %538, %._crit_edge.loopexit ], !dbg !35
  %.pre-phi44 = phi i32 [ %.pre43, %.._crit_edge_crit_edge ], [ %313, %._crit_edge.loopexit ], !dbg !35
  %.pre-phi42 = phi i32 [ %.pre41, %.._crit_edge_crit_edge ], [ %312, %._crit_edge.loopexit ], !dbg !35
  %.pre-phi = phi i32 [ %.pre, %.._crit_edge_crit_edge ], [ %311, %._crit_edge.loopexit ], !dbg !35
  %1356 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1343, %._crit_edge.loopexit ]
  %1357 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1342, %._crit_edge.loopexit ]
  %1358 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1341, %._crit_edge.loopexit ]
  %1359 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1340, %._crit_edge.loopexit ]
  %1360 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1347, %._crit_edge.loopexit ]
  %1361 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1346, %._crit_edge.loopexit ]
  %1362 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1345, %._crit_edge.loopexit ]
  %1363 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1344, %._crit_edge.loopexit ]
  %1364 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1351, %._crit_edge.loopexit ]
  %1365 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1350, %._crit_edge.loopexit ]
  %1366 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1349, %._crit_edge.loopexit ]
  %1367 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1348, %._crit_edge.loopexit ]
  %1368 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1355, %._crit_edge.loopexit ]
  %1369 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1354, %._crit_edge.loopexit ]
  %1370 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1353, %._crit_edge.loopexit ]
  %1371 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1352, %._crit_edge.loopexit ]
  %1372 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1327, %._crit_edge.loopexit ]
  %1373 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1326, %._crit_edge.loopexit ]
  %1374 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1325, %._crit_edge.loopexit ]
  %1375 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1324, %._crit_edge.loopexit ]
  %1376 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1331, %._crit_edge.loopexit ]
  %1377 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1330, %._crit_edge.loopexit ]
  %1378 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1329, %._crit_edge.loopexit ]
  %1379 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1328, %._crit_edge.loopexit ]
  %1380 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1335, %._crit_edge.loopexit ]
  %1381 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1334, %._crit_edge.loopexit ]
  %1382 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1333, %._crit_edge.loopexit ]
  %1383 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1332, %._crit_edge.loopexit ]
  %1384 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1339, %._crit_edge.loopexit ]
  %1385 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1338, %._crit_edge.loopexit ]
  %1386 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1337, %._crit_edge.loopexit ]
  %1387 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1336, %._crit_edge.loopexit ]
  %1388 = phi <2 x float> [ <float 1.000000e+00, float 1.000000e+00>, %.._crit_edge_crit_edge ], [ %1320, %._crit_edge.loopexit ]
  %1389 = sext i32 %17 to i64, !dbg !84
  %1390 = getelementptr half, ptr addrspace(1) %5, i64 %43, !dbg !85
  %1391 = extractelement <2 x float> %1388, i64 0, !dbg !86
  %1392 = fdiv float %1356, %1391, !dbg !86
  %1393 = fdiv float %1357, %1391, !dbg !86
  %1394 = fdiv float %1358, %1391, !dbg !86
  %1395 = fdiv float %1359, %1391, !dbg !86
  %1396 = fdiv float %1360, %1391, !dbg !86
  %1397 = fdiv float %1361, %1391, !dbg !86
  %1398 = fdiv float %1362, %1391, !dbg !86
  %1399 = fdiv float %1363, %1391, !dbg !86
  %1400 = fdiv float %1364, %1391, !dbg !86
  %1401 = fdiv float %1365, %1391, !dbg !86
  %1402 = fdiv float %1366, %1391, !dbg !86
  %1403 = fdiv float %1367, %1391, !dbg !86
  %1404 = fdiv float %1368, %1391, !dbg !86
  %1405 = fdiv float %1369, %1391, !dbg !86
  %1406 = fdiv float %1370, %1391, !dbg !86
  %1407 = fdiv float %1371, %1391, !dbg !86
  %1408 = extractelement <2 x float> %1388, i64 1, !dbg !87
  %1409 = fdiv float %1372, %1408, !dbg !87
  %1410 = fdiv float %1373, %1408, !dbg !87
  %1411 = fdiv float %1374, %1408, !dbg !87
  %1412 = fdiv float %1375, %1408, !dbg !87
  %1413 = fdiv float %1376, %1408, !dbg !87
  %1414 = fdiv float %1377, %1408, !dbg !87
  %1415 = fdiv float %1378, %1408, !dbg !87
  %1416 = fdiv float %1379, %1408, !dbg !87
  %1417 = fdiv float %1380, %1408, !dbg !87
  %1418 = fdiv float %1381, %1408, !dbg !87
  %1419 = fdiv float %1382, %1408, !dbg !87
  %1420 = fdiv float %1383, %1408, !dbg !87
  %1421 = fdiv float %1384, %1408, !dbg !87
  %1422 = fdiv float %1385, %1408, !dbg !87
  %1423 = fdiv float %1386, %1408, !dbg !87
  %1424 = fdiv float %1387, %1408, !dbg !87
  %1425 = fptrunc float %1392 to half, !dbg !88
  %1426 = fptrunc float %1393 to half, !dbg !88
  %1427 = fptrunc float %1394 to half, !dbg !88
  %1428 = fptrunc float %1395 to half, !dbg !88
  %1429 = fptrunc float %1396 to half, !dbg !88
  %1430 = fptrunc float %1397 to half, !dbg !88
  %1431 = fptrunc float %1398 to half, !dbg !88
  %1432 = fptrunc float %1399 to half, !dbg !88
  %1433 = fptrunc float %1400 to half, !dbg !88
  %1434 = fptrunc float %1401 to half, !dbg !88
  %1435 = fptrunc float %1402 to half, !dbg !88
  %1436 = fptrunc float %1403 to half, !dbg !88
  %1437 = fptrunc float %1404 to half, !dbg !88
  %1438 = fptrunc float %1405 to half, !dbg !88
  %1439 = fptrunc float %1406 to half, !dbg !88
  %1440 = fptrunc float %1407 to half, !dbg !88
  %1441 = mul nsw i64 %59, %1389, !dbg !35
  %1442 = mul nsw i64 %60, %1389, !dbg !35
  %1443 = getelementptr half, ptr addrspace(1) %1390, i64 %1441, !dbg !35
  %1444 = getelementptr half, ptr addrspace(1) %1390, i64 %1442, !dbg !35
  %1445 = getelementptr half, ptr addrspace(1) %1443, i64 %55, !dbg !35
  %1446 = getelementptr half, ptr addrspace(1) %1443, i64 %56, !dbg !35
  %1447 = getelementptr half, ptr addrspace(1) %1443, i64 %57, !dbg !35
  %1448 = getelementptr half, ptr addrspace(1) %1443, i64 %58, !dbg !35
  %1449 = getelementptr half, ptr addrspace(1) %1444, i64 %55, !dbg !35
  %1450 = getelementptr half, ptr addrspace(1) %1444, i64 %56, !dbg !35
  %1451 = getelementptr half, ptr addrspace(1) %1444, i64 %57, !dbg !35
  %1452 = getelementptr half, ptr addrspace(1) %1444, i64 %58, !dbg !35
  fence syncscope("workgroup") release, !dbg !35
  tail call void @llvm.amdgcn.s.barrier(), !dbg !35
  fence syncscope("workgroup") acquire, !dbg !35
  %1453 = mul nuw nsw i32 %39, 72, !dbg !35
  %1454 = add nuw nsw i32 %1453, %37, !dbg !35
  %1455 = zext i32 %1454 to i64, !dbg !35
  %1456 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1455, !dbg !35
  %1457 = insertelement <1 x half> undef, half %1425, i64 0, !dbg !35
  store <1 x half> %1457, ptr addrspace(3) %1456, align 2, !dbg !35
  %1458 = add nuw nsw i32 %.pre-phi, %1453, !dbg !35
  %1459 = zext i32 %1458 to i64, !dbg !35
  %1460 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1459, !dbg !35
  %1461 = insertelement <1 x half> undef, half %1426, i64 0, !dbg !35
  store <1 x half> %1461, ptr addrspace(3) %1460, align 2, !dbg !35
  %1462 = add nuw nsw i32 %.pre-phi42, %1453, !dbg !35
  %1463 = zext i32 %1462 to i64, !dbg !35
  %1464 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1463, !dbg !35
  %1465 = insertelement <1 x half> undef, half %1427, i64 0, !dbg !35
  store <1 x half> %1465, ptr addrspace(3) %1464, align 2, !dbg !35
  %1466 = add nuw nsw i32 %.pre-phi44, %1453, !dbg !35
  %1467 = zext i32 %1466 to i64, !dbg !35
  %1468 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1467, !dbg !35
  %1469 = insertelement <1 x half> undef, half %1428, i64 0, !dbg !35
  store <1 x half> %1469, ptr addrspace(3) %1468, align 2, !dbg !35
  %1470 = add nuw nsw i32 %1453, %175, !dbg !35
  %1471 = zext i32 %1470 to i64, !dbg !35
  %1472 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1471, !dbg !35
  %1473 = insertelement <1 x half> undef, half %1429, i64 0, !dbg !35
  store <1 x half> %1473, ptr addrspace(3) %1472, align 2, !dbg !35
  %1474 = add nuw nsw i32 %.pre-phi46, %1453, !dbg !35
  %1475 = zext i32 %1474 to i64, !dbg !35
  %1476 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1475, !dbg !35
  %1477 = insertelement <1 x half> undef, half %1430, i64 0, !dbg !35
  store <1 x half> %1477, ptr addrspace(3) %1476, align 2, !dbg !35
  %1478 = add nuw nsw i32 %.pre-phi48, %1453, !dbg !35
  %1479 = zext i32 %1478 to i64, !dbg !35
  %1480 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1479, !dbg !35
  %1481 = insertelement <1 x half> undef, half %1431, i64 0, !dbg !35
  store <1 x half> %1481, ptr addrspace(3) %1480, align 2, !dbg !35
  %1482 = add nuw nsw i32 %.pre-phi50, %1453, !dbg !35
  %1483 = zext i32 %1482 to i64, !dbg !35
  %1484 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1483, !dbg !35
  %1485 = insertelement <1 x half> undef, half %1432, i64 0, !dbg !35
  store <1 x half> %1485, ptr addrspace(3) %1484, align 2, !dbg !35
  %1486 = add nuw nsw i32 %1453, %176, !dbg !35
  %1487 = zext i32 %1486 to i64, !dbg !35
  %1488 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1487, !dbg !35
  %1489 = insertelement <1 x half> undef, half %1433, i64 0, !dbg !35
  store <1 x half> %1489, ptr addrspace(3) %1488, align 2, !dbg !35
  %1490 = add nuw nsw i32 %.pre-phi52, %1453, !dbg !35
  %1491 = zext i32 %1490 to i64, !dbg !35
  %1492 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1491, !dbg !35
  %1493 = insertelement <1 x half> undef, half %1434, i64 0, !dbg !35
  store <1 x half> %1493, ptr addrspace(3) %1492, align 2, !dbg !35
  %1494 = add nuw nsw i32 %.pre-phi54, %1453, !dbg !35
  %1495 = zext i32 %1494 to i64, !dbg !35
  %1496 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1495, !dbg !35
  %1497 = insertelement <1 x half> undef, half %1435, i64 0, !dbg !35
  store <1 x half> %1497, ptr addrspace(3) %1496, align 2, !dbg !35
  %1498 = add nuw nsw i32 %.pre-phi56, %1453, !dbg !35
  %1499 = zext i32 %1498 to i64, !dbg !35
  %1500 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1499, !dbg !35
  %1501 = insertelement <1 x half> undef, half %1436, i64 0, !dbg !35
  store <1 x half> %1501, ptr addrspace(3) %1500, align 2, !dbg !35
  %1502 = add nuw nsw i32 %1453, %177, !dbg !35
  %1503 = zext i32 %1502 to i64, !dbg !35
  %1504 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1503, !dbg !35
  %1505 = insertelement <1 x half> undef, half %1437, i64 0, !dbg !35
  store <1 x half> %1505, ptr addrspace(3) %1504, align 2, !dbg !35
  %1506 = add nuw nsw i32 %.pre-phi58, %1453, !dbg !35
  %1507 = zext i32 %1506 to i64, !dbg !35
  %1508 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1507, !dbg !35
  %1509 = insertelement <1 x half> undef, half %1438, i64 0, !dbg !35
  store <1 x half> %1509, ptr addrspace(3) %1508, align 2, !dbg !35
  %1510 = add nuw nsw i32 %.pre-phi60, %1453, !dbg !35
  %1511 = zext i32 %1510 to i64, !dbg !35
  %1512 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1511, !dbg !35
  %1513 = insertelement <1 x half> undef, half %1439, i64 0, !dbg !35
  store <1 x half> %1513, ptr addrspace(3) %1512, align 2, !dbg !35
  %1514 = add nuw nsw i32 %.pre-phi62, %1453, !dbg !35
  %1515 = zext i32 %1514 to i64, !dbg !35
  %1516 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1515, !dbg !35
  %1517 = insertelement <1 x half> undef, half %1440, i64 0, !dbg !35
  store <1 x half> %1517, ptr addrspace(3) %1516, align 2, !dbg !35
  fence syncscope("workgroup") release, !dbg !35
  tail call void @llvm.amdgcn.s.barrier(), !dbg !35
  fence syncscope("workgroup") acquire, !dbg !35
  %1518 = mul nuw nsw i32 %28, 72, !dbg !35
  %1519 = add nuw nsw i32 %1518, %31, !dbg !35
  %1520 = zext i32 %1519 to i64, !dbg !35
  %1521 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1520, !dbg !35
  %1522 = load <4 x i32>, ptr addrspace(3) %1521, align 16, !dbg !35
  %1523 = mul nuw nsw i32 %29, 72, !dbg !35
  %1524 = add nuw nsw i32 %1523, %31, !dbg !35
  %1525 = zext i32 %1524 to i64, !dbg !35
  %1526 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1525, !dbg !35
  %1527 = load <4 x i32>, ptr addrspace(3) %1526, align 16, !dbg !35
  %.extract = extractelement <4 x i32> %1522, i64 0, !dbg !35
  store i32 %.extract, ptr addrspace(1) %1445, align 4, !dbg !35
  %.extract2 = extractelement <4 x i32> %1522, i64 1, !dbg !35
  store i32 %.extract2, ptr addrspace(1) %1446, align 4, !dbg !35
  %.extract4 = extractelement <4 x i32> %1522, i64 2, !dbg !35
  store i32 %.extract4, ptr addrspace(1) %1447, align 4, !dbg !35
  %.extract6 = extractelement <4 x i32> %1522, i64 3, !dbg !35
  store i32 %.extract6, ptr addrspace(1) %1448, align 4, !dbg !35
  %.extract8 = extractelement <4 x i32> %1527, i64 0, !dbg !35
  store i32 %.extract8, ptr addrspace(1) %1449, align 4, !dbg !35
  %.extract10 = extractelement <4 x i32> %1527, i64 1, !dbg !35
  store i32 %.extract10, ptr addrspace(1) %1450, align 4, !dbg !35
  %.extract12 = extractelement <4 x i32> %1527, i64 2, !dbg !35
  store i32 %.extract12, ptr addrspace(1) %1451, align 4, !dbg !35
  %.extract14 = extractelement <4 x i32> %1527, i64 3, !dbg !35
  store i32 %.extract14, ptr addrspace(1) %1452, align 4, !dbg !35
  %1528 = fptrunc float %1409 to half, !dbg !89
  %1529 = fptrunc float %1410 to half, !dbg !89
  %1530 = fptrunc float %1411 to half, !dbg !89
  %1531 = fptrunc float %1412 to half, !dbg !89
  %1532 = fptrunc float %1413 to half, !dbg !89
  %1533 = fptrunc float %1414 to half, !dbg !89
  %1534 = fptrunc float %1415 to half, !dbg !89
  %1535 = fptrunc float %1416 to half, !dbg !89
  %1536 = fptrunc float %1417 to half, !dbg !89
  %1537 = fptrunc float %1418 to half, !dbg !89
  %1538 = fptrunc float %1419 to half, !dbg !89
  %1539 = fptrunc float %1420 to half, !dbg !89
  %1540 = fptrunc float %1421 to half, !dbg !89
  %1541 = fptrunc float %1422 to half, !dbg !89
  %1542 = fptrunc float %1423 to half, !dbg !89
  %1543 = fptrunc float %1424 to half, !dbg !89
  %1544 = mul nsw i64 %98, %1389, !dbg !90
  %1545 = mul nsw i64 %99, %1389, !dbg !90
  %1546 = getelementptr half, ptr addrspace(1) %1390, i64 %1544, !dbg !90
  %1547 = getelementptr half, ptr addrspace(1) %1390, i64 %1545, !dbg !90
  %1548 = getelementptr half, ptr addrspace(1) %1546, i64 %55, !dbg !90
  %1549 = getelementptr half, ptr addrspace(1) %1546, i64 %56, !dbg !90
  %1550 = getelementptr half, ptr addrspace(1) %1546, i64 %57, !dbg !90
  %1551 = getelementptr half, ptr addrspace(1) %1546, i64 %58, !dbg !90
  %1552 = getelementptr half, ptr addrspace(1) %1547, i64 %55, !dbg !90
  %1553 = getelementptr half, ptr addrspace(1) %1547, i64 %56, !dbg !90
  %1554 = getelementptr half, ptr addrspace(1) %1547, i64 %57, !dbg !90
  %1555 = getelementptr half, ptr addrspace(1) %1547, i64 %58, !dbg !90
  fence syncscope("workgroup") release, !dbg !90
  tail call void @llvm.amdgcn.s.barrier(), !dbg !90
  fence syncscope("workgroup") acquire, !dbg !90
  %1556 = insertelement <1 x half> undef, half %1528, i64 0, !dbg !90
  store <1 x half> %1556, ptr addrspace(3) %1456, align 2, !dbg !90
  %1557 = insertelement <1 x half> undef, half %1529, i64 0, !dbg !90
  store <1 x half> %1557, ptr addrspace(3) %1460, align 2, !dbg !90
  %1558 = insertelement <1 x half> undef, half %1530, i64 0, !dbg !90
  store <1 x half> %1558, ptr addrspace(3) %1464, align 2, !dbg !90
  %1559 = insertelement <1 x half> undef, half %1531, i64 0, !dbg !90
  store <1 x half> %1559, ptr addrspace(3) %1468, align 2, !dbg !90
  %1560 = insertelement <1 x half> undef, half %1532, i64 0, !dbg !90
  store <1 x half> %1560, ptr addrspace(3) %1472, align 2, !dbg !90
  %1561 = insertelement <1 x half> undef, half %1533, i64 0, !dbg !90
  store <1 x half> %1561, ptr addrspace(3) %1476, align 2, !dbg !90
  %1562 = insertelement <1 x half> undef, half %1534, i64 0, !dbg !90
  store <1 x half> %1562, ptr addrspace(3) %1480, align 2, !dbg !90
  %1563 = insertelement <1 x half> undef, half %1535, i64 0, !dbg !90
  store <1 x half> %1563, ptr addrspace(3) %1484, align 2, !dbg !90
  %1564 = insertelement <1 x half> undef, half %1536, i64 0, !dbg !90
  store <1 x half> %1564, ptr addrspace(3) %1488, align 2, !dbg !90
  %1565 = insertelement <1 x half> undef, half %1537, i64 0, !dbg !90
  store <1 x half> %1565, ptr addrspace(3) %1492, align 2, !dbg !90
  %1566 = insertelement <1 x half> undef, half %1538, i64 0, !dbg !90
  store <1 x half> %1566, ptr addrspace(3) %1496, align 2, !dbg !90
  %1567 = insertelement <1 x half> undef, half %1539, i64 0, !dbg !90
  store <1 x half> %1567, ptr addrspace(3) %1500, align 2, !dbg !90
  %1568 = insertelement <1 x half> undef, half %1540, i64 0, !dbg !90
  store <1 x half> %1568, ptr addrspace(3) %1504, align 2, !dbg !90
  %1569 = insertelement <1 x half> undef, half %1541, i64 0, !dbg !90
  store <1 x half> %1569, ptr addrspace(3) %1508, align 2, !dbg !90
  %1570 = insertelement <1 x half> undef, half %1542, i64 0, !dbg !90
  store <1 x half> %1570, ptr addrspace(3) %1512, align 2, !dbg !90
  %1571 = insertelement <1 x half> undef, half %1543, i64 0, !dbg !90
  store <1 x half> %1571, ptr addrspace(3) %1516, align 2, !dbg !90
  fence syncscope("workgroup") release, !dbg !90
  tail call void @llvm.amdgcn.s.barrier(), !dbg !90
  fence syncscope("workgroup") acquire, !dbg !90
  %1572 = load <4 x i32>, ptr addrspace(3) %1521, align 16, !dbg !90
  %1573 = load <4 x i32>, ptr addrspace(3) %1526, align 16, !dbg !90
  %.extract16 = extractelement <4 x i32> %1572, i64 0, !dbg !90
  store i32 %.extract16, ptr addrspace(1) %1548, align 4, !dbg !90
  %.extract18 = extractelement <4 x i32> %1572, i64 1, !dbg !90
  store i32 %.extract18, ptr addrspace(1) %1549, align 4, !dbg !90
  %.extract20 = extractelement <4 x i32> %1572, i64 2, !dbg !90
  store i32 %.extract20, ptr addrspace(1) %1550, align 4, !dbg !90
  %.extract22 = extractelement <4 x i32> %1572, i64 3, !dbg !90
  store i32 %.extract22, ptr addrspace(1) %1551, align 4, !dbg !90
  %.extract24 = extractelement <4 x i32> %1573, i64 0, !dbg !90
  store i32 %.extract24, ptr addrspace(1) %1552, align 4, !dbg !90
  %.extract26 = extractelement <4 x i32> %1573, i64 1, !dbg !90
  store i32 %.extract26, ptr addrspace(1) %1553, align 4, !dbg !90
  %.extract28 = extractelement <4 x i32> %1573, i64 2, !dbg !90
  store i32 %.extract28, ptr addrspace(1) %1554, align 4, !dbg !90
  %.extract30 = extractelement <4 x i32> %1573, i64 3, !dbg !90
  store i32 %.extract30, ptr addrspace(1) %1555, align 4, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.y() #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half>, <4 x half>, <4 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.exp2.f32(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.exp2.v2f32(<2 x float>) #4

attributes #0 = { "amdgpu-flat-work-group-size"="1, 256" "amdgpu-unsafe-fp-atomics"="true" "amdgpu-waves-per-eu"="3" "denormal-fp-math-f32"="preserve-sign" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.dbg.cu = !{!3}
!nvvm.annotations = !{!5}
!opencl.ocl.version = !{}
!llvm.ident = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 0}
!3 = distinct !DICompileUnit(language: DW_LANG_C, file: !4, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!4 = !DIFile(filename: "06-fused-attention-split-seqlen.py", directory: "/triton/python/tutorials")
!5 = !{ptr @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de, !"kernel", i32 1}
!6 = !{i32 2, i32 0}
!7 = !{!"clang version 14.0.0"}
!8 = !{!"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"}
!9 = distinct !DISubprogram(name: "_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de", linkageName: "_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de", scope: !4, file: !4, line: 105, type: !10, scopeLine: 105, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !3)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DILocation(line: 176, column: 17, scope: !9)
!13 = !DILocation(line: 77, column: 31, scope: !14, inlinedAt: !15)
!14 = distinct !DILexicalBlockFile(scope: !9, file: !4, discriminator: 0)
!15 = !DILocation(line: 191, column: 19, scope: !14)
!16 = !DILocation(line: 120, column: 28, scope: !9)
!17 = !DILocation(line: 121, column: 27, scope: !9)
!18 = !DILocation(line: 122, column: 26, scope: !9)
!19 = !DILocation(line: 126, column: 17, scope: !9)
!20 = !DILocation(line: 129, column: 27, scope: !9)
!21 = !DILocation(line: 125, column: 18, scope: !9)
!22 = !DILocation(line: 134, column: 17, scope: !9)
!23 = !DILocation(line: 133, column: 18, scope: !9)
!24 = !DILocation(line: 142, column: 17, scope: !9)
!25 = !DILocation(line: 141, column: 18, scope: !9)
!26 = !DILocation(line: 173, column: 26, scope: !9)
!27 = !DILocation(line: 177, column: 42, scope: !9)
!28 = !DILocation(line: 178, column: 17, scope: !9)
!29 = !DILocation(line: 180, column: 15, scope: !9)
!30 = !DILocation(line: 180, column: 28, scope: !9)
!31 = !DILocation(line: 181, column: 15, scope: !9)
!32 = !DILocation(line: 181, column: 28, scope: !9)
!33 = !DILocation(line: 61, column: 20, scope: !14, inlinedAt: !15)
!34 = !DILocation(line: 58, column: 33, scope: !14, inlinedAt: !15)
!35 = !DILocation(line: 212, column: 26, scope: !9)
!36 = !DILocation(line: 69, scope: !9, inlinedAt: !37)
!37 = !DILocation(line: 191, column: 19, scope: !9)
!38 = !DILocation(line: 124, column: 23, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/triton/python/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !14, file: !40, discriminator: 0)
!42 = !DILocation(line: 167, column: 40, scope: !39, inlinedAt: !43)
!43 = !DILocation(line: 70, column: 48, scope: !39, inlinedAt: !44)
!44 = !DILocation(line: 191, column: 19, scope: !39)
!45 = !DILocation(line: 167, column: 40, scope: !41, inlinedAt: !46)
!46 = !DILocation(line: 70, column: 48, scope: !41, inlinedAt: !47)
!47 = !DILocation(line: 191, column: 19, scope: !41)
!48 = !DILocation(line: 76, column: 24, scope: !14, inlinedAt: !15)
!49 = !DILocation(line: 124, column: 23, scope: !41, inlinedAt: !50)
!50 = !DILocation(line: 70, column: 35, scope: !41, inlinedAt: !47)
!51 = !DILocation(line: 71, column: 22, scope: !14, inlinedAt: !15)
!52 = !DILocation(line: 72, column: 27, scope: !14, inlinedAt: !15)
!53 = !DILocation(line: 234, column: 15, scope: !39, inlinedAt: !54)
!54 = !DILocation(line: 243, column: 36, scope: !39, inlinedAt: !55)
!55 = !DILocation(line: 78, column: 29, scope: !39, inlinedAt: !44)
!56 = !DILocation(line: 243, column: 36, scope: !41, inlinedAt: !57)
!57 = !DILocation(line: 78, column: 29, scope: !41, inlinedAt: !47)
!58 = !DILocation(line: 83, scope: !9, inlinedAt: !37)
!59 = !DILocation(line: 124, column: 23, scope: !39, inlinedAt: !60)
!60 = !DILocation(line: 167, column: 40, scope: !39, inlinedAt: !61)
!61 = !DILocation(line: 84, column: 48, scope: !39, inlinedAt: !44)
!62 = !DILocation(line: 167, column: 40, scope: !41, inlinedAt: !63)
!63 = !DILocation(line: 84, column: 48, scope: !41, inlinedAt: !47)
!64 = !DILocation(line: 124, column: 23, scope: !41, inlinedAt: !65)
!65 = !DILocation(line: 84, column: 35, scope: !41, inlinedAt: !47)
!66 = !DILocation(line: 88, column: 39, scope: !14, inlinedAt: !15)
!67 = !DILocation(line: 73, column: 39, scope: !14, inlinedAt: !15)
!68 = !DILocation(line: 73, column: 31, scope: !14, inlinedAt: !15)
!69 = !DILocation(line: 74, column: 24, scope: !14, inlinedAt: !15)
!70 = !DILocation(line: 77, scope: !9, inlinedAt: !37)
!71 = !DILocation(line: 85, column: 22, scope: !14, inlinedAt: !15)
!72 = !DILocation(line: 86, column: 27, scope: !14, inlinedAt: !15)
!73 = !DILocation(line: 90, column: 31, scope: !14, inlinedAt: !15)
!74 = !DILocation(line: 234, column: 15, scope: !39, inlinedAt: !75)
!75 = !DILocation(line: 243, column: 36, scope: !39, inlinedAt: !76)
!76 = !DILocation(line: 92, column: 29, scope: !39, inlinedAt: !44)
!77 = !DILocation(line: 243, column: 36, scope: !41, inlinedAt: !78)
!78 = !DILocation(line: 92, column: 29, scope: !41, inlinedAt: !47)
!79 = !DILocation(line: 79, column: 24, scope: !14, inlinedAt: !15)
!80 = !DILocation(line: 89, column: 24, scope: !14, inlinedAt: !15)
!81 = !DILocation(line: 90, scope: !9, inlinedAt: !37)
!82 = !DILocation(line: 79, column: 34, scope: !14, inlinedAt: !15)
!83 = !DILocation(line: 98, column: 46, scope: !14, inlinedAt: !15)
!84 = !DILocation(line: 149, column: 18, scope: !9)
!85 = !DILocation(line: 150, column: 19, scope: !9)
!86 = !DILocation(line: 207, column: 20, scope: !9)
!87 = !DILocation(line: 208, column: 20, scope: !9)
!88 = !DILocation(line: 212, column: 35, scope: !9)
!89 = !DILocation(line: 214, column: 35, scope: !9)
!90 = !DILocation(line: 214, column: 26, scope: !9)
!91 = !DILocation(line: 214, column: 4, scope: !9)
