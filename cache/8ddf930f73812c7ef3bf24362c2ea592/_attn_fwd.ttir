module {
  tt.func public @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg12: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg14: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg15: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg16: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg17: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg18: i32, %arg19: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg20: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}) attributes {noinline = false} {
    %c0_i64 = arith.constant 0 : i64
    %c64_i64 = arith.constant 64 : i64
    %cst = arith.constant dense<1.000000e+00> : tensor<64xf32>
    %cst_0 = arith.constant dense<0xFF800000> : tensor<64xf32>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf32>
    %c64_i32 = arith.constant 64 : i32
    %cst_2 = arith.constant 1.44269502 : f32
    %c0_i32 = arith.constant 0 : i32
    %c128_i32 = arith.constant 128 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.muli %1, %arg7 : i32
    %3 = tt.addptr %arg0, %2 : !tt.ptr<f16, 1>, i32
    %4 = arith.muli %0, %c128_i32 : i32
    %5 = arith.extsi %arg8 : i32 to i64
    %6 = arith.extsi %4 : i32 to i64
    %7 = tt.addptr %arg2, %2 : !tt.ptr<f16, 1>, i32
    %8 = arith.extsi %arg14 : i32 to i64
    %9 = tt.addptr %arg1, %2 : !tt.ptr<f16, 1>, i32
    %10 = arith.extsi %arg11 : i32 to i64
    %11 = tt.addptr %arg5, %2 : !tt.ptr<f16, 1>, i32
    %12 = arith.extsi %arg17 : i32 to i64
    %13 = arith.mulf %arg3, %cst_2 : f32
    %14 = tt.splat %6 : (i64) -> tensor<64xi64>
    %15 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %16 = arith.extsi %15 : tensor<64xi32> to tensor<64xi64>
    %17 = arith.addi %14, %16 : tensor<64xi64>
    %18 = tt.expand_dims %17 {axis = 1 : i32} : (tensor<64xi64>) -> tensor<64x1xi64>
    %19 = tt.splat %5 : (i64) -> tensor<64x1xi64>
    %20 = arith.muli %18, %19 : tensor<64x1xi64>
    %21 = tt.splat %3 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>>
    %22 = tt.addptr %21, %20 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi64>
    %23 = tt.broadcast %22 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>>
    %24 = tt.expand_dims %16 {axis = 0 : i32} : (tensor<64xi64>) -> tensor<1x64xi64>
    %25 = tt.broadcast %24 : (tensor<1x64xi64>) -> tensor<64x64xi64>
    %26 = tt.addptr %23, %25 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi64>
    %27 = tt.load %26 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16>
    %28 = arith.addi %6, %c64_i64 : i64
    %29 = tt.splat %28 : (i64) -> tensor<64xi64>
    %30 = arith.addi %29, %16 : tensor<64xi64>
    %31 = tt.expand_dims %30 {axis = 1 : i32} : (tensor<64xi64>) -> tensor<64x1xi64>
    %32 = arith.muli %31, %19 : tensor<64x1xi64>
    %33 = tt.addptr %21, %32 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi64>
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>>
    %35 = tt.addptr %34, %25 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi64>
    %36 = tt.load %35 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16>
    %37 = tt.splat %13 : (f32) -> tensor<64x64xf32>
    %38 = arith.extf %27 : tensor<64x64xf16> to tensor<64x64xf32>
    %39 = arith.mulf %38, %37 : tensor<64x64xf32>
    %40 = arith.truncf %39 : tensor<64x64xf32> to tensor<64x64xf16>
    %41 = arith.extf %36 : tensor<64x64xf16> to tensor<64x64xf32>
    %42 = arith.mulf %41, %37 : tensor<64x64xf32>
    %43 = arith.truncf %42 : tensor<64x64xf32> to tensor<64x64xf16>
    %44 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<64xi64>) -> tensor<64x1xi64>
    %45 = tt.splat %9 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>>
    %46 = tt.addptr %45, %44 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi64>
    %47 = tt.broadcast %46 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>>
    %48 = tt.splat %10 : (i64) -> tensor<1x64xi64>
    %49 = tt.splat %8 : (i64) -> tensor<64x1xi64>
    %50 = tt.splat %7 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>>
    %51:8 = scf.for %arg21 = %c0_i32 to %arg20 step %c64_i32 iter_args(%arg22 = %cst_1, %arg23 = %cst, %arg24 = %cst_0, %arg25 = %cst_1, %arg26 = %cst, %arg27 = %cst_0, %arg28 = %c0_i64, %arg29 = %c0_i64) -> (tensor<64x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64x64xf32>, tensor<64xf32>, tensor<64xf32>, i64, i64)  : i32 {
      %70 = tt.splat %arg29 : (i64) -> tensor<64xi64>
      %71 = arith.addi %70, %16 : tensor<64xi64>
      %72 = tt.expand_dims %71 {axis = 0 : i32} : (tensor<64xi64>) -> tensor<1x64xi64>
      %73 = arith.muli %72, %48 : tensor<1x64xi64>
      %74 = tt.broadcast %73 : (tensor<1x64xi64>) -> tensor<64x64xi64>
      %75 = tt.addptr %47, %74 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi64>
      %76 = tt.load %75 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16>
      %77 = tt.dot %40, %76, %cst_1 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x64xf16> -> tensor<64x64xf32>
      %78 = "tt.reduce"(%77) <{axis = 1 : i32}> ({
      ^bb0(%arg30: f32, %arg31: f32):
        %121 = arith.maximumf %arg30, %arg31 : f32
        tt.reduce.return %121 : f32
      }) : (tensor<64x64xf32>) -> tensor<64xf32>
      %79 = arith.maximumf %arg24, %78 : tensor<64xf32>
      %80 = tt.expand_dims %79 {axis = 1 : i32} : (tensor<64xf32>) -> tensor<64x1xf32>
      %81 = tt.broadcast %80 : (tensor<64x1xf32>) -> tensor<64x64xf32>
      %82 = arith.subf %77, %81 : tensor<64x64xf32>
      %83 = tt.extern_elementwise %82 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<64x64xf32>) -> tensor<64x64xf32>
      %84 = arith.subf %arg24, %79 : tensor<64xf32>
      %85 = tt.extern_elementwise %84 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<64xf32>) -> tensor<64xf32>
      %86 = tt.expand_dims %85 {axis = 1 : i32} : (tensor<64xf32>) -> tensor<64x1xf32>
      %87 = tt.broadcast %86 : (tensor<64x1xf32>) -> tensor<64x64xf32>
      %88 = arith.mulf %arg22, %87 : tensor<64x64xf32>
      %89 = tt.splat %arg28 : (i64) -> tensor<64xi64>
      %90 = arith.addi %89, %16 : tensor<64xi64>
      %91 = tt.expand_dims %90 {axis = 1 : i32} : (tensor<64xi64>) -> tensor<64x1xi64>
      %92 = arith.muli %91, %49 : tensor<64x1xi64>
      %93 = tt.addptr %50, %92 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi64>
      %94 = tt.broadcast %93 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>>
      %95 = tt.addptr %94, %25 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi64>
      %96 = tt.load %95 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16>
      %97 = arith.truncf %83 : tensor<64x64xf32> to tensor<64x64xf16>
      %98 = tt.dot %97, %96, %88 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x64xf16> -> tensor<64x64xf32>
      %99 = "tt.reduce"(%83) <{axis = 1 : i32}> ({
      ^bb0(%arg30: f32, %arg31: f32):
        %121 = arith.addf %arg30, %arg31 : f32
        tt.reduce.return %121 : f32
      }) : (tensor<64x64xf32>) -> tensor<64xf32>
      %100 = arith.mulf %arg23, %85 : tensor<64xf32>
      %101 = arith.addf %100, %99 : tensor<64xf32>
      %102 = tt.dot %43, %76, %cst_1 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x64xf16> -> tensor<64x64xf32>
      %103 = "tt.reduce"(%102) <{axis = 1 : i32}> ({
      ^bb0(%arg30: f32, %arg31: f32):
        %121 = arith.maximumf %arg30, %arg31 : f32
        tt.reduce.return %121 : f32
      }) : (tensor<64x64xf32>) -> tensor<64xf32>
      %104 = arith.maximumf %arg27, %103 : tensor<64xf32>
      %105 = tt.expand_dims %104 {axis = 1 : i32} : (tensor<64xf32>) -> tensor<64x1xf32>
      %106 = tt.broadcast %105 : (tensor<64x1xf32>) -> tensor<64x64xf32>
      %107 = arith.subf %102, %106 : tensor<64x64xf32>
      %108 = tt.extern_elementwise %107 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<64x64xf32>) -> tensor<64x64xf32>
      %109 = arith.subf %arg27, %104 : tensor<64xf32>
      %110 = tt.extern_elementwise %109 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<64xf32>) -> tensor<64xf32>
      %111 = tt.expand_dims %110 {axis = 1 : i32} : (tensor<64xf32>) -> tensor<64x1xf32>
      %112 = tt.broadcast %111 : (tensor<64x1xf32>) -> tensor<64x64xf32>
      %113 = arith.mulf %arg25, %112 : tensor<64x64xf32>
      %114 = arith.truncf %108 : tensor<64x64xf32> to tensor<64x64xf16>
      %115 = tt.dot %114, %96, %113 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x64xf16> -> tensor<64x64xf32>
      %116 = "tt.reduce"(%108) <{axis = 1 : i32}> ({
      ^bb0(%arg30: f32, %arg31: f32):
        %121 = arith.addf %arg30, %arg31 : f32
        tt.reduce.return %121 : f32
      }) : (tensor<64x64xf32>) -> tensor<64xf32>
      %117 = arith.mulf %arg26, %110 : tensor<64xf32>
      %118 = arith.addf %117, %116 : tensor<64xf32>
      %119 = arith.addi %arg28, %c64_i64 : i64
      %120 = arith.addi %arg29, %c64_i64 : i64
      scf.yield %98, %101, %79, %115, %118, %104, %119, %120 : tensor<64x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64x64xf32>, tensor<64xf32>, tensor<64xf32>, i64, i64
    }
    %52 = tt.expand_dims %51#1 {axis = 1 : i32} : (tensor<64xf32>) -> tensor<64x1xf32>
    %53 = tt.broadcast %52 : (tensor<64x1xf32>) -> tensor<64x64xf32>
    %54 = arith.divf %51#0, %53 : tensor<64x64xf32>
    %55 = tt.expand_dims %51#4 {axis = 1 : i32} : (tensor<64xf32>) -> tensor<64x1xf32>
    %56 = tt.broadcast %55 : (tensor<64x1xf32>) -> tensor<64x64xf32>
    %57 = arith.divf %51#3, %56 : tensor<64x64xf32>
    %58 = arith.truncf %54 : tensor<64x64xf32> to tensor<64x64xf16>
    %59 = tt.splat %12 : (i64) -> tensor<64x1xi64>
    %60 = arith.muli %18, %59 : tensor<64x1xi64>
    %61 = tt.splat %11 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>>
    %62 = tt.addptr %61, %60 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi64>
    %63 = tt.broadcast %62 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>>
    %64 = tt.addptr %63, %25 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi64>
    tt.store %64, %58 {cache = 1 : i32, evict = 1 : i32} : tensor<64x64xf16>
    %65 = arith.truncf %57 : tensor<64x64xf32> to tensor<64x64xf16>
    %66 = arith.muli %31, %59 : tensor<64x1xi64>
    %67 = tt.addptr %61, %66 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi64>
    %68 = tt.broadcast %67 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>>
    %69 = tt.addptr %68, %25 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi64>
    tt.store %69, %65 {cache = 1 : i32, evict = 1 : i32} : tensor<64x64xf16>
    tt.return
  }
}
