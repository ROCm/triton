#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#mfma = #triton_gpu.mfma<{nonKDim = 16, warpsPerCTA = [4, 1], isTransposed = true, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared2 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg12: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg14: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg15: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg16: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg17: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg18: i32, %arg19: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg20: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %cst_0 = arith.constant dense<0xFF800000> : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mfma>
    %c64_i64 = arith.constant 64 : i64
    %c0_i64 = arith.constant 0 : i64
    %c64_i32 = arith.constant 64 : i32
    %cst_2 = arith.constant 1.44269502 : f32
    %c0_i32 = arith.constant 0 : i32
    %c128_i32 = arith.constant 128 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.muli %1, %arg7 : i32
    %3 = tt.addptr %arg0, %2 : !tt.ptr<f16, 1>, i32
    %4 = arith.muli %0, %c128_i32 : i32
    %5 = arith.extsi %arg8 : i32 to i64
    %6 = arith.extsi %4 : i32 to i64
    %7 = tt.addptr %arg2, %2 : !tt.ptr<f16, 1>, i32
    %8 = arith.extsi %arg14 : i32 to i64
    %9 = tt.addptr %arg1, %2 : !tt.ptr<f16, 1>, i32
    %10 = arith.extsi %arg11 : i32 to i64
    %11 = tt.addptr %arg5, %2 : !tt.ptr<f16, 1>, i32
    %12 = arith.extsi %arg17 : i32 to i64
    %13 = arith.mulf %arg3, %cst_2 : f32
    %14 = tt.splat %6 : (i64) -> tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %15 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %17 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %18 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %19 = arith.extsi %15 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %20 = arith.extsi %16 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %21 = arith.extsi %17 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %22 = arith.extsi %18 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %23 = arith.addi %14, %19 : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %24 = tt.expand_dims %23 {axis = 1 : i32} : (tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi64, #blocked>
    %25 = tt.splat %5 : (i64) -> tensor<64x1xi64, #blocked>
    %26 = arith.muli %24, %25 : tensor<64x1xi64, #blocked>
    %27 = tt.splat %3 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked>
    %28 = tt.addptr %27, %26 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi64, #blocked>
    %29 = tt.broadcast %28 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked>
    %30 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi64, #blocked>
    %31 = tt.broadcast %30 : (tensor<1x64xi64, #blocked>) -> tensor<64x64xi64, #blocked>
    %32 = tt.addptr %29, %31 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi64, #blocked>
    %33 = tt.load %32 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked>
    %34 = arith.addi %6, %c64_i64 : i64
    %35 = tt.splat %34 : (i64) -> tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %36 = arith.addi %35, %19 : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %37 = tt.expand_dims %36 {axis = 1 : i32} : (tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi64, #blocked>
    %38 = arith.muli %37, %25 : tensor<64x1xi64, #blocked>
    %39 = tt.addptr %27, %38 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi64, #blocked>
    %40 = tt.broadcast %39 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked>
    %41 = tt.addptr %40, %31 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi64, #blocked>
    %42 = tt.load %41 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked>
    %43 = tt.splat %13 : (f32) -> tensor<64x64xf32, #blocked>
    %44 = arith.extf %33 : tensor<64x64xf16, #blocked> to tensor<64x64xf32, #blocked>
    %45 = arith.mulf %44, %43 : tensor<64x64xf32, #blocked>
    %46 = arith.truncf %45 : tensor<64x64xf32, #blocked> to tensor<64x64xf16, #blocked>
    %47 = triton_gpu.convert_layout %46 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #shared>
    %48 = triton_gpu.convert_layout %47 : (tensor<64x64xf16, #shared>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
    %49 = arith.extf %42 : tensor<64x64xf16, #blocked> to tensor<64x64xf32, #blocked>
    %50 = arith.mulf %49, %43 : tensor<64x64xf32, #blocked>
    %51 = arith.truncf %50 : tensor<64x64xf32, #blocked> to tensor<64x64xf16, #blocked>
    %52 = triton_gpu.convert_layout %51 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #shared>
    %53 = triton_gpu.convert_layout %52 : (tensor<64x64xf16, #shared>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
    %54 = tt.expand_dims %21 {axis = 1 : i32} : (tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi64, #blocked1>
    %55 = tt.splat %9 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1>
    %56 = tt.addptr %55, %54 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi64, #blocked1>
    %57 = tt.broadcast %56 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked1>
    %58 = tt.splat %10 : (i64) -> tensor<1x64xi64, #blocked1>
    %59 = tt.splat %8 : (i64) -> tensor<64x1xi64, #blocked>
    %60 = tt.splat %7 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked>
    %61:8 = scf.for %arg21 = %c0_i32 to %arg20 step %c64_i32 iter_args(%arg22 = %cst_1, %arg23 = %cst, %arg24 = %cst_0, %arg25 = %cst_1, %arg26 = %cst, %arg27 = %cst_0, %arg28 = %c0_i64, %arg29 = %c0_i64) -> (tensor<64x64xf32, #mfma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<64x64xf32, #mfma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, i64, i64)  : i32 {
      %82 = tt.splat %arg29 : (i64) -> tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
      %83 = arith.addi %82, %22 : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
      %84 = tt.expand_dims %83 {axis = 0 : i32} : (tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x64xi64, #blocked1>
      %85 = arith.muli %84, %58 : tensor<1x64xi64, #blocked1>
      %86 = tt.broadcast %85 : (tensor<1x64xi64, #blocked1>) -> tensor<64x64xi64, #blocked1>
      %87 = tt.addptr %57, %86 : tensor<64x64x!tt.ptr<f16, 1>, #blocked1>, tensor<64x64xi64, #blocked1>
      %88 = tt.load %87 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked1>
      %89 = triton_gpu.convert_layout %88 : (tensor<64x64xf16, #blocked1>) -> tensor<64x64xf16, #shared1>
      %90 = triton_gpu.convert_layout %89 : (tensor<64x64xf16, #shared1>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %91 = tt.dot %48, %90, %cst_1 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x64xf32, #mfma>
      %92 = "tt.reduce"(%91) <{axis = 1 : i32}> ({
      ^bb0(%arg30: f32, %arg31: f32):
        %139 = arith.maximumf %arg30, %arg31 : f32
        tt.reduce.return %139 : f32
      }) : (tensor<64x64xf32, #mfma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %93 = arith.maximumf %arg24, %92 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %94 = tt.expand_dims %93 {axis = 1 : i32} : (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xf32, #mfma>
      %95 = tt.broadcast %94 : (tensor<64x1xf32, #mfma>) -> tensor<64x64xf32, #mfma>
      %96 = arith.subf %91, %95 : tensor<64x64xf32, #mfma>
      %97 = tt.extern_elementwise %96 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<64x64xf32, #mfma>) -> tensor<64x64xf32, #mfma>
      %98 = arith.subf %arg24, %93 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %99 = tt.extern_elementwise %98 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %100 = tt.expand_dims %99 {axis = 1 : i32} : (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xf32, #mfma>
      %101 = tt.broadcast %100 : (tensor<64x1xf32, #mfma>) -> tensor<64x64xf32, #mfma>
      %102 = arith.mulf %arg22, %101 : tensor<64x64xf32, #mfma>
      %103 = tt.splat %arg28 : (i64) -> tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
      %104 = arith.addi %103, %19 : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
      %105 = tt.expand_dims %104 {axis = 1 : i32} : (tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi64, #blocked>
      %106 = arith.muli %105, %59 : tensor<64x1xi64, #blocked>
      %107 = tt.addptr %60, %106 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi64, #blocked>
      %108 = tt.broadcast %107 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked>
      %109 = tt.addptr %108, %31 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi64, #blocked>
      %110 = tt.load %109 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked>
      %111 = triton_gpu.convert_layout %110 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #shared2>
      %112 = triton_gpu.convert_layout %111 : (tensor<64x64xf16, #shared2>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %113 = arith.truncf %97 : tensor<64x64xf32, #mfma> to tensor<64x64xf16, #mfma>
      %114 = triton_gpu.convert_layout %113 : (tensor<64x64xf16, #mfma>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
      %115 = tt.dot %114, %112, %102 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x64xf32, #mfma>
      %116 = "tt.reduce"(%97) <{axis = 1 : i32}> ({
      ^bb0(%arg30: f32, %arg31: f32):
        %139 = arith.addf %arg30, %arg31 : f32
        tt.reduce.return %139 : f32
      }) : (tensor<64x64xf32, #mfma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %117 = arith.mulf %arg23, %99 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %118 = arith.addf %117, %116 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %119 = tt.dot %53, %90, %cst_1 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x64xf32, #mfma>
      %120 = "tt.reduce"(%119) <{axis = 1 : i32}> ({
      ^bb0(%arg30: f32, %arg31: f32):
        %139 = arith.maximumf %arg30, %arg31 : f32
        tt.reduce.return %139 : f32
      }) : (tensor<64x64xf32, #mfma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %121 = arith.maximumf %arg27, %120 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %122 = tt.expand_dims %121 {axis = 1 : i32} : (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xf32, #mfma>
      %123 = tt.broadcast %122 : (tensor<64x1xf32, #mfma>) -> tensor<64x64xf32, #mfma>
      %124 = arith.subf %119, %123 : tensor<64x64xf32, #mfma>
      %125 = tt.extern_elementwise %124 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<64x64xf32, #mfma>) -> tensor<64x64xf32, #mfma>
      %126 = arith.subf %arg27, %121 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %127 = tt.extern_elementwise %126 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %128 = tt.expand_dims %127 {axis = 1 : i32} : (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xf32, #mfma>
      %129 = tt.broadcast %128 : (tensor<64x1xf32, #mfma>) -> tensor<64x64xf32, #mfma>
      %130 = arith.mulf %arg25, %129 : tensor<64x64xf32, #mfma>
      %131 = arith.truncf %125 : tensor<64x64xf32, #mfma> to tensor<64x64xf16, #mfma>
      %132 = triton_gpu.convert_layout %131 : (tensor<64x64xf16, #mfma>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
      %133 = tt.dot %132, %112, %130 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x64xf32, #mfma>
      %134 = "tt.reduce"(%125) <{axis = 1 : i32}> ({
      ^bb0(%arg30: f32, %arg31: f32):
        %139 = arith.addf %arg30, %arg31 : f32
        tt.reduce.return %139 : f32
      }) : (tensor<64x64xf32, #mfma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %135 = arith.mulf %arg26, %127 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %136 = arith.addf %135, %134 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %137 = arith.addi %arg28, %c64_i64 : i64
      %138 = arith.addi %arg29, %c64_i64 : i64
      scf.yield %115, %118, %93, %133, %136, %121, %137, %138 : tensor<64x64xf32, #mfma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<64x64xf32, #mfma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, i64, i64
    }
    %62 = tt.expand_dims %61#1 {axis = 1 : i32} : (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xf32, #mfma>
    %63 = tt.broadcast %62 : (tensor<64x1xf32, #mfma>) -> tensor<64x64xf32, #mfma>
    %64 = arith.divf %61#0, %63 : tensor<64x64xf32, #mfma>
    %65 = tt.expand_dims %61#4 {axis = 1 : i32} : (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xf32, #mfma>
    %66 = tt.broadcast %65 : (tensor<64x1xf32, #mfma>) -> tensor<64x64xf32, #mfma>
    %67 = arith.divf %61#3, %66 : tensor<64x64xf32, #mfma>
    %68 = arith.truncf %64 : tensor<64x64xf32, #mfma> to tensor<64x64xf16, #mfma>
    %69 = tt.splat %12 : (i64) -> tensor<64x1xi64, #blocked>
    %70 = arith.muli %24, %69 : tensor<64x1xi64, #blocked>
    %71 = tt.splat %11 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked>
    %72 = tt.addptr %71, %70 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi64, #blocked>
    %73 = tt.broadcast %72 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked>
    %74 = tt.addptr %73, %31 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi64, #blocked>
    %75 = triton_gpu.convert_layout %68 : (tensor<64x64xf16, #mfma>) -> tensor<64x64xf16, #blocked>
    tt.store %74, %75 {cache = 1 : i32, evict = 1 : i32} : tensor<64x64xf16, #blocked>
    %76 = arith.truncf %67 : tensor<64x64xf32, #mfma> to tensor<64x64xf16, #mfma>
    %77 = arith.muli %37, %69 : tensor<64x1xi64, #blocked>
    %78 = tt.addptr %71, %77 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi64, #blocked>
    %79 = tt.broadcast %78 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked>
    %80 = tt.addptr %79, %31 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi64, #blocked>
    %81 = triton_gpu.convert_layout %76 : (tensor<64x64xf16, #mfma>) -> tensor<64x64xf16, #blocked>
    tt.store %80, %81 {cache = 1 : i32, evict = 1 : i32} : tensor<64x64xf16, #blocked>
    tt.return
  }
}
