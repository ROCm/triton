// -----// IR Dump After Canonicalizer (canonicalize) //----- //
tt.func public @add_kernel_0d1d2d3d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
  %c1024_i32 = arith.constant 1024 : i32
  %0 = tt.get_program_id x : i32
  %1 = arith.muli %0, %c1024_i32 : i32
  %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
  %3 = tt.splat %1 : (i32) -> tensor<1024xi32>
  %4 = arith.addi %3, %2 : tensor<1024xi32>
  %5 = tt.splat %arg3 : (i32) -> tensor<1024xi32>
  %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32>
  %7 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>>
  %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f16>>, tensor<1024xi32>
  %9 = tt.load %8, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16>
  %10 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>>
  %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f16>>, tensor<1024xi32>
  %12 = tt.load %11, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16>
  %13 = arith.addf %9, %12 : tensor<1024xf16>
  %14 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>>
  %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f16>>, tensor<1024xi32>
  tt.store %15, %13, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xf16>
  tt.return
}

// -----// IR Dump After Inliner (inline) //----- //
module {
  tt.func public @add_kernel_0d1d2d3d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %3 = tt.splat %1 : (i32) -> tensor<1024xi32>
    %4 = arith.addi %3, %2 : tensor<1024xi32>
    %5 = tt.splat %arg3 : (i32) -> tensor<1024xi32>
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>>
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f16>>, tensor<1024xi32>
    %9 = tt.load %8, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16>
    %10 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>>
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f16>>, tensor<1024xi32>
    %12 = tt.load %11, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16>
    %13 = arith.addf %9, %12 : tensor<1024xf16>
    %14 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>>
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f16>>, tensor<1024xi32>
    tt.store %15, %13, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xf16>
    tt.return
  }
}


// -----// IR Dump After ConvertTritonToTritonGPU (convert-triton-to-tritongpu) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @add_kernel_0d1d2d3d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked>
    %5 = tt.splat %arg3 : (i32) -> tensor<1024xi32, #blocked>
    %6 = "triton_gpu.cmpi"(%4, %5) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked>, tensor<1024xi32, #blocked>) -> tensor<1024xi1, #blocked>
    %7 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    %9 = tt.load %8, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16, #blocked>
    %10 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    %12 = tt.load %11, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16, #blocked>
    %13 = arith.addf %9, %12 : tensor<1024xf16, #blocked>
    %14 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    tt.store %15, %13, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xf16, #blocked>
    tt.return
  }
}


// -----// IR Dump After TritonGPUCoalesce (tritongpu-coalesce) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @add_kernel_0d1d2d3d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked>
    %5 = tt.splat %arg3 : (i32) -> tensor<1024xi32, #blocked>
    %6 = "triton_gpu.cmpi"(%4, %5) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked>, tensor<1024xi32, #blocked>) -> tensor<1024xi1, #blocked>
    %7 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    %9 = triton_gpu.convert_layout %8 : (tensor<1024x!tt.ptr<f16>, #blocked>) -> tensor<1024x!tt.ptr<f16>, #blocked1>
    %10 = triton_gpu.convert_layout %6 : (tensor<1024xi1, #blocked>) -> tensor<1024xi1, #blocked1>
    %11 = tt.load %9, %10 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16, #blocked1>
    %12 = triton_gpu.convert_layout %11 : (tensor<1024xf16, #blocked1>) -> tensor<1024xf16, #blocked>
    %13 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %14 = tt.addptr %13, %4 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    %15 = triton_gpu.convert_layout %14 : (tensor<1024x!tt.ptr<f16>, #blocked>) -> tensor<1024x!tt.ptr<f16>, #blocked1>
    %16 = triton_gpu.convert_layout %6 : (tensor<1024xi1, #blocked>) -> tensor<1024xi1, #blocked1>
    %17 = tt.load %15, %16 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16, #blocked1>
    %18 = triton_gpu.convert_layout %17 : (tensor<1024xf16, #blocked1>) -> tensor<1024xf16, #blocked>
    %19 = arith.addf %12, %18 : tensor<1024xf16, #blocked>
    %20 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %21 = tt.addptr %20, %4 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    %22 = triton_gpu.convert_layout %21 : (tensor<1024x!tt.ptr<f16>, #blocked>) -> tensor<1024x!tt.ptr<f16>, #blocked1>
    %23 = triton_gpu.convert_layout %19 : (tensor<1024xf16, #blocked>) -> tensor<1024xf16, #blocked1>
    %24 = triton_gpu.convert_layout %6 : (tensor<1024xi1, #blocked>) -> tensor<1024xi1, #blocked1>
    tt.store %22, %23, %24 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xf16, #blocked1>
    tt.return
  }
}


// -----// IR Dump After TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @add_kernel_0d1d2d3d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %4 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %5 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %6 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %7 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %8 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked>
    %9 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked>
    %10 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked>
    %11 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked>
    %12 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked>
    %13 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked>
    %14 = arith.addi %8, %2 : tensor<1024xi32, #blocked>
    %15 = arith.addi %9, %3 : tensor<1024xi32, #blocked>
    %16 = arith.addi %10, %4 : tensor<1024xi32, #blocked>
    %17 = arith.addi %11, %5 : tensor<1024xi32, #blocked>
    %18 = arith.addi %12, %6 : tensor<1024xi32, #blocked>
    %19 = arith.addi %13, %7 : tensor<1024xi32, #blocked>
    %20 = tt.splat %arg3 : (i32) -> tensor<1024xi32, #blocked>
    %21 = tt.splat %arg3 : (i32) -> tensor<1024xi32, #blocked>
    %22 = tt.splat %arg3 : (i32) -> tensor<1024xi32, #blocked>
    %23 = "triton_gpu.cmpi"(%15, %20) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked>, tensor<1024xi32, #blocked>) -> tensor<1024xi1, #blocked>
    %24 = "triton_gpu.cmpi"(%17, %21) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked>, tensor<1024xi32, #blocked>) -> tensor<1024xi1, #blocked>
    %25 = "triton_gpu.cmpi"(%19, %22) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked>, tensor<1024xi32, #blocked>) -> tensor<1024xi1, #blocked>
    %26 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %27 = tt.addptr %26, %14 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    %28 = tt.load %27, %23 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16, #blocked>
    %29 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %30 = tt.addptr %29, %16 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    %31 = tt.load %30, %24 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16, #blocked>
    %32 = arith.addf %28, %31 : tensor<1024xf16, #blocked>
    %33 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %34 = tt.addptr %33, %18 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    tt.store %34, %32, %25 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xf16, #blocked>
    tt.return
  }
}


// -----// IR Dump After CSE (cse) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @add_kernel_0d1d2d3d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked>
    %5 = tt.splat %arg3 : (i32) -> tensor<1024xi32, #blocked>
    %6 = "triton_gpu.cmpi"(%4, %5) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked>, tensor<1024xi32, #blocked>) -> tensor<1024xi1, #blocked>
    %7 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    %9 = tt.load %8, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16, #blocked>
    %10 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    %12 = tt.load %11, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf16, #blocked>
    %13 = arith.addf %9, %12 : tensor<1024xf16, #blocked>
    %14 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<1024x!tt.ptr<f16>, #blocked>
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f16>, #blocked>, tensor<1024xi32, #blocked>
    tt.store %15, %13, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xf16, #blocked>
    tt.return
  }
}


// -----// IR Dump After ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) //----- //
module attributes {triton_gpu.externs = {library_0 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/opencl.bc", library_1 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ocml.bc", library_2 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ockl.bc", library_3 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @add_kernel_0d1d2d3d(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public"} {
    %0 = rocdl.workitem.id.x : i32
    %1 = llvm.trunc %0 : i32 to i32
    %2 = llvm.mlir.constant(64 : i32) : i32
    %3 = llvm.urem %1, %2  : i32
    %4 = llvm.udiv %1, %2  : i32
    %5 = llvm.mlir.constant(4 : i32) : i32
    %6 = llvm.urem %4, %5  : i32
    %7 = llvm.mlir.constant(256 : i32) : i32
    %8 = llvm.urem %3, %7  : i32
    %9 = llvm.mlir.constant(64 : i32) : i32
    %10 = llvm.mlir.constant(4 : i32) : i32
    %11 = llvm.mul %6, %9  : i32
    %12 = llvm.add %8, %11  : i32
    %13 = llvm.mul %10, %12  : i32
    %14 = llvm.mlir.constant(0 : i32) : i32
    %15 = llvm.add %13, %14  : i32
    %16 = llvm.mlir.constant(1 : i32) : i32
    %17 = llvm.add %13, %16  : i32
    %18 = llvm.mlir.constant(2 : i32) : i32
    %19 = llvm.add %13, %18  : i32
    %20 = llvm.mlir.constant(3 : i32) : i32
    %21 = llvm.add %13, %20  : i32
    %22 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3>
    %23 = llvm.bitcast %22 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3>
    %24 = builtin.unrealized_conversion_cast %arg2 : !llvm.ptr<f16, 1> to !tt.ptr<f16>
    %25 = builtin.unrealized_conversion_cast %arg1 : !llvm.ptr<f16, 1> to !tt.ptr<f16>
    %26 = builtin.unrealized_conversion_cast %arg0 : !llvm.ptr<f16, 1> to !tt.ptr<f16>
    %c1024_i32 = arith.constant 1024 : i32
    %27 = rocdl.workgroup.id.x : i32
    %28 = llvm.trunc %27 : i32 to i32
    %29 = llvm.mul %28, %c1024_i32  : i32
    %30 = llvm.mlir.constant(0 : index) : i32
    %31 = llvm.add %15, %30  : i32
    %32 = llvm.add %17, %30  : i32
    %33 = llvm.add %19, %30  : i32
    %34 = llvm.add %21, %30  : i32
    %35 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)>
    %36 = llvm.insertvalue %31, %35[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %37 = llvm.insertvalue %32, %36[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %38 = llvm.insertvalue %33, %37[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %39 = llvm.insertvalue %34, %38[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %40 = llvm.bitcast %29 : i32 to i32
    %41 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)>
    %42 = llvm.insertvalue %40, %41[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %43 = llvm.insertvalue %40, %42[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %44 = llvm.insertvalue %40, %43[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %45 = llvm.insertvalue %40, %44[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %46 = llvm.extractvalue %45[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %47 = llvm.extractvalue %45[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %48 = llvm.extractvalue %45[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %49 = llvm.extractvalue %45[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %50 = llvm.extractvalue %39[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %51 = llvm.extractvalue %39[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %52 = llvm.extractvalue %39[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %53 = llvm.extractvalue %39[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %54 = llvm.add %46, %50  : i32
    %55 = llvm.add %47, %51  : i32
    %56 = llvm.add %48, %52  : i32
    %57 = llvm.add %49, %53  : i32
    %58 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)>
    %59 = llvm.insertvalue %54, %58[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %60 = llvm.insertvalue %55, %59[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %61 = llvm.insertvalue %56, %60[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %62 = llvm.insertvalue %57, %61[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %63 = llvm.bitcast %arg3 : i32 to i32
    %64 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)>
    %65 = llvm.insertvalue %63, %64[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %66 = llvm.insertvalue %63, %65[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %67 = llvm.insertvalue %63, %66[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %68 = llvm.insertvalue %63, %67[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %69 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %70 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %71 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %72 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %73 = llvm.extractvalue %68[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %74 = llvm.extractvalue %68[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %75 = llvm.extractvalue %68[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %76 = llvm.extractvalue %68[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %77 = llvm.icmp "slt" %69, %73 : i32
    %78 = llvm.icmp "slt" %70, %74 : i32
    %79 = llvm.icmp "slt" %71, %75 : i32
    %80 = llvm.icmp "slt" %72, %76 : i32
    %81 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1)>
    %82 = llvm.insertvalue %77, %81[0] : !llvm.struct<(i1, i1, i1, i1)> 
    %83 = llvm.insertvalue %78, %82[1] : !llvm.struct<(i1, i1, i1, i1)> 
    %84 = llvm.insertvalue %79, %83[2] : !llvm.struct<(i1, i1, i1, i1)> 
    %85 = llvm.insertvalue %80, %84[3] : !llvm.struct<(i1, i1, i1, i1)> 
    %86 = llvm.bitcast %arg0 : !llvm.ptr<f16, 1> to !llvm.ptr<f16, 1>
    %87 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %88 = llvm.insertvalue %86, %87[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %89 = llvm.insertvalue %86, %88[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %90 = llvm.insertvalue %86, %89[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %91 = llvm.insertvalue %86, %90[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %92 = llvm.extractvalue %91[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %93 = llvm.extractvalue %91[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %94 = llvm.extractvalue %91[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %95 = llvm.extractvalue %91[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %96 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %97 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %98 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %99 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %100 = llvm.getelementptr %92[%96] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %101 = llvm.getelementptr %93[%97] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %102 = llvm.getelementptr %94[%98] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %103 = llvm.getelementptr %95[%99] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %104 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %105 = llvm.insertvalue %100, %104[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %106 = llvm.insertvalue %101, %105[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %107 = llvm.insertvalue %102, %106[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %108 = llvm.insertvalue %103, %107[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %109 = llvm.extractvalue %108[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %110 = llvm.extractvalue %108[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %111 = llvm.extractvalue %108[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %112 = llvm.extractvalue %108[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %113 = llvm.extractvalue %85[0] : !llvm.struct<(i1, i1, i1, i1)> 
    %114 = llvm.extractvalue %85[1] : !llvm.struct<(i1, i1, i1, i1)> 
    %115 = llvm.extractvalue %85[2] : !llvm.struct<(i1, i1, i1, i1)> 
    %116 = llvm.extractvalue %85[3] : !llvm.struct<(i1, i1, i1, i1)> 
    %117 = llvm.addrspacecast %109 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %118 = scf.if %113 -> (i32) {
      %262 = llvm.load %117 : !llvm.ptr<i32>
      scf.yield %262 : i32
    } else {
      %262 = llvm.mlir.constant(0 : i32) : i32
      scf.yield %262 : i32
    }
    %119 = llvm.bitcast %118 : i32 to vector<2xf16>
    %120 = llvm.mlir.constant(0 : index) : i32
    %121 = llvm.extractelement %119[%120 : i32] : vector<2xf16>
    %122 = llvm.mlir.constant(1 : index) : i32
    %123 = llvm.extractelement %119[%122 : i32] : vector<2xf16>
    %124 = llvm.addrspacecast %111 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %125 = scf.if %113 -> (i32) {
      %262 = llvm.load %124 : !llvm.ptr<i32>
      scf.yield %262 : i32
    } else {
      %262 = llvm.mlir.constant(0 : i32) : i32
      scf.yield %262 : i32
    }
    %126 = llvm.bitcast %125 : i32 to vector<2xf16>
    %127 = llvm.mlir.constant(0 : index) : i32
    %128 = llvm.extractelement %126[%127 : i32] : vector<2xf16>
    %129 = llvm.mlir.constant(1 : index) : i32
    %130 = llvm.extractelement %126[%129 : i32] : vector<2xf16>
    %131 = llvm.mlir.undef : !llvm.struct<(f16, f16, f16, f16)>
    %132 = llvm.insertvalue %121, %131[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %133 = llvm.insertvalue %123, %132[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %134 = llvm.insertvalue %128, %133[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %135 = llvm.insertvalue %130, %134[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %136 = llvm.bitcast %arg1 : !llvm.ptr<f16, 1> to !llvm.ptr<f16, 1>
    %137 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %138 = llvm.insertvalue %136, %137[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %139 = llvm.insertvalue %136, %138[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %140 = llvm.insertvalue %136, %139[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %141 = llvm.insertvalue %136, %140[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %142 = llvm.extractvalue %141[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %143 = llvm.extractvalue %141[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %144 = llvm.extractvalue %141[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %145 = llvm.extractvalue %141[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %146 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %147 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %148 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %149 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %150 = llvm.getelementptr %142[%146] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %151 = llvm.getelementptr %143[%147] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %152 = llvm.getelementptr %144[%148] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %153 = llvm.getelementptr %145[%149] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %154 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %155 = llvm.insertvalue %150, %154[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %156 = llvm.insertvalue %151, %155[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %157 = llvm.insertvalue %152, %156[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %158 = llvm.insertvalue %153, %157[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %159 = llvm.extractvalue %158[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %160 = llvm.extractvalue %158[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %161 = llvm.extractvalue %158[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %162 = llvm.extractvalue %158[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %163 = llvm.extractvalue %85[0] : !llvm.struct<(i1, i1, i1, i1)> 
    %164 = llvm.extractvalue %85[1] : !llvm.struct<(i1, i1, i1, i1)> 
    %165 = llvm.extractvalue %85[2] : !llvm.struct<(i1, i1, i1, i1)> 
    %166 = llvm.extractvalue %85[3] : !llvm.struct<(i1, i1, i1, i1)> 
    %167 = llvm.addrspacecast %159 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %168 = scf.if %163 -> (i32) {
      %262 = llvm.load %167 : !llvm.ptr<i32>
      scf.yield %262 : i32
    } else {
      %262 = llvm.mlir.constant(0 : i32) : i32
      scf.yield %262 : i32
    }
    %169 = llvm.bitcast %168 : i32 to vector<2xf16>
    %170 = llvm.mlir.constant(0 : index) : i32
    %171 = llvm.extractelement %169[%170 : i32] : vector<2xf16>
    %172 = llvm.mlir.constant(1 : index) : i32
    %173 = llvm.extractelement %169[%172 : i32] : vector<2xf16>
    %174 = llvm.addrspacecast %161 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %175 = scf.if %163 -> (i32) {
      %262 = llvm.load %174 : !llvm.ptr<i32>
      scf.yield %262 : i32
    } else {
      %262 = llvm.mlir.constant(0 : i32) : i32
      scf.yield %262 : i32
    }
    %176 = llvm.bitcast %175 : i32 to vector<2xf16>
    %177 = llvm.mlir.constant(0 : index) : i32
    %178 = llvm.extractelement %176[%177 : i32] : vector<2xf16>
    %179 = llvm.mlir.constant(1 : index) : i32
    %180 = llvm.extractelement %176[%179 : i32] : vector<2xf16>
    %181 = llvm.mlir.undef : !llvm.struct<(f16, f16, f16, f16)>
    %182 = llvm.insertvalue %171, %181[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %183 = llvm.insertvalue %173, %182[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %184 = llvm.insertvalue %178, %183[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %185 = llvm.insertvalue %180, %184[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %186 = llvm.extractvalue %135[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %187 = llvm.extractvalue %135[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %188 = llvm.extractvalue %135[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %189 = llvm.extractvalue %135[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %190 = llvm.extractvalue %185[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %191 = llvm.extractvalue %185[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %192 = llvm.extractvalue %185[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %193 = llvm.extractvalue %185[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %194 = llvm.fadd %186, %190  : f16
    %195 = llvm.fadd %187, %191  : f16
    %196 = llvm.fadd %188, %192  : f16
    %197 = llvm.fadd %189, %193  : f16
    %198 = llvm.mlir.undef : !llvm.struct<(f16, f16, f16, f16)>
    %199 = llvm.insertvalue %194, %198[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %200 = llvm.insertvalue %195, %199[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %201 = llvm.insertvalue %196, %200[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %202 = llvm.insertvalue %197, %201[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %203 = llvm.bitcast %arg2 : !llvm.ptr<f16, 1> to !llvm.ptr<f16, 1>
    %204 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %205 = llvm.insertvalue %203, %204[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %206 = llvm.insertvalue %203, %205[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %207 = llvm.insertvalue %203, %206[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %208 = llvm.insertvalue %203, %207[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %209 = llvm.extractvalue %208[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %210 = llvm.extractvalue %208[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %211 = llvm.extractvalue %208[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %212 = llvm.extractvalue %208[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %213 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %214 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %215 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %216 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %217 = llvm.getelementptr %209[%213] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %218 = llvm.getelementptr %210[%214] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %219 = llvm.getelementptr %211[%215] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %220 = llvm.getelementptr %212[%216] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %221 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %222 = llvm.insertvalue %217, %221[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %223 = llvm.insertvalue %218, %222[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %224 = llvm.insertvalue %219, %223[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %225 = llvm.insertvalue %220, %224[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %226 = llvm.extractvalue %225[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %227 = llvm.extractvalue %225[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %228 = llvm.extractvalue %225[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %229 = llvm.extractvalue %225[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %230 = llvm.extractvalue %202[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %231 = llvm.extractvalue %202[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %232 = llvm.extractvalue %202[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %233 = llvm.extractvalue %202[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %234 = llvm.extractvalue %85[0] : !llvm.struct<(i1, i1, i1, i1)> 
    %235 = llvm.extractvalue %85[1] : !llvm.struct<(i1, i1, i1, i1)> 
    %236 = llvm.extractvalue %85[2] : !llvm.struct<(i1, i1, i1, i1)> 
    %237 = llvm.extractvalue %85[3] : !llvm.struct<(i1, i1, i1, i1)> 
    %238 = llvm.mlir.constant(true) : i1
    %239 = rocdl.workitem.id.x : i32
    %240 = llvm.trunc %239 : i32 to i32
    %241 = llvm.mlir.constant(64 : i32) : i32
    %242 = llvm.urem %240, %241  : i32
    %243 = llvm.udiv %240, %241  : i32
    %244 = llvm.mlir.undef : vector<2xf16>
    %245 = llvm.bitcast %230 : f16 to f16
    %246 = llvm.mlir.constant(0 : i32) : i32
    %247 = llvm.insertelement %245, %244[%246 : i32] : vector<2xf16>
    %248 = llvm.bitcast %231 : f16 to f16
    %249 = llvm.mlir.constant(1 : i32) : i32
    %250 = llvm.insertelement %248, %247[%249 : i32] : vector<2xf16>
    %251 = llvm.bitcast %250 : vector<2xf16> to i32
    %252 = llvm.and %238, %234  : i1
    scf.if %252 {
      llvm.store %251, %226 : !llvm.ptr<f16, 1>
    }
    %253 = llvm.mlir.undef : vector<2xf16>
    %254 = llvm.bitcast %232 : f16 to f16
    %255 = llvm.mlir.constant(0 : i32) : i32
    %256 = llvm.insertelement %254, %253[%255 : i32] : vector<2xf16>
    %257 = llvm.bitcast %233 : f16 to f16
    %258 = llvm.mlir.constant(1 : i32) : i32
    %259 = llvm.insertelement %257, %256[%258 : i32] : vector<2xf16>
    %260 = llvm.bitcast %259 : vector<2xf16> to i32
    %261 = llvm.and %238, %234  : i1
    scf.if %261 {
      llvm.store %260, %228 : !llvm.ptr<f16, 1>
    }
    llvm.return
  }
}


// -----// IR Dump After ArithToLLVMConversionPass (convert-arith-to-llvm) //----- //
module attributes {triton_gpu.externs = {library_0 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/opencl.bc", library_1 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ocml.bc", library_2 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ockl.bc", library_3 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @add_kernel_0d1d2d3d(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public"} {
    %0 = rocdl.workitem.id.x : i32
    %1 = llvm.trunc %0 : i32 to i32
    %2 = llvm.mlir.constant(64 : i32) : i32
    %3 = llvm.urem %1, %2  : i32
    %4 = llvm.udiv %1, %2  : i32
    %5 = llvm.mlir.constant(4 : i32) : i32
    %6 = llvm.urem %4, %5  : i32
    %7 = llvm.mlir.constant(256 : i32) : i32
    %8 = llvm.urem %3, %7  : i32
    %9 = llvm.mlir.constant(64 : i32) : i32
    %10 = llvm.mlir.constant(4 : i32) : i32
    %11 = llvm.mul %6, %9  : i32
    %12 = llvm.add %8, %11  : i32
    %13 = llvm.mul %10, %12  : i32
    %14 = llvm.mlir.constant(0 : i32) : i32
    %15 = llvm.add %13, %14  : i32
    %16 = llvm.mlir.constant(1 : i32) : i32
    %17 = llvm.add %13, %16  : i32
    %18 = llvm.mlir.constant(2 : i32) : i32
    %19 = llvm.add %13, %18  : i32
    %20 = llvm.mlir.constant(3 : i32) : i32
    %21 = llvm.add %13, %20  : i32
    %22 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3>
    %23 = llvm.bitcast %22 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3>
    %24 = builtin.unrealized_conversion_cast %arg2 : !llvm.ptr<f16, 1> to !tt.ptr<f16>
    %25 = builtin.unrealized_conversion_cast %arg1 : !llvm.ptr<f16, 1> to !tt.ptr<f16>
    %26 = builtin.unrealized_conversion_cast %arg0 : !llvm.ptr<f16, 1> to !tt.ptr<f16>
    %27 = llvm.mlir.constant(1024 : i32) : i32
    %28 = rocdl.workgroup.id.x : i32
    %29 = llvm.trunc %28 : i32 to i32
    %30 = llvm.mul %29, %27  : i32
    %31 = llvm.mlir.constant(0 : index) : i32
    %32 = llvm.add %15, %31  : i32
    %33 = llvm.add %17, %31  : i32
    %34 = llvm.add %19, %31  : i32
    %35 = llvm.add %21, %31  : i32
    %36 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)>
    %37 = llvm.insertvalue %32, %36[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %38 = llvm.insertvalue %33, %37[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %39 = llvm.insertvalue %34, %38[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %40 = llvm.insertvalue %35, %39[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %41 = llvm.bitcast %30 : i32 to i32
    %42 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)>
    %43 = llvm.insertvalue %41, %42[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %44 = llvm.insertvalue %41, %43[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %45 = llvm.insertvalue %41, %44[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %46 = llvm.insertvalue %41, %45[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %47 = llvm.extractvalue %46[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %48 = llvm.extractvalue %46[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %49 = llvm.extractvalue %46[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %50 = llvm.extractvalue %46[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %51 = llvm.extractvalue %40[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %52 = llvm.extractvalue %40[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %53 = llvm.extractvalue %40[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %54 = llvm.extractvalue %40[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %55 = llvm.add %47, %51  : i32
    %56 = llvm.add %48, %52  : i32
    %57 = llvm.add %49, %53  : i32
    %58 = llvm.add %50, %54  : i32
    %59 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)>
    %60 = llvm.insertvalue %55, %59[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %61 = llvm.insertvalue %56, %60[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %62 = llvm.insertvalue %57, %61[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %63 = llvm.insertvalue %58, %62[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %64 = llvm.bitcast %arg3 : i32 to i32
    %65 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)>
    %66 = llvm.insertvalue %64, %65[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %67 = llvm.insertvalue %64, %66[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %68 = llvm.insertvalue %64, %67[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %69 = llvm.insertvalue %64, %68[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %70 = llvm.extractvalue %63[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %71 = llvm.extractvalue %63[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %72 = llvm.extractvalue %63[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %73 = llvm.extractvalue %63[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %74 = llvm.extractvalue %69[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %75 = llvm.extractvalue %69[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %76 = llvm.extractvalue %69[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %77 = llvm.extractvalue %69[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %78 = llvm.icmp "slt" %70, %74 : i32
    %79 = llvm.icmp "slt" %71, %75 : i32
    %80 = llvm.icmp "slt" %72, %76 : i32
    %81 = llvm.icmp "slt" %73, %77 : i32
    %82 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1)>
    %83 = llvm.insertvalue %78, %82[0] : !llvm.struct<(i1, i1, i1, i1)> 
    %84 = llvm.insertvalue %79, %83[1] : !llvm.struct<(i1, i1, i1, i1)> 
    %85 = llvm.insertvalue %80, %84[2] : !llvm.struct<(i1, i1, i1, i1)> 
    %86 = llvm.insertvalue %81, %85[3] : !llvm.struct<(i1, i1, i1, i1)> 
    %87 = llvm.bitcast %arg0 : !llvm.ptr<f16, 1> to !llvm.ptr<f16, 1>
    %88 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %89 = llvm.insertvalue %87, %88[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %90 = llvm.insertvalue %87, %89[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %91 = llvm.insertvalue %87, %90[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %92 = llvm.insertvalue %87, %91[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %93 = llvm.extractvalue %92[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %94 = llvm.extractvalue %92[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %95 = llvm.extractvalue %92[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %96 = llvm.extractvalue %92[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %97 = llvm.extractvalue %63[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %98 = llvm.extractvalue %63[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %99 = llvm.extractvalue %63[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %100 = llvm.extractvalue %63[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %101 = llvm.getelementptr %93[%97] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %102 = llvm.getelementptr %94[%98] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %103 = llvm.getelementptr %95[%99] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %104 = llvm.getelementptr %96[%100] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %105 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %106 = llvm.insertvalue %101, %105[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %107 = llvm.insertvalue %102, %106[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %108 = llvm.insertvalue %103, %107[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %109 = llvm.insertvalue %104, %108[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %110 = llvm.extractvalue %109[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %111 = llvm.extractvalue %109[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %112 = llvm.extractvalue %109[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %113 = llvm.extractvalue %109[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %114 = llvm.extractvalue %86[0] : !llvm.struct<(i1, i1, i1, i1)> 
    %115 = llvm.extractvalue %86[1] : !llvm.struct<(i1, i1, i1, i1)> 
    %116 = llvm.extractvalue %86[2] : !llvm.struct<(i1, i1, i1, i1)> 
    %117 = llvm.extractvalue %86[3] : !llvm.struct<(i1, i1, i1, i1)> 
    %118 = llvm.addrspacecast %110 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %119 = scf.if %114 -> (i32) {
      %263 = llvm.load %118 : !llvm.ptr<i32>
      scf.yield %263 : i32
    } else {
      %263 = llvm.mlir.constant(0 : i32) : i32
      scf.yield %263 : i32
    }
    %120 = llvm.bitcast %119 : i32 to vector<2xf16>
    %121 = llvm.mlir.constant(0 : index) : i32
    %122 = llvm.extractelement %120[%121 : i32] : vector<2xf16>
    %123 = llvm.mlir.constant(1 : index) : i32
    %124 = llvm.extractelement %120[%123 : i32] : vector<2xf16>
    %125 = llvm.addrspacecast %112 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %126 = scf.if %114 -> (i32) {
      %263 = llvm.load %125 : !llvm.ptr<i32>
      scf.yield %263 : i32
    } else {
      %263 = llvm.mlir.constant(0 : i32) : i32
      scf.yield %263 : i32
    }
    %127 = llvm.bitcast %126 : i32 to vector<2xf16>
    %128 = llvm.mlir.constant(0 : index) : i32
    %129 = llvm.extractelement %127[%128 : i32] : vector<2xf16>
    %130 = llvm.mlir.constant(1 : index) : i32
    %131 = llvm.extractelement %127[%130 : i32] : vector<2xf16>
    %132 = llvm.mlir.undef : !llvm.struct<(f16, f16, f16, f16)>
    %133 = llvm.insertvalue %122, %132[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %134 = llvm.insertvalue %124, %133[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %135 = llvm.insertvalue %129, %134[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %136 = llvm.insertvalue %131, %135[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %137 = llvm.bitcast %arg1 : !llvm.ptr<f16, 1> to !llvm.ptr<f16, 1>
    %138 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %139 = llvm.insertvalue %137, %138[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %140 = llvm.insertvalue %137, %139[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %141 = llvm.insertvalue %137, %140[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %142 = llvm.insertvalue %137, %141[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %143 = llvm.extractvalue %142[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %144 = llvm.extractvalue %142[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %145 = llvm.extractvalue %142[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %146 = llvm.extractvalue %142[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %147 = llvm.extractvalue %63[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %148 = llvm.extractvalue %63[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %149 = llvm.extractvalue %63[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %150 = llvm.extractvalue %63[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %151 = llvm.getelementptr %143[%147] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %152 = llvm.getelementptr %144[%148] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %153 = llvm.getelementptr %145[%149] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %154 = llvm.getelementptr %146[%150] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %155 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %156 = llvm.insertvalue %151, %155[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %157 = llvm.insertvalue %152, %156[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %158 = llvm.insertvalue %153, %157[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %159 = llvm.insertvalue %154, %158[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %160 = llvm.extractvalue %159[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %161 = llvm.extractvalue %159[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %162 = llvm.extractvalue %159[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %163 = llvm.extractvalue %159[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %164 = llvm.extractvalue %86[0] : !llvm.struct<(i1, i1, i1, i1)> 
    %165 = llvm.extractvalue %86[1] : !llvm.struct<(i1, i1, i1, i1)> 
    %166 = llvm.extractvalue %86[2] : !llvm.struct<(i1, i1, i1, i1)> 
    %167 = llvm.extractvalue %86[3] : !llvm.struct<(i1, i1, i1, i1)> 
    %168 = llvm.addrspacecast %160 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %169 = scf.if %164 -> (i32) {
      %263 = llvm.load %168 : !llvm.ptr<i32>
      scf.yield %263 : i32
    } else {
      %263 = llvm.mlir.constant(0 : i32) : i32
      scf.yield %263 : i32
    }
    %170 = llvm.bitcast %169 : i32 to vector<2xf16>
    %171 = llvm.mlir.constant(0 : index) : i32
    %172 = llvm.extractelement %170[%171 : i32] : vector<2xf16>
    %173 = llvm.mlir.constant(1 : index) : i32
    %174 = llvm.extractelement %170[%173 : i32] : vector<2xf16>
    %175 = llvm.addrspacecast %162 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %176 = scf.if %164 -> (i32) {
      %263 = llvm.load %175 : !llvm.ptr<i32>
      scf.yield %263 : i32
    } else {
      %263 = llvm.mlir.constant(0 : i32) : i32
      scf.yield %263 : i32
    }
    %177 = llvm.bitcast %176 : i32 to vector<2xf16>
    %178 = llvm.mlir.constant(0 : index) : i32
    %179 = llvm.extractelement %177[%178 : i32] : vector<2xf16>
    %180 = llvm.mlir.constant(1 : index) : i32
    %181 = llvm.extractelement %177[%180 : i32] : vector<2xf16>
    %182 = llvm.mlir.undef : !llvm.struct<(f16, f16, f16, f16)>
    %183 = llvm.insertvalue %172, %182[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %184 = llvm.insertvalue %174, %183[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %185 = llvm.insertvalue %179, %184[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %186 = llvm.insertvalue %181, %185[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %187 = llvm.extractvalue %136[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %188 = llvm.extractvalue %136[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %189 = llvm.extractvalue %136[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %190 = llvm.extractvalue %136[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %191 = llvm.extractvalue %186[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %192 = llvm.extractvalue %186[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %193 = llvm.extractvalue %186[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %194 = llvm.extractvalue %186[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %195 = llvm.fadd %187, %191  : f16
    %196 = llvm.fadd %188, %192  : f16
    %197 = llvm.fadd %189, %193  : f16
    %198 = llvm.fadd %190, %194  : f16
    %199 = llvm.mlir.undef : !llvm.struct<(f16, f16, f16, f16)>
    %200 = llvm.insertvalue %195, %199[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %201 = llvm.insertvalue %196, %200[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %202 = llvm.insertvalue %197, %201[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %203 = llvm.insertvalue %198, %202[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %204 = llvm.bitcast %arg2 : !llvm.ptr<f16, 1> to !llvm.ptr<f16, 1>
    %205 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %206 = llvm.insertvalue %204, %205[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %207 = llvm.insertvalue %204, %206[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %208 = llvm.insertvalue %204, %207[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %209 = llvm.insertvalue %204, %208[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %210 = llvm.extractvalue %209[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %211 = llvm.extractvalue %209[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %212 = llvm.extractvalue %209[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %213 = llvm.extractvalue %209[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %214 = llvm.extractvalue %63[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %215 = llvm.extractvalue %63[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %216 = llvm.extractvalue %63[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %217 = llvm.extractvalue %63[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %218 = llvm.getelementptr %210[%214] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %219 = llvm.getelementptr %211[%215] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %220 = llvm.getelementptr %212[%216] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %221 = llvm.getelementptr %213[%217] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %222 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>
    %223 = llvm.insertvalue %218, %222[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %224 = llvm.insertvalue %219, %223[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %225 = llvm.insertvalue %220, %224[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %226 = llvm.insertvalue %221, %225[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %227 = llvm.extractvalue %226[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %228 = llvm.extractvalue %226[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %229 = llvm.extractvalue %226[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %230 = llvm.extractvalue %226[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> 
    %231 = llvm.extractvalue %203[0] : !llvm.struct<(f16, f16, f16, f16)> 
    %232 = llvm.extractvalue %203[1] : !llvm.struct<(f16, f16, f16, f16)> 
    %233 = llvm.extractvalue %203[2] : !llvm.struct<(f16, f16, f16, f16)> 
    %234 = llvm.extractvalue %203[3] : !llvm.struct<(f16, f16, f16, f16)> 
    %235 = llvm.extractvalue %86[0] : !llvm.struct<(i1, i1, i1, i1)> 
    %236 = llvm.extractvalue %86[1] : !llvm.struct<(i1, i1, i1, i1)> 
    %237 = llvm.extractvalue %86[2] : !llvm.struct<(i1, i1, i1, i1)> 
    %238 = llvm.extractvalue %86[3] : !llvm.struct<(i1, i1, i1, i1)> 
    %239 = llvm.mlir.constant(true) : i1
    %240 = rocdl.workitem.id.x : i32
    %241 = llvm.trunc %240 : i32 to i32
    %242 = llvm.mlir.constant(64 : i32) : i32
    %243 = llvm.urem %241, %242  : i32
    %244 = llvm.udiv %241, %242  : i32
    %245 = llvm.mlir.undef : vector<2xf16>
    %246 = llvm.bitcast %231 : f16 to f16
    %247 = llvm.mlir.constant(0 : i32) : i32
    %248 = llvm.insertelement %246, %245[%247 : i32] : vector<2xf16>
    %249 = llvm.bitcast %232 : f16 to f16
    %250 = llvm.mlir.constant(1 : i32) : i32
    %251 = llvm.insertelement %249, %248[%250 : i32] : vector<2xf16>
    %252 = llvm.bitcast %251 : vector<2xf16> to i32
    %253 = llvm.and %239, %235  : i1
    scf.if %253 {
      llvm.store %252, %227 : !llvm.ptr<f16, 1>
    }
    %254 = llvm.mlir.undef : vector<2xf16>
    %255 = llvm.bitcast %233 : f16 to f16
    %256 = llvm.mlir.constant(0 : i32) : i32
    %257 = llvm.insertelement %255, %254[%256 : i32] : vector<2xf16>
    %258 = llvm.bitcast %234 : f16 to f16
    %259 = llvm.mlir.constant(1 : i32) : i32
    %260 = llvm.insertelement %258, %257[%259 : i32] : vector<2xf16>
    %261 = llvm.bitcast %260 : vector<2xf16> to i32
    %262 = llvm.and %239, %235  : i1
    scf.if %262 {
      llvm.store %261, %229 : !llvm.ptr<f16, 1>
    }
    llvm.return
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module attributes {triton_gpu.externs = {library_0 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/opencl.bc", library_1 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ocml.bc", library_2 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ockl.bc", library_3 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @add_kernel_0d1d2d3d(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public"} {
    %0 = llvm.mlir.constant(true) : i1
    %1 = llvm.mlir.constant(1 : index) : i32
    %2 = llvm.mlir.constant(0 : index) : i32
    %3 = llvm.mlir.constant(1024 : i32) : i32
    %4 = llvm.mlir.constant(2 : i32) : i32
    %5 = llvm.mlir.constant(1 : i32) : i32
    %6 = llvm.mlir.constant(0 : i32) : i32
    %7 = llvm.mlir.constant(256 : i32) : i32
    %8 = llvm.mlir.constant(4 : i32) : i32
    %9 = llvm.mlir.constant(64 : i32) : i32
    %10 = rocdl.workitem.id.x : i32
    %11 = llvm.trunc %10 : i32 to i32
    %12 = llvm.urem %11, %9  : i32
    %13 = llvm.udiv %11, %9  : i32
    %14 = llvm.urem %13, %8  : i32
    %15 = llvm.urem %12, %7  : i32
    %16 = llvm.mul %14, %9  : i32
    %17 = llvm.add %15, %16  : i32
    %18 = llvm.mul %17, %8  : i32
    %19 = llvm.add %18, %6  : i32
    %20 = llvm.add %18, %4  : i32
    %21 = rocdl.workgroup.id.x : i32
    %22 = llvm.trunc %21 : i32 to i32
    %23 = llvm.mul %22, %3  : i32
    %24 = llvm.add %19, %2  : i32
    %25 = llvm.add %20, %2  : i32
    %26 = llvm.add %23, %24  : i32
    %27 = llvm.add %23, %25  : i32
    %28 = llvm.icmp "slt" %26, %arg3 : i32
    %29 = llvm.getelementptr %arg0[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %30 = llvm.getelementptr %arg0[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %31 = llvm.addrspacecast %29 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %32 = scf.if %28 -> (i32) {
      %69 = llvm.load %31 : !llvm.ptr<i32>
      scf.yield %69 : i32
    } else {
      scf.yield %6 : i32
    }
    %33 = llvm.bitcast %32 : i32 to vector<2xf16>
    %34 = llvm.extractelement %33[%2 : i32] : vector<2xf16>
    %35 = llvm.extractelement %33[%1 : i32] : vector<2xf16>
    %36 = llvm.addrspacecast %30 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %37 = scf.if %28 -> (i32) {
      %69 = llvm.load %36 : !llvm.ptr<i32>
      scf.yield %69 : i32
    } else {
      scf.yield %6 : i32
    }
    %38 = llvm.bitcast %37 : i32 to vector<2xf16>
    %39 = llvm.extractelement %38[%2 : i32] : vector<2xf16>
    %40 = llvm.extractelement %38[%1 : i32] : vector<2xf16>
    %41 = llvm.getelementptr %arg1[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %42 = llvm.getelementptr %arg1[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %43 = llvm.addrspacecast %41 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %44 = scf.if %28 -> (i32) {
      %69 = llvm.load %43 : !llvm.ptr<i32>
      scf.yield %69 : i32
    } else {
      scf.yield %6 : i32
    }
    %45 = llvm.bitcast %44 : i32 to vector<2xf16>
    %46 = llvm.extractelement %45[%2 : i32] : vector<2xf16>
    %47 = llvm.extractelement %45[%1 : i32] : vector<2xf16>
    %48 = llvm.addrspacecast %42 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %49 = scf.if %28 -> (i32) {
      %69 = llvm.load %48 : !llvm.ptr<i32>
      scf.yield %69 : i32
    } else {
      scf.yield %6 : i32
    }
    %50 = llvm.bitcast %49 : i32 to vector<2xf16>
    %51 = llvm.extractelement %50[%2 : i32] : vector<2xf16>
    %52 = llvm.extractelement %50[%1 : i32] : vector<2xf16>
    %53 = llvm.fadd %34, %46  : f16
    %54 = llvm.fadd %35, %47  : f16
    %55 = llvm.fadd %39, %51  : f16
    %56 = llvm.fadd %40, %52  : f16
    %57 = llvm.getelementptr %arg2[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %58 = llvm.getelementptr %arg2[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %59 = llvm.mlir.undef : vector<2xf16>
    %60 = llvm.insertelement %53, %59[%6 : i32] : vector<2xf16>
    %61 = llvm.insertelement %54, %60[%5 : i32] : vector<2xf16>
    %62 = llvm.bitcast %61 : vector<2xf16> to i32
    %63 = llvm.and %0, %28  : i1
    scf.if %63 {
      llvm.store %62, %57 : !llvm.ptr<f16, 1>
    }
    %64 = llvm.mlir.undef : vector<2xf16>
    %65 = llvm.insertelement %55, %64[%6 : i32] : vector<2xf16>
    %66 = llvm.insertelement %56, %65[%5 : i32] : vector<2xf16>
    %67 = llvm.bitcast %66 : vector<2xf16> to i32
    %68 = llvm.and %0, %28  : i1
    scf.if %68 {
      llvm.store %67, %58 : !llvm.ptr<f16, 1>
    }
    llvm.return
  }
}


// -----// IR Dump After CSE (cse) //----- //
module attributes {triton_gpu.externs = {library_0 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/opencl.bc", library_1 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ocml.bc", library_2 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ockl.bc", library_3 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @add_kernel_0d1d2d3d(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public"} {
    %0 = llvm.mlir.constant(true) : i1
    %1 = llvm.mlir.constant(1 : index) : i32
    %2 = llvm.mlir.constant(0 : index) : i32
    %3 = llvm.mlir.constant(1024 : i32) : i32
    %4 = llvm.mlir.constant(2 : i32) : i32
    %5 = llvm.mlir.constant(1 : i32) : i32
    %6 = llvm.mlir.constant(0 : i32) : i32
    %7 = llvm.mlir.constant(256 : i32) : i32
    %8 = llvm.mlir.constant(4 : i32) : i32
    %9 = llvm.mlir.constant(64 : i32) : i32
    %10 = rocdl.workitem.id.x : i32
    %11 = llvm.trunc %10 : i32 to i32
    %12 = llvm.urem %11, %9  : i32
    %13 = llvm.udiv %11, %9  : i32
    %14 = llvm.urem %13, %8  : i32
    %15 = llvm.urem %12, %7  : i32
    %16 = llvm.mul %14, %9  : i32
    %17 = llvm.add %15, %16  : i32
    %18 = llvm.mul %17, %8  : i32
    %19 = llvm.add %18, %6  : i32
    %20 = llvm.add %18, %4  : i32
    %21 = rocdl.workgroup.id.x : i32
    %22 = llvm.trunc %21 : i32 to i32
    %23 = llvm.mul %22, %3  : i32
    %24 = llvm.add %19, %2  : i32
    %25 = llvm.add %20, %2  : i32
    %26 = llvm.add %23, %24  : i32
    %27 = llvm.add %23, %25  : i32
    %28 = llvm.icmp "slt" %26, %arg3 : i32
    %29 = llvm.getelementptr %arg0[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %30 = llvm.getelementptr %arg0[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %31 = llvm.addrspacecast %29 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %32 = scf.if %28 -> (i32) {
      %67 = llvm.load %31 : !llvm.ptr<i32>
      scf.yield %67 : i32
    } else {
      scf.yield %6 : i32
    }
    %33 = llvm.bitcast %32 : i32 to vector<2xf16>
    %34 = llvm.extractelement %33[%2 : i32] : vector<2xf16>
    %35 = llvm.extractelement %33[%1 : i32] : vector<2xf16>
    %36 = llvm.addrspacecast %30 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %37 = scf.if %28 -> (i32) {
      %67 = llvm.load %36 : !llvm.ptr<i32>
      scf.yield %67 : i32
    } else {
      scf.yield %6 : i32
    }
    %38 = llvm.bitcast %37 : i32 to vector<2xf16>
    %39 = llvm.extractelement %38[%2 : i32] : vector<2xf16>
    %40 = llvm.extractelement %38[%1 : i32] : vector<2xf16>
    %41 = llvm.getelementptr %arg1[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %42 = llvm.getelementptr %arg1[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %43 = llvm.addrspacecast %41 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %44 = scf.if %28 -> (i32) {
      %67 = llvm.load %43 : !llvm.ptr<i32>
      scf.yield %67 : i32
    } else {
      scf.yield %6 : i32
    }
    %45 = llvm.bitcast %44 : i32 to vector<2xf16>
    %46 = llvm.extractelement %45[%2 : i32] : vector<2xf16>
    %47 = llvm.extractelement %45[%1 : i32] : vector<2xf16>
    %48 = llvm.addrspacecast %42 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    %49 = scf.if %28 -> (i32) {
      %67 = llvm.load %48 : !llvm.ptr<i32>
      scf.yield %67 : i32
    } else {
      scf.yield %6 : i32
    }
    %50 = llvm.bitcast %49 : i32 to vector<2xf16>
    %51 = llvm.extractelement %50[%2 : i32] : vector<2xf16>
    %52 = llvm.extractelement %50[%1 : i32] : vector<2xf16>
    %53 = llvm.fadd %34, %46  : f16
    %54 = llvm.fadd %35, %47  : f16
    %55 = llvm.fadd %39, %51  : f16
    %56 = llvm.fadd %40, %52  : f16
    %57 = llvm.getelementptr %arg2[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %58 = llvm.getelementptr %arg2[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %59 = llvm.mlir.undef : vector<2xf16>
    %60 = llvm.insertelement %53, %59[%6 : i32] : vector<2xf16>
    %61 = llvm.insertelement %54, %60[%5 : i32] : vector<2xf16>
    %62 = llvm.bitcast %61 : vector<2xf16> to i32
    %63 = llvm.and %0, %28  : i1
    scf.if %63 {
      llvm.store %62, %57 : !llvm.ptr<f16, 1>
    }
    %64 = llvm.insertelement %55, %59[%6 : i32] : vector<2xf16>
    %65 = llvm.insertelement %56, %64[%5 : i32] : vector<2xf16>
    %66 = llvm.bitcast %65 : vector<2xf16> to i32
    scf.if %63 {
      llvm.store %66, %58 : !llvm.ptr<f16, 1>
    }
    llvm.return
  }
}


// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
module attributes {triton_gpu.externs = {library_0 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/opencl.bc", library_1 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ocml.bc", library_2 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ockl.bc", library_3 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @add_kernel_0d1d2d3d(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public"} {
    %0 = llvm.mlir.constant(true) : i1
    %1 = llvm.mlir.constant(1 : index) : i32
    %2 = llvm.mlir.constant(0 : index) : i32
    %3 = llvm.mlir.constant(1024 : i32) : i32
    %4 = llvm.mlir.constant(2 : i32) : i32
    %5 = llvm.mlir.constant(1 : i32) : i32
    %6 = llvm.mlir.constant(0 : i32) : i32
    %7 = llvm.mlir.constant(256 : i32) : i32
    %8 = llvm.mlir.constant(4 : i32) : i32
    %9 = llvm.mlir.constant(64 : i32) : i32
    %10 = rocdl.workitem.id.x : i32
    %11 = llvm.trunc %10 : i32 to i32
    %12 = llvm.urem %11, %9  : i32
    %13 = llvm.udiv %11, %9  : i32
    %14 = llvm.urem %13, %8  : i32
    %15 = llvm.urem %12, %7  : i32
    %16 = llvm.mul %14, %9  : i32
    %17 = llvm.add %15, %16  : i32
    %18 = llvm.mul %17, %8  : i32
    %19 = llvm.add %18, %6  : i32
    %20 = llvm.add %18, %4  : i32
    %21 = rocdl.workgroup.id.x : i32
    %22 = llvm.trunc %21 : i32 to i32
    %23 = llvm.mul %22, %3  : i32
    %24 = llvm.add %19, %2  : i32
    %25 = llvm.add %20, %2  : i32
    %26 = llvm.add %23, %24  : i32
    %27 = llvm.add %23, %25  : i32
    %28 = llvm.icmp "slt" %26, %arg3 : i32
    %29 = llvm.getelementptr %arg0[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %30 = llvm.getelementptr %arg0[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %31 = llvm.addrspacecast %29 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    cf.cond_br %28, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %32 = llvm.load %31 : !llvm.ptr<i32>
    cf.br ^bb3(%32 : i32)
  ^bb2:  // pred: ^bb0
    cf.br ^bb3(%6 : i32)
  ^bb3(%33: i32):  // 2 preds: ^bb1, ^bb2
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %34 = llvm.bitcast %33 : i32 to vector<2xf16>
    %35 = llvm.extractelement %34[%2 : i32] : vector<2xf16>
    %36 = llvm.extractelement %34[%1 : i32] : vector<2xf16>
    %37 = llvm.addrspacecast %30 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    cf.cond_br %28, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %38 = llvm.load %37 : !llvm.ptr<i32>
    cf.br ^bb7(%38 : i32)
  ^bb6:  // pred: ^bb4
    cf.br ^bb7(%6 : i32)
  ^bb7(%39: i32):  // 2 preds: ^bb5, ^bb6
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %40 = llvm.bitcast %39 : i32 to vector<2xf16>
    %41 = llvm.extractelement %40[%2 : i32] : vector<2xf16>
    %42 = llvm.extractelement %40[%1 : i32] : vector<2xf16>
    %43 = llvm.getelementptr %arg1[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %44 = llvm.getelementptr %arg1[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %45 = llvm.addrspacecast %43 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    cf.cond_br %28, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %46 = llvm.load %45 : !llvm.ptr<i32>
    cf.br ^bb11(%46 : i32)
  ^bb10:  // pred: ^bb8
    cf.br ^bb11(%6 : i32)
  ^bb11(%47: i32):  // 2 preds: ^bb9, ^bb10
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %48 = llvm.bitcast %47 : i32 to vector<2xf16>
    %49 = llvm.extractelement %48[%2 : i32] : vector<2xf16>
    %50 = llvm.extractelement %48[%1 : i32] : vector<2xf16>
    %51 = llvm.addrspacecast %44 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    cf.cond_br %28, ^bb13, ^bb14
  ^bb13:  // pred: ^bb12
    %52 = llvm.load %51 : !llvm.ptr<i32>
    cf.br ^bb15(%52 : i32)
  ^bb14:  // pred: ^bb12
    cf.br ^bb15(%6 : i32)
  ^bb15(%53: i32):  // 2 preds: ^bb13, ^bb14
    cf.br ^bb16
  ^bb16:  // pred: ^bb15
    %54 = llvm.bitcast %53 : i32 to vector<2xf16>
    %55 = llvm.extractelement %54[%2 : i32] : vector<2xf16>
    %56 = llvm.extractelement %54[%1 : i32] : vector<2xf16>
    %57 = llvm.fadd %35, %49  : f16
    %58 = llvm.fadd %36, %50  : f16
    %59 = llvm.fadd %41, %55  : f16
    %60 = llvm.fadd %42, %56  : f16
    %61 = llvm.getelementptr %arg2[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %62 = llvm.getelementptr %arg2[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %63 = llvm.mlir.undef : vector<2xf16>
    %64 = llvm.insertelement %57, %63[%6 : i32] : vector<2xf16>
    %65 = llvm.insertelement %58, %64[%5 : i32] : vector<2xf16>
    %66 = llvm.bitcast %65 : vector<2xf16> to i32
    %67 = llvm.and %0, %28  : i1
    cf.cond_br %67, ^bb17, ^bb18
  ^bb17:  // pred: ^bb16
    llvm.store %66, %61 : !llvm.ptr<f16, 1>
    cf.br ^bb18
  ^bb18:  // 2 preds: ^bb16, ^bb17
    %68 = llvm.insertelement %59, %63[%6 : i32] : vector<2xf16>
    %69 = llvm.insertelement %60, %68[%5 : i32] : vector<2xf16>
    %70 = llvm.bitcast %69 : vector<2xf16> to i32
    cf.cond_br %67, ^bb19, ^bb20
  ^bb19:  // pred: ^bb18
    llvm.store %70, %62 : !llvm.ptr<f16, 1>
    cf.br ^bb20
  ^bb20:  // 2 preds: ^bb18, ^bb19
    llvm.return
  }
}


// -----// IR Dump After ConvertControlFlowToLLVMPass (convert-cf-to-llvm) //----- //
module attributes {triton_gpu.externs = {library_0 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/opencl.bc", library_1 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ocml.bc", library_2 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/ockl.bc", library_3 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/workspace/projects/triton/python/triton/third_party/rocm/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @add_kernel_0d1d2d3d(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public"} {
    %0 = llvm.mlir.constant(true) : i1
    %1 = llvm.mlir.constant(1 : index) : i32
    %2 = llvm.mlir.constant(0 : index) : i32
    %3 = llvm.mlir.constant(1024 : i32) : i32
    %4 = llvm.mlir.constant(2 : i32) : i32
    %5 = llvm.mlir.constant(1 : i32) : i32
    %6 = llvm.mlir.constant(0 : i32) : i32
    %7 = llvm.mlir.constant(256 : i32) : i32
    %8 = llvm.mlir.constant(4 : i32) : i32
    %9 = llvm.mlir.constant(64 : i32) : i32
    %10 = rocdl.workitem.id.x : i32
    %11 = llvm.trunc %10 : i32 to i32
    %12 = llvm.urem %11, %9  : i32
    %13 = llvm.udiv %11, %9  : i32
    %14 = llvm.urem %13, %8  : i32
    %15 = llvm.urem %12, %7  : i32
    %16 = llvm.mul %14, %9  : i32
    %17 = llvm.add %15, %16  : i32
    %18 = llvm.mul %17, %8  : i32
    %19 = llvm.add %18, %6  : i32
    %20 = llvm.add %18, %4  : i32
    %21 = rocdl.workgroup.id.x : i32
    %22 = llvm.trunc %21 : i32 to i32
    %23 = llvm.mul %22, %3  : i32
    %24 = llvm.add %19, %2  : i32
    %25 = llvm.add %20, %2  : i32
    %26 = llvm.add %23, %24  : i32
    %27 = llvm.add %23, %25  : i32
    %28 = llvm.icmp "slt" %26, %arg3 : i32
    %29 = llvm.getelementptr %arg0[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %30 = llvm.getelementptr %arg0[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %31 = llvm.addrspacecast %29 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    llvm.cond_br %28, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %32 = llvm.load %31 : !llvm.ptr<i32>
    llvm.br ^bb3(%32 : i32)
  ^bb2:  // pred: ^bb0
    llvm.br ^bb3(%6 : i32)
  ^bb3(%33: i32):  // 2 preds: ^bb1, ^bb2
    llvm.br ^bb4
  ^bb4:  // pred: ^bb3
    %34 = llvm.bitcast %33 : i32 to vector<2xf16>
    %35 = llvm.extractelement %34[%2 : i32] : vector<2xf16>
    %36 = llvm.extractelement %34[%1 : i32] : vector<2xf16>
    %37 = llvm.addrspacecast %30 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    llvm.cond_br %28, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %38 = llvm.load %37 : !llvm.ptr<i32>
    llvm.br ^bb7(%38 : i32)
  ^bb6:  // pred: ^bb4
    llvm.br ^bb7(%6 : i32)
  ^bb7(%39: i32):  // 2 preds: ^bb5, ^bb6
    llvm.br ^bb8
  ^bb8:  // pred: ^bb7
    %40 = llvm.bitcast %39 : i32 to vector<2xf16>
    %41 = llvm.extractelement %40[%2 : i32] : vector<2xf16>
    %42 = llvm.extractelement %40[%1 : i32] : vector<2xf16>
    %43 = llvm.getelementptr %arg1[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %44 = llvm.getelementptr %arg1[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %45 = llvm.addrspacecast %43 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    llvm.cond_br %28, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %46 = llvm.load %45 : !llvm.ptr<i32>
    llvm.br ^bb11(%46 : i32)
  ^bb10:  // pred: ^bb8
    llvm.br ^bb11(%6 : i32)
  ^bb11(%47: i32):  // 2 preds: ^bb9, ^bb10
    llvm.br ^bb12
  ^bb12:  // pred: ^bb11
    %48 = llvm.bitcast %47 : i32 to vector<2xf16>
    %49 = llvm.extractelement %48[%2 : i32] : vector<2xf16>
    %50 = llvm.extractelement %48[%1 : i32] : vector<2xf16>
    %51 = llvm.addrspacecast %44 : !llvm.ptr<f16, 1> to !llvm.ptr<i32>
    llvm.cond_br %28, ^bb13, ^bb14
  ^bb13:  // pred: ^bb12
    %52 = llvm.load %51 : !llvm.ptr<i32>
    llvm.br ^bb15(%52 : i32)
  ^bb14:  // pred: ^bb12
    llvm.br ^bb15(%6 : i32)
  ^bb15(%53: i32):  // 2 preds: ^bb13, ^bb14
    llvm.br ^bb16
  ^bb16:  // pred: ^bb15
    %54 = llvm.bitcast %53 : i32 to vector<2xf16>
    %55 = llvm.extractelement %54[%2 : i32] : vector<2xf16>
    %56 = llvm.extractelement %54[%1 : i32] : vector<2xf16>
    %57 = llvm.fadd %35, %49  : f16
    %58 = llvm.fadd %36, %50  : f16
    %59 = llvm.fadd %41, %55  : f16
    %60 = llvm.fadd %42, %56  : f16
    %61 = llvm.getelementptr %arg2[%26] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %62 = llvm.getelementptr %arg2[%27] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1>
    %63 = llvm.mlir.undef : vector<2xf16>
    %64 = llvm.insertelement %57, %63[%6 : i32] : vector<2xf16>
    %65 = llvm.insertelement %58, %64[%5 : i32] : vector<2xf16>
    %66 = llvm.bitcast %65 : vector<2xf16> to i32
    %67 = llvm.and %0, %28  : i1
    llvm.cond_br %67, ^bb17, ^bb18
  ^bb17:  // pred: ^bb16
    llvm.store %66, %61 : !llvm.ptr<f16, 1>
    llvm.br ^bb18
  ^bb18:  // 2 preds: ^bb16, ^bb17
    %68 = llvm.insertelement %59, %63[%6 : i32] : vector<2xf16>
    %69 = llvm.insertelement %60, %68[%5 : i32] : vector<2xf16>
    %70 = llvm.bitcast %69 : vector<2xf16> to i32
    llvm.cond_br %67, ^bb19, ^bb20
  ^bb19:  // pred: ^bb18
    llvm.store %70, %62 : !llvm.ptr<f16, 1>
    llvm.br ^bb20
  ^bb20:  // 2 preds: ^bb18, ^bb19
    llvm.return
  }
}


// -----// LLVM IR Dump //----- //
; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define amdgpu_kernel void @add_kernel_0d1d2d3d(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture readonly %1, ptr addrspace(1) nocapture writeonly %2, i32 %3) local_unnamed_addr #0 {
  %5 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %6 = shl i32 %5, 2
  %7 = and i32 %6, 1020
  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %9 = shl i32 %8, 10
  %10 = or i32 %7, %9
  %11 = icmp slt i32 %10, %3
  br i1 %11, label %12, label %.critedge

12:                                               ; preds = %4
  %13 = or i32 %10, 2
  %14 = sext i32 %13 to i64
  %15 = getelementptr half, ptr addrspace(1) %0, i64 %14
  %16 = sext i32 %10 to i64
  %17 = getelementptr half, ptr addrspace(1) %0, i64 %16
  %18 = addrspacecast ptr addrspace(1) %17 to ptr
  %19 = addrspacecast ptr addrspace(1) %15 to ptr
  %20 = getelementptr half, ptr addrspace(1) %1, i64 %14
  %21 = getelementptr half, ptr addrspace(1) %1, i64 %16
  %22 = addrspacecast ptr addrspace(1) %21 to ptr
  %23 = addrspacecast ptr addrspace(1) %20 to ptr
  %24 = load <2 x half>, ptr %19, align 4
  %25 = load <2 x half>, ptr %23, align 4
  %26 = fadd <2 x half> %24, %25
  %27 = getelementptr half, ptr addrspace(1) %2, i64 %14
  %28 = load <2 x half>, ptr %18, align 4
  %29 = load <2 x half>, ptr %22, align 4
  %30 = fadd <2 x half> %28, %29
  %31 = getelementptr half, ptr addrspace(1) %2, i64 %16
  store <2 x half> %30, ptr addrspace(1) %31, align 4
  store <2 x half> %26, ptr addrspace(1) %27, align 4
  br label %.critedge

.critedge:                                        ; preds = %4, %12
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.x() #1

attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) "amdgpu-flat-work-group-size"="1, 1024" "amdgpu-unsafe-fp-atomics"="true" "denormal-fp-math-f32"="preserve-sign" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!nvvm.annotations = !{!0}
!opencl.ocl.version = !{}
!llvm.ident = !{}
!llvm.module.flags = !{!3, !4}

!0 = !{ptr @add_kernel_0d1d2d3d, !"kernel", i32 1}
!1 = !{i32 2, i32 0}
!2 = !{!"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 8, !"PIC Level", i32 1}

// -----// AMDGCN Dump //----- //
	.text
	.amdgcn_target "amdgcn-amd-amdhsa--gfx90a"
	.globl	add_kernel_0d1d2d3d
	.p2align	8
	.type	add_kernel_0d1d2d3d,@function
add_kernel_0d1d2d3d:
	s_load_dword s0, s[4:5], 0x18
	v_lshlrev_b32_e32 v0, 2, v0
	v_and_b32_e32 v0, 0x3fc, v0
	v_lshl_or_b32 v0, s6, 10, v0
	s_waitcnt lgkmcnt(0)
	v_cmp_gt_i32_e32 vcc, s0, v0
	s_and_saveexec_b64 s[0:1], vcc
	s_cbranch_execz .LBB0_2
	s_load_dwordx4 s[0:3], s[4:5], 0x0
	s_load_dwordx2 s[6:7], s[4:5], 0x10
	v_ashrrev_i32_e32 v1, 31, v0
	v_lshlrev_b64 v[0:1], 1, v[0:1]
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v3, s1
	v_add_co_u32_e32 v2, vcc, s0, v0
	v_addc_co_u32_e32 v3, vcc, v3, v1, vcc
	v_mov_b32_e32 v5, s3
	v_add_co_u32_e32 v4, vcc, s2, v0
	v_addc_co_u32_e32 v5, vcc, v5, v1, vcc
	global_load_dwordx2 v[6:7], v[2:3], off
	global_load_dwordx2 v[8:9], v[4:5], off
	v_mov_b32_e32 v2, s7
	v_add_co_u32_e32 v0, vcc, s6, v0
	v_addc_co_u32_e32 v1, vcc, v2, v1, vcc
	s_waitcnt vmcnt(0)
	v_pk_add_f16 v3, v7, v9
	v_pk_add_f16 v2, v6, v8
	global_store_dwordx2 v[0:1], v[2:3], off
.LBB0_2:
	s_endpgm
	.section	.rodata,#alloc
	.p2align	6, 0x0
	.amdhsa_kernel add_kernel_0d1d2d3d
		.amdhsa_group_segment_fixed_size 0
		.amdhsa_private_segment_fixed_size 0
		.amdhsa_kernarg_size 28
		.amdhsa_user_sgpr_count 6
		.amdhsa_user_sgpr_private_segment_buffer 1
		.amdhsa_user_sgpr_dispatch_ptr 0
		.amdhsa_user_sgpr_queue_ptr 0
		.amdhsa_user_sgpr_kernarg_segment_ptr 1
		.amdhsa_user_sgpr_dispatch_id 0
		.amdhsa_user_sgpr_flat_scratch_init 0
		.amdhsa_user_sgpr_private_segment_size 0
		.amdhsa_system_sgpr_private_segment_wavefront_offset 0
		.amdhsa_system_sgpr_workgroup_id_x 1
		.amdhsa_system_sgpr_workgroup_id_y 0
		.amdhsa_system_sgpr_workgroup_id_z 0
		.amdhsa_system_sgpr_workgroup_info 0
		.amdhsa_system_vgpr_workitem_id 0
		.amdhsa_next_free_vgpr 10
		.amdhsa_next_free_sgpr 8
		.amdhsa_accum_offset 12
		.amdhsa_reserve_flat_scratch 0
		.amdhsa_reserve_xnack_mask 1
		.amdhsa_float_round_mode_32 0
		.amdhsa_float_round_mode_16_64 0
		.amdhsa_float_denorm_mode_32 0
		.amdhsa_float_denorm_mode_16_64 3
		.amdhsa_dx10_clamp 1
		.amdhsa_ieee_mode 1
		.amdhsa_fp16_overflow 0
		.amdhsa_tg_split 0
		.amdhsa_exception_fp_ieee_invalid_op 0
		.amdhsa_exception_fp_denorm_src 0
		.amdhsa_exception_fp_ieee_div_zero 0
		.amdhsa_exception_fp_ieee_overflow 0
		.amdhsa_exception_fp_ieee_underflow 0
		.amdhsa_exception_fp_ieee_inexact 0
		.amdhsa_exception_int_div_zero 0
	.end_amdhsa_kernel
	.text
.Lfunc_end0:
	.size	add_kernel_0d1d2d3d, .Lfunc_end0-add_kernel_0d1d2d3d

	.p2alignl 6, 3212836864
	.fill 256, 4, 3212836864
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.ident	"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"
	.section	".note.GNU-stack"
	.amdgpu_metadata
---
amdhsa.kernels:
  - .agpr_count:     0
    .args:
      - .address_space:  global
        .offset:         0
        .size:           8
        .value_kind:     global_buffer
      - .address_space:  global
        .offset:         8
        .size:           8
        .value_kind:     global_buffer
      - .address_space:  global
        .offset:         16
        .size:           8
        .value_kind:     global_buffer
      - .offset:         24
        .size:           4
        .value_kind:     by_value
    .group_segment_fixed_size: 0
    .kernarg_segment_align: 8
    .kernarg_segment_size: 28
    .language:       OpenCL C
    .language_version:
      - 2
      - 0
    .max_flat_workgroup_size: 1024
    .name:           add_kernel_0d1d2d3d
    .private_segment_fixed_size: 0
    .sgpr_count:     12
    .sgpr_spill_count: 0
    .symbol:         add_kernel_0d1d2d3d.kd
    .vgpr_count:     10
    .vgpr_spill_count: 0
    .wavefront_size: 64
amdhsa.target:   amdgcn-amd-amdhsa--gfx90a
amdhsa.version:
  - 1
  - 1
...

	.end_amdgpu_metadata

element_num = 16
testing sizes: SIZE: 16, ab type: torch.float16, a_is_f8: False
gold = tensor([-0.1002,  0.1133, -0.0720, -2.1211, -1.8926, -1.6963,  1.3398, -2.7910,
        -1.1807,  0.1334, -1.7695,  0.9478, -1.5879,  1.5664, -0.8726, -0.9282],
       device='cuda:0', dtype=torch.float16)
c = tensor([-0.1002,  0.1133, -0.0720, -2.1211, -1.8926, -1.6963,  1.3398, -2.7910,
        -1.1807,  0.1334, -1.7695,  0.9478, -1.5879,  1.5664, -0.8726, -0.9282],
       device='cuda:0', dtype=torch.float16)
PASSED!
